var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiConfig.html",[0,0.343,1,1.593]],["body/interfaces/ApiConfig.html",[0,0.408,1,2.401,2,1.086,3,0.817,4,0.817,5,0.596,6,2.638,7,0.702,8,2.805,9,1.677,10,4.169,11,2.401,12,3.346,13,0.596,14,1.578,15,1.236,16,1.704,17,2.862,18,0.756,19,0.054,20,2.805,21,1.384,22,1.086,23,0.817,24,1.809,25,0.702,26,0.041,27,0.041]],["title/classes/BasicService.html",[28,0.502,29,1.379]],["body/classes/BasicService.html",[2,0.747,3,0.563,4,0.563,5,0.41,7,0.808,8,2.179,11,1.865,13,0.41,14,1.226,15,0.805,18,0.749,19,0.054,22,1.249,25,0.483,26,0.032,27,0.032,28,0.793,29,2.058,30,1.127,31,1.792,32,2.779,33,1.522,34,2.179,35,2.599,36,3.238,37,2.599,38,3.238,39,1.865,40,1.564,41,1.502,42,2.599,43,2.779,44,2.378,45,4.13,46,2.779,47,1.722,48,1.614,49,1.896,50,1.522,51,3.238,52,2.495,53,1.641,54,3.238,55,2.179,56,1.405,57,1.07,58,1.364,59,1.865,60,1.364,61,1.641,62,1.865,63,3.238,64,2.517,65,2.261,66,1.405,67,1.792,68,1.865,69,2.178,70,0.981,71,0.981,72,1.127,73,1.302,74,1.815,75,1.127,76,1.405,77,2.261,78,1.522,79,2.261,80,2.261,81,2.261,82,2.261,83,2.261,84,2.261]],["title/interfaces/Controller.html",[0,0.343,23,0.688]],["body/interfaces/Controller.html",[0,0.449,2,0.875,3,0.659,4,0.659,5,0.481,7,0.566,13,0.481,14,1.369,15,0.9,16,1.36,17,2.371,18,0.747,19,0.054,20,1.782,21,1.432,23,1.239,24,1.787,25,0.88,26,0.035,27,0.035,41,0.875,57,1.617,58,1.195,62,2.753,85,1.525,86,2.903,87,2.943,88,1.675,89,1.802,90,2.903,91,1.782,92,1.782,93,1.782,94,2.433,95,1.92,96,2.052,97,2.052,98,2.052]],["title/interfaces/ControllerHandler.html",[0,0.343,88,1.047]],["body/interfaces/ControllerHandler.html",[0,0.448,2,0.873,3,0.657,4,0.657,5,0.479,7,0.564,13,0.479,14,1.367,15,1.151,16,1.615,17,2.665,18,0.746,19,0.054,20,2.429,21,1.468,23,1.151,24,1.784,25,0.879,26,0.035,27,0.035,41,0.873,57,1.46,62,2.079,85,1.521,86,2.898,87,3.031,88,1.557,89,1.317,90,2.121,91,1.778,92,1.778,93,1.778,94,2.429,95,1.918,96,2.05,97,2.05,98,2.05]],["title/classes/ExpressServer.html",[28,0.502,99,1.379]],["body/classes/ExpressServer.html",[0,0.151,3,0.303,4,0.303,5,0.221,7,0.634,9,1.289,13,0.221,15,0.303,16,1.167,18,0.596,19,0.054,21,1.346,22,1.167,23,1.214,24,0.871,25,0.26,26,0.02,27,0.02,28,0.464,30,0.607,31,1.694,40,1.124,44,1.156,46,0.819,47,1.682,48,1,49,2.088,50,1.722,53,1.621,55,1.35,56,1.424,57,1.084,58,1.084,59,1.156,60,0.981,61,1.111,64,2.698,66,0.871,67,1.694,68,1.156,69,1.862,70,1.288,71,1.533,72,0.607,75,1.479,76,1.694,78,0.819,87,1.156,88,1.617,89,1.276,95,0.528,99,1.479,100,2.248,101,0.701,102,2.151,103,1.611,104,2.055,105,1.611,106,1.611,107,1.611,108,2.377,109,1.611,110,1.218,111,1.35,112,1.218,113,2.377,114,1.35,115,2.635,116,1.218,117,1.722,118,1.722,119,1.35,120,1.35,121,1.35,122,1.35,123,1.218,124,1.997,125,1.218,126,1.35,127,1.709,128,1.218,129,1.479,130,1.35,131,1.709,132,1.218,133,1.35,134,1.945,135,0.701,136,2.055,137,2.055,138,1.35,139,2.989,140,1.35,141,0.978,142,0.978,143,0.819,144,0.978,145,0.978,146,0.978,147,1.474,148,0.978,149,1.722,150,2.873,151,0.978,152,1.611,153,0.978,154,0.819,155,0.819,156,0.978,157,0.978,158,0.978,159,0.978,160,0.978,161,1.611,162,1.611,163,1.611,164,0.978,165,0.978,166,0.978,167,1.611,168,0.978,169,0.978,170,0.978,171,0.978,172,1,173,0.978,174,0.978,175,0.978,176,0.978,177,0.978,178,0.978,179,0.978,180,0.978,181,0.978,182,0.978,183,0.978,184,0.978,185,0.978,186,0.978,187,0.978,188,0.978,189,0.978,190,0.978,191,0.978,192,0.978,193,1.611,194,0.978,195,0.978,196,0.978,197,0.978,198,0.978,199,0.978,200,0.978,201,0.978,202,0.978]],["title/interfaces/RouterControllerMap.html",[0,0.343,147,1.593]],["body/interfaces/RouterControllerMap.html",[0,0.194,2,0.515,3,0.388,4,0.388,5,0.283,7,0.333,9,1.132,15,0.388,16,1.132,18,0.283,19,0.055,21,1.294,22,1.305,23,1.216,24,1.063,25,0.333,26,0.024,27,0.024,28,0.445,31,1.063,40,1.145,44,0.899,46,1.05,47,1.621,49,1.793,50,1.05,53,0.677,55,1.05,60,0.999,61,1.312,64,2.535,66,0.677,67,1.312,68,0.899,69,1.708,70,1.063,72,0.778,75,1.708,76,1.857,78,1.05,87,1.411,88,1.565,89,1.221,99,1.221,100,1.411,101,0.899,102,2.276,103,1.253,104,1.967,108,1.649,111,1.05,113,2.035,114,1.05,115,2.428,117,1.649,118,1.649,119,1.05,120,1.05,121,1.05,122,1.05,124,1.649,126,1.05,127,1.411,129,1.221,130,1.05,131,1.411,133,1.05,134,1.856,136,1.967,137,1.967,138,1.05,139,3.185,140,1.649,141,1.253,142,1.253,143,1.05,144,1.253,145,1.967,146,1.967,147,1.973,148,1.967,149,2.035,150,3.09,151,1.253,152,1.967,153,1.253,154,1.05,155,1.05,156,1.253,157,1.253,158,1.253,159,1.253,160,1.253,161,1.967,162,1.967,163,1.967,164,1.253,165,1.253,166,1.253,167,1.967,168,1.253,169,1.253,170,1.253,171,1.253,172,1.221,173,1.253,174,1.253,175,1.253,176,1.253,177,1.253,178,1.253,179,1.253,180,1.253,181,1.253,182,1.253,183,1.253,184,1.253,185,1.253,186,1.253,187,1.253,188,1.253,189,1.253,190,1.253,191,1.253,192,1.253,193,1.967,194,1.253,195,1.253,196,1.253,197,1.253,198,1.253,199,1.253,200,1.253,201,1.253,202,1.253,203,1.56,204,1.56,205,1.56]],["title/interfaces/ServerApplication.html",[0,0.343,60,0.914]],["body/interfaces/ServerApplication.html",[0,0.212,2,0.563,3,0.424,4,0.424,5,0.309,7,0.768,9,1.552,13,0.309,16,1.187,18,0.704,19,0.054,21,1.428,22,0.563,23,1.236,24,1.778,25,0.364,26,0.026,27,0.026,44,1.842,47,1.828,48,1.308,53,1.778,56,1.683,57,1.282,58,1.282,59,2.069,60,0.867,61,1.138,64,2.862,66,1.388,67,2.003,68,1.842,69,2.042,70,2.003,71,1.778,76,1.912,88,1.828,89,1.934,105,2.568,106,2.568,107,2.568,108,2.966,109,2.568,111,1.765,113,3.042,114,1.765,117,2.611,118,2.611,119,1.765,120,1.765,121,1.765,122,1.765,124,2.611,126,1.765,127,2.069,129,1.791,130,1.765,131,2.069,133,2.153,134,2.128,138,1.765,206,3.427,207,1.368,208,2.624,209,1.704,210,1.704,211,1.704,212,1.704,213,1.704,214,1.704]],["title/classes/ServerFactory.html",[28,0.502,215,1.593]],["body/classes/ServerFactory.html",[3,0.662,4,0.662,5,0.483,7,0.569,13,0.483,15,0.903,18,0.805,19,0.054,22,1.199,25,0.775,26,0.035,27,0.035,28,0.749,30,1.327,31,1.575,39,2.09,40,1.008,47,1.757,48,1.809,49,1.155,53,1.155,56,1.155,57,0.879,58,0.879,60,1.533,61,2.013,66,1.575,71,1.155,72,1.327,75,1.327,76,1.155,94,2.442,95,1.575,99,1.809,102,2.553,135,1.533,149,2.442,172,2.058,215,2.09,216,2.09,217,1.791,218,3.56,219,3.934,220,2.913,221,3.629,222,3.629,223,3.725,224,2.662,225,3.629,226,3.629,227,2.913,228,2.662,229,2.662,230,3.629,231,2.137,232,2.662]],["title/classes/ServerSingleton.html",[28,0.502,73,1.593]],["body/classes/ServerSingleton.html",[3,0.712,4,0.712,5,0.519,7,0.611,13,0.519,15,0.947,18,0.691,19,0.054,22,1.258,25,0.611,26,0.037,27,0.037,28,0.777,30,1.426,31,1.653,39,2.193,47,1.8,48,1.898,49,1.241,53,1.241,56,1.241,57,0.945,58,0.945,60,1.571,61,1.858,62,2.629,71,1.241,72,1.426,73,2.193,74,3.665,75,1.426,76,1.241,95,1.241,135,1.647,154,1.925,155,2.881,172,2.276,215,1.647,216,2.193,218,3.438,219,4.007,220,2.296,223,3.817,227,3.058,231,2.296,233,1.925,234,4.566,235,3.809,236,3.809,237,2.86,238,2.86]],["title/interfaces/ServiceConfig.html",[0,0.343,52,1.379]],["body/interfaces/ServiceConfig.html",[0,0.353,2,0.94,3,0.708,4,0.708,5,0.516,7,0.608,8,1.914,9,1.505,11,1.638,13,0.516,14,1.437,16,1.254,18,0.827,19,0.053,21,1.473,25,0.608,26,0.037,27,0.037,34,1.914,41,0.94,47,1.437,52,1.891,58,1.673,66,1.647,127,2.459,129,2.524,131,2.185,134,2.581,135,2.185,239,2.284,240,2.284,241,4.556,242,4.556,243,3.795,244,3.795,245,3.795,246,3.795,247,3.795,248,4.27,249,3.795,250,3.795,251,3.795]],["title/coverage.html",[252,2.506]],["body/coverage.html",[0,0.606,1,1.638,5,0.516,6,2.284,9,0.94,18,0.516,19,0.053,23,0.944,26,0.037,27,0.037,28,0.827,29,1.418,31,2.059,32,1.914,33,1.914,40,1.077,41,0.94,52,1.418,60,0.94,70,2.163,73,1.638,85,2.185,88,1.077,96,1.418,97,1.418,98,1.418,99,1.418,100,2.185,101,2.185,147,1.638,206,2.284,207,2.284,215,1.638,216,2.185,217,1.914,233,1.914,239,2.284,240,2.284,252,1.914,253,2.845,254,2.845,255,2.284,256,4.32,257,3.428,258,3.046,259,2.284,260,4.065,261,3.81,262,2.284,263,2.284,264,2.845,265,2.845,266,2.284,267,2.284,268,2.284]],["title/dependencies.html",[269,1.875,270,2.66]],["body/dependencies.html",[19,0.052,26,0.046,27,0.046,102,2.717,134,2.007,140,2.709,143,2.709,270,3.232,271,4.026,272,4.026,273,4.026,274,4.026,275,4.026]],["title/miscellaneous/enumerations.html",[276,1.345,277,2.66]],["body/miscellaneous/enumerations.html",[13,0.703,17,2.657,19,0.052,26,0.045,27,0.045,41,1.28,85,2.232,91,2.608,92,2.608,93,2.608,95,2.212,96,2.299,97,2.299,98,2.299,276,2.232,277,3.111,278,3.111]],["title/miscellaneous/functions.html",[276,1.345,279,2.229]],["body/miscellaneous/functions.html",[1,2.006,7,1.03,9,1.702,11,2.006,13,0.455,15,1.13,16,1.624,18,0.875,19,0.051,21,1.453,23,1.075,26,0.034,27,0.034,28,0.784,29,1.25,41,1.501,43,2.343,52,1.994,56,2.092,57,1.67,58,1.593,59,2.006,67,1.088,69,1.25,70,1.876,71,1.876,96,1.994,97,1.994,98,1.994,139,1.687,261,2.013,262,2.013,263,2.013,276,1.444,278,2.013,279,1.687,280,4.542,281,2.508,282,2.508,283,4.822,284,4.822,285,2.508,286,2.508,287,2.508,288,2.508,289,2.508,290,2.508,291,3.483,292,2.508,293,2.508,294,2.508,295,2.508,296,2.508,297,2.508]],["title/index.html",[13,0.424,298,2.335,299,2.335]],["body/index.html",[9,0.873,12,2.121,15,0.657,19,0.051,21,0.759,22,1.192,23,1.023,25,0.564,26,0.035,27,0.035,28,0.655,29,1.799,34,2.429,35,2.121,37,2.121,39,2.368,40,1.557,41,1.46,42,2.121,43,3.114,49,1.146,67,1.146,129,1.317,150,1.778,172,1.317,300,2.642,301,2.642,302,2.642,303,2.642,304,2.642,305,2.642,306,2.642,307,4.628,308,2.642,309,3.61,310,3.61,311,4.112,312,3.61,313,3.61,314,3.61,315,4.42,316,3.61,317,4.112,318,2.642,319,2.642,320,2.642,321,2.642,322,2.642,323,2.642,324,4.42,325,2.642,326,2.642,327,2.642,328,2.642,329,2.642,330,2.121,331,2.642,332,4.112,333,2.642,334,2.642,335,2.642,336,2.642,337,2.642,338,2.642,339,2.642,340,2.642,341,2.642,342,2.642,343,2.642,344,2.642,345,2.642,346,3.61,347,2.642,348,2.642,349,3.61,350,2.642,351,2.642,352,2.642,353,2.642,354,2.642,355,2.642,356,2.642,357,2.642,358,2.642,359,2.642,360,3.61,361,2.642,362,2.642,363,3.61,364,1.778,365,3.61,366,2.642,367,1.778,368,2.642,369,2.642,370,2.642,371,2.642]],["title/modules.html",[372,2.99]],["body/modules.html",[19,0.048,26,0.048,27,0.048,372,3.418]],["title/overview.html",[373,2.99]],["body/overview.html",[2,1.384,19,0.047,26,0.047,27,0.047,30,2.088,373,3.363,374,4.189,375,4.189]],["title/properties.html",[14,1.255,269,1.875]],["body/properties.html",[14,1.593,19,0.05,26,0.047,27,0.047,330,3.376,376,4.206]],["title/unit-test.html",[364,2.008,367,2.008]],["body/unit-test.html",[5,0.504,19,0.054,26,0.036,27,0.036,32,1.868,33,1.868,40,1.051,100,1.599,101,1.599,216,2.15,217,1.868,233,1.868,252,1.868,255,2.229,256,4.409,257,2.997,258,3.779,259,3.622,260,3.622,266,3.779,267,2.229,268,2.229,279,1.868,364,1.868,367,1.868,377,2.776,378,2.776,379,5.036,380,4.511,381,2.776,382,2.776,383,3.733,384,3.733,385,2.776,386,2.776,387,2.776,388,2.776,389,3.733,390,4.707,391,2.776,392,2.776,393,2.776]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"unit-test.html":{}}}],["1",{"_index":195,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["1.0.1",{"_index":376,"title":{},"body":{"properties.html":{}}}],["1.10.0",{"_index":272,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":260,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["10/10",{"_index":387,"title":{},"body":{"unit-test.html":{}}}],["100",{"_index":256,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["15/15",{"_index":389,"title":{},"body":{"unit-test.html":{}}}],["16/20",{"_index":386,"title":{},"body":{"unit-test.html":{}}}],["17/18",{"_index":382,"title":{},"body":{"unit-test.html":{}}}],["18",{"_index":306,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":258,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["3/3",{"_index":264,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":349,"title":{},"body":{"index.html":{}}}],["4",{"_index":374,"title":{},"body":{"overview.html":{}}}],["4.18.2",{"_index":271,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":273,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":257,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["43/45",{"_index":384,"title":{},"body":{"unit-test.html":{}}}],["5.0.0",{"_index":275,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":266,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["6",{"_index":375,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":390,"title":{},"body":{"unit-test.html":{}}}],["7/7",{"_index":265,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":259,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["80",{"_index":385,"title":{},"body":{"unit-test.html":{}}}],["94",{"_index":381,"title":{},"body":{"unit-test.html":{}}}],["96",{"_index":383,"title":{},"body":{"unit-test.html":{}}}],["abstract",{"_index":218,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["abstraction",{"_index":103,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["add",{"_index":113,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["addcontroller",{"_index":105,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{}}}],["addcontroller(controller",{"_index":111,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["addcontrollerhandlers",{"_index":106,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{}}}],["addcontrollerhandlers(controllerid",{"_index":114,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["added",{"_index":337,"title":{},"body":{"index.html":{}}}],["additional",{"_index":328,"title":{},"body":{"index.html":{}}}],["addmiddleware",{"_index":107,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{}}}],["addmiddleware(middleware",{"_index":121,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["allow",{"_index":66,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"interfaces/ServiceConfig.html":{}}}],["already",{"_index":164,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["api",{"_index":9,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["api(config",{"_index":282,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apiconfig",{"_index":1,"title":{"interfaces/ApiConfig.html":{}},"body":{"interfaces/ApiConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["app",{"_index":154,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerSingleton.html":{}}}],["application",{"_index":61,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["application.ts",{"_index":207,"title":{},"body":{"interfaces/ServerApplication.html":{},"coverage.html":{}}}],["application.ts:19",{"_index":213,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:24",{"_index":212,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:31",{"_index":211,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:38",{"_index":209,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:46",{"_index":210,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:54",{"_index":214,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["args",{"_index":122,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["array.isarray(controllerhandlers",{"_index":175,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["async(req",{"_index":183,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["automatically",{"_index":297,"title":{},"body":{"miscellaneous/functions.html":{}}}],["available",{"_index":92,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"miscellaneous/enumerations.html":{}}}],["await",{"_index":190,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["basic",{"_index":34,"title":{},"body":{"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["basicservice",{"_index":29,"title":{"classes/BasicService.html":{}},"body":{"classes/BasicService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["basicservice({port",{"_index":348,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":248,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["bootstrap",{"_index":345,"title":{},"body":{"index.html":{}}}],["branches",{"_index":377,"title":{},"body":{"unit-test.html":{}}}],["breaking",{"_index":326,"title":{},"body":{"index.html":{}}}],["bugfixes",{"_index":319,"title":{},"body":{"index.html":{}}}],["build",{"_index":35,"title":{},"body":{"classes/BasicService.html":{},"index.html":{}}}],["builds/experiments72/basic",{"_index":379,"title":{},"body":{"unit-test.html":{}}}],["callback",{"_index":69,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"miscellaneous/functions.html":{}}}],["changes",{"_index":324,"title":{},"body":{"index.html":{}}}],["chore(deps",{"_index":335,"title":{},"body":{"index.html":{}}}],["chosen",{"_index":246,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["class",{"_index":28,"title":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["classes",{"_index":30,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"overview.html":{}}}],["close",{"_index":108,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["code",{"_index":333,"title":{},"body":{"index.html":{}}}],["commands",{"_index":359,"title":{},"body":{"index.html":{}}}],["commit",{"_index":311,"title":{},"body":{"index.html":{}}}],["compile",{"_index":360,"title":{},"body":{"index.html":{}}}],["config",{"_index":285,"title":{},"body":{"miscellaneous/functions.html":{}}}],["config.ts",{"_index":240,"title":{},"body":{"interfaces/ServiceConfig.html":{},"coverage.html":{}}}],["configuration",{"_index":11,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["console.log('controller",{"_index":185,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["console.log('controller[handler",{"_index":187,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["console.log('handler",{"_index":186,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["console.log('server",{"_index":351,"title":{},"body":{"index.html":{}}}],["const",{"_index":150,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"index.html":{}}}],["constructor",{"_index":50,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["constructor(serviceconfig",{"_index":51,"title":{},"body":{"classes/BasicService.html":{}}}],["contains",{"_index":91,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"miscellaneous/enumerations.html":{}}}],["controller",{"_index":23,"title":{"interfaces/Controller.html":{}},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["controller('ping",{"_index":353,"title":{},"body":{"index.html":{}}}],["controller(name",{"_index":290,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controller.handler",{"_index":167,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controller[handler",{"_index":188,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controller[handler](req",{"_index":191,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controller_method",{"_index":17,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"miscellaneous/enumerations.html":{}}}],["controllerhandler",{"_index":88,"title":{"interfaces/ControllerHandler.html":{}},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"coverage.html":{}}}],["controllerhandler.handler",{"_index":181,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandler.method",{"_index":179,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandler.path",{"_index":180,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandlers",{"_index":115,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandlers.foreach((controllerhandler",{"_index":178,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerid",{"_index":119,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["convention",{"_index":312,"title":{},"body":{"index.html":{}}}],["conventional",{"_index":327,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":252,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["create",{"_index":39,"title":{},"body":{"classes/BasicService.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"index.html":{}}}],["createexpressserver",{"_index":230,"title":{},"body":{"classes/ServerFactory.html":{}}}],["createrouterforcontroller(controller",{"_index":170,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["creates",{"_index":55,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["createserver",{"_index":221,"title":{},"body":{"classes/ServerFactory.html":{}}}],["createserver(type",{"_index":222,"title":{},"body":{"classes/ServerFactory.html":{}}}],["critical",{"_index":318,"title":{},"body":{"index.html":{}}}],["customization",{"_index":329,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":283,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decorator's",{"_index":10,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["decorators",{"_index":352,"title":{},"body":{"index.html":{}}}],["default",{"_index":135,"title":{},"body":{"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["default_swagger_location",{"_index":137,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["default_swagger_path",{"_index":136,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["default_swagger_url",{"_index":152,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["defined",{"_index":53,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["delete",{"_index":98,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["delete(path",{"_index":286,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dependencies",{"_index":270,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":336,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["dictionary",{"_index":146,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["direcotry",{"_index":138,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["directory",{"_index":251,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["docs",{"_index":151,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["docspath",{"_index":241,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["documentation",{"_index":253,"title":{},"body":{"coverage.html":{}}}],["enable/disable",{"_index":249,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["enum",{"_index":94,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ServerFactory.html":{}}}],["enumerations",{"_index":277,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error('controller",{"_index":163,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["eslint",{"_index":370,"title":{},"body":{"index.html":{}}}],["essential",{"_index":323,"title":{},"body":{"index.html":{}}}],["execute",{"_index":42,"title":{},"body":{"classes/BasicService.html":{},"index.html":{}}}],["experiments72/basic",{"_index":308,"title":{},"body":{"index.html":{}}}],["export",{"_index":25,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["expose",{"_index":133,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["express",{"_index":102,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"dependencies.html":{}}}],["express.router",{"_index":171,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["expressserver",{"_index":99,"title":{"classes/ExpressServer.html":{}},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"coverage.html":{}}}],["extend",{"_index":38,"title":{},"body":{"classes/BasicService.html":{}}}],["extens",{"_index":294,"title":{},"body":{"miscellaneous/functions.html":{}}}],["facotry",{"_index":225,"title":{},"body":{"classes/ServerFactory.html":{}}}],["factory",{"_index":220,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["factory.ts",{"_index":217,"title":{},"body":{"classes/ServerFactory.html":{},"coverage.html":{},"unit-test.html":{}}}],["factory.ts:37",{"_index":224,"title":{},"body":{"classes/ServerFactory.html":{}}}],["false",{"_index":81,"title":{},"body":{"classes/BasicService.html":{}}}],["features",{"_index":321,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"unit-test.html":{}}}],["follows",{"_index":314,"title":{},"body":{"index.html":{}}}],["found",{"_index":174,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["function",{"_index":70,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":279,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"unit-test.html":{}}}],["get('/ping",{"_index":355,"title":{},"body":{"index.html":{}}}],["get(path",{"_index":287,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getinstance",{"_index":235,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["getinstance(type",{"_index":236,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["getting",{"_index":298,"title":{"index.html":{}},"body":{}}],["handler",{"_index":87,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["handlers",{"_index":89,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["http",{"_index":144,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["id",{"_index":120,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["identifier",{"_index":254,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":149,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{}}}],["implement",{"_index":301,"title":{},"body":{"index.html":{}}}],["implements",{"_index":104,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["import",{"_index":22,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"index.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indexable",{"_index":203,"title":{},"body":{"interfaces/RouterControllerMap.html":{}}}],["indicates",{"_index":332,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["installation",{"_index":303,"title":{},"body":{"index.html":{}}}],["instance",{"_index":62,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ServerSingleton.html":{}}}],["instantiate",{"_index":296,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"overview.html":{}}}],["interfaces/controller",{"_index":141,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["interfaces/server",{"_index":72,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["jest",{"_index":366,"title":{},"body":{"index.html":{}}}],["js",{"_index":362,"title":{},"body":{"index.html":{}}}],["key",{"_index":148,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["lines",{"_index":378,"title":{},"body":{"unit-test.html":{}}}],["lint",{"_index":369,"title":{},"body":{"index.html":{}}}],["linter",{"_index":371,"title":{},"body":{"index.html":{}}}],["list",{"_index":90,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["listen",{"_index":67,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["listen(port",{"_index":126,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["listening",{"_index":243,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["literal",{"_index":204,"title":{},"body":{"interfaces/RouterControllerMap.html":{}}}],["location",{"_index":131,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["major",{"_index":325,"title":{},"body":{"index.html":{}}}],["marks",{"_index":284,"title":{},"body":{"miscellaneous/functions.html":{}}}],["matching",{"_index":27,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"unit-test.html":{}}}],["matter",{"_index":343,"title":{},"body":{"index.html":{}}}],["method",{"_index":15,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["methods",{"_index":48,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["microservice",{"_index":36,"title":{},"body":{"classes/BasicService.html":{}}}],["microservices",{"_index":302,"title":{},"body":{"index.html":{}}}],["middleware",{"_index":124,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["minor",{"_index":320,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":276,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["module",{"_index":300,"title":{},"body":{"index.html":{}}}],["modules",{"_index":372,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":118,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["morgan",{"_index":140,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"dependencies.html":{}}}],["name",{"_index":57,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"miscellaneous/functions.html":{}}}],["needed",{"_index":340,"title":{},"body":{"index.html":{}}}],["new",{"_index":40,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["nodejs",{"_index":305,"title":{},"body":{"index.html":{}}}],["non",{"_index":322,"title":{},"body":{"index.html":{}}}],["npm",{"_index":307,"title":{},"body":{"index.html":{}}}],["number",{"_index":127,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["object",{"_index":12,"title":{},"body":{"interfaces/ApiConfig.html":{},"index.html":{}}}],["one",{"_index":117,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["optional",{"_index":58,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["overview",{"_index":373,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":269,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":76,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["parameters",{"_index":56,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"miscellaneous/functions.html":{}}}],["patch",{"_index":316,"title":{},"body":{"index.html":{}}}],["path",{"_index":16,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["perform",{"_index":365,"title":{},"body":{"index.html":{}}}],["ping",{"_index":356,"title":{},"body":{"index.html":{}}}],["pingcontroller",{"_index":354,"title":{},"body":{"index.html":{}}}],["pingservice",{"_index":347,"title":{},"body":{"index.html":{}}}],["pingservice.run",{"_index":350,"title":{},"body":{"index.html":{}}}],["pong",{"_index":357,"title":{},"body":{"index.html":{}}}],["port",{"_index":129,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["post",{"_index":96,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["post(path",{"_index":288,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prepareswagger",{"_index":109,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{}}}],["prepareswagger(path",{"_index":130,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["presents",{"_index":165,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["private",{"_index":75,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["project",{"_index":313,"title":{},"body":{"index.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/ServiceConfig.html":{},"properties.html":{}}}],["property",{"_index":24,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["protected",{"_index":45,"title":{},"body":{"classes/BasicService.html":{}}}],["provided",{"_index":292,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provider",{"_index":295,"title":{},"body":{"miscellaneous/functions.html":{}}}],["public",{"_index":49,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"index.html":{}}}],["put",{"_index":97,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["put(path",{"_index":289,"title":{},"body":{"miscellaneous/functions.html":{}}}],["randomically",{"_index":247,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["rappresent",{"_index":208,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["rappresents",{"_index":8,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{}}}],["readonly",{"_index":46,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["refactor(optional_scope",{"_index":331,"title":{},"body":{"index.html":{}}}],["refactoring",{"_index":334,"title":{},"body":{"index.html":{}}}],["release",{"_index":315,"title":{},"body":{"index.html":{}}}],["requests",{"_index":68,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["requirements",{"_index":304,"title":{},"body":{"index.html":{}}}],["res",{"_index":184,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["res.send(response",{"_index":192,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["response",{"_index":189,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["results",{"_index":26,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"unit-test.html":{}}}],["return",{"_index":172,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"index.html":{}}}],["returns",{"_index":71,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"miscellaneous/functions.html":{}}}],["router",{"_index":139,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"miscellaneous/functions.html":{}}}],["router/controller",{"_index":145,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["router[method](path",{"_index":182,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["routercontrollermap",{"_index":147,"title":{"interfaces/RouterControllerMap.html":{}},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{}}}],["run",{"_index":43,"title":{},"body":{"classes/BasicService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["run(callback",{"_index":63,"title":{},"body":{"classes/BasicService.html":{}}}],["select",{"_index":226,"title":{},"body":{"classes/ServerFactory.html":{}}}],["semantic",{"_index":309,"title":{},"body":{"index.html":{}}}],["server",{"_index":47,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["server.ts",{"_index":101,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{},"unit-test.html":{}}}],["server.ts:118",{"_index":116,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:14",{"_index":205,"title":{},"body":{"interfaces/RouterControllerMap.html":{}}}],["server.ts:162",{"_index":132,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:45",{"_index":110,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:62",{"_index":128,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:69",{"_index":125,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:78",{"_index":123,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:87",{"_index":112,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server_method",{"_index":229,"title":{},"body":{"classes/ServerFactory.html":{}}}],["server_type",{"_index":223,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["server_type.express",{"_index":227,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["serverapplication",{"_index":60,"title":{"interfaces/ServerApplication.html":{}},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["serverfactory",{"_index":215,"title":{"classes/ServerFactory.html":{}},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["serverfactory.createserver(type",{"_index":238,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["servers/express",{"_index":228,"title":{},"body":{"classes/ServerFactory.html":{}}}],["serversingleton",{"_index":73,"title":{"classes/ServerSingleton.html":{}},"body":{"classes/BasicService.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["serversingleton.getinstance",{"_index":79,"title":{},"body":{"classes/BasicService.html":{}}}],["service",{"_index":41,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["service(serviceconfig",{"_index":293,"title":{},"body":{"miscellaneous/functions.html":{}}}],["service.ts",{"_index":33,"title":{},"body":{"classes/BasicService.html":{},"coverage.html":{},"unit-test.html":{}}}],["service.ts:17",{"_index":54,"title":{},"body":{"classes/BasicService.html":{}}}],["service.ts:39",{"_index":65,"title":{},"body":{"classes/BasicService.html":{}}}],["service/basic",{"_index":32,"title":{},"body":{"classes/BasicService.html":{},"coverage.html":{},"unit-test.html":{}}}],["service/server",{"_index":216,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{},"unit-test.html":{}}}],["service/servers/express",{"_index":100,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{},"unit-test.html":{}}}],["service/src/basic",{"_index":380,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/api.ts",{"_index":388,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/controller.ts",{"_index":391,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/service.ts",{"_index":392,"title":{},"body":{"unit-test.html":{}}}],["service/src/interfaces/controller.ts",{"_index":393,"title":{},"body":{"unit-test.html":{}}}],["serviceconfig",{"_index":52,"title":{"interfaces/ServiceConfig.html":{}},"body":{"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["serviceconfig?.swaggerlocation",{"_index":83,"title":{},"body":{"classes/BasicService.html":{}}}],["shouldn't",{"_index":341,"title":{},"body":{"index.html":{}}}],["singleton",{"_index":74,"title":{},"body":{"classes/BasicService.html":{},"classes/ServerSingleton.html":{}}}],["singleton.ts",{"_index":233,"title":{},"body":{"classes/ServerSingleton.html":{},"coverage.html":{},"unit-test.html":{}}}],["singleton.ts:20",{"_index":237,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["specified",{"_index":245,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["src",{"_index":346,"title":{},"body":{"index.html":{}}}],["src/.../api.ts",{"_index":280,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../controller.ts",{"_index":278,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../service.ts",{"_index":281,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/basic",{"_index":31,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["src/decorators/api.ts",{"_index":261,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/decorators/controller.ts",{"_index":262,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/decorators/service.ts",{"_index":263,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/interfaces/api.ts",{"_index":6,"title":{},"body":{"interfaces/ApiConfig.html":{},"coverage.html":{}}}],["src/interfaces/controller.ts",{"_index":85,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/interfaces/server",{"_index":206,"title":{},"body":{"interfaces/ServerApplication.html":{},"coverage.html":{}}}],["src/interfaces/service",{"_index":239,"title":{},"body":{"interfaces/ServiceConfig.html":{},"coverage.html":{}}}],["start",{"_index":44,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["started",{"_index":299,"title":{"index.html":{}},"body":{}}],["statements",{"_index":255,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":219,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["string",{"_index":21,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["structure",{"_index":86,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["swagger",{"_index":134,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"dependencies.html":{}}}],["swagger.json",{"_index":153,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerlocation",{"_index":242,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["swaggeroptions",{"_index":201,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerui",{"_index":142,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerui.serve",{"_index":199,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerui.setup(undefined",{"_index":200,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["table",{"_index":268,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":267,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["test",{"_index":364,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{}}}],["tests",{"_index":368,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":339,"title":{},"body":{"index.html":{}}}],["this.addcontrollerhandlers(controller.name",{"_index":168,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app",{"_index":155,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerSingleton.html":{}}}],["this.app.listen(port",{"_index":158,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use",{"_index":198,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(express.json",{"_index":156,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(express.static(location",{"_index":197,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(middleware",{"_index":160,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(morgan('tiny",{"_index":157,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(router",{"_index":169,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.createrouterforcontroller(controller",{"_index":166,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controller.name",{"_index":161,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid",{"_index":173,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.handler",{"_index":193,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.handler?.indexof(controllerhandler",{"_index":194,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.handler?.push(controllerhandler",{"_index":196,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.instance",{"_index":177,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].router",{"_index":176,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.server",{"_index":78,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.server.listen(this.serviceconfig?.port",{"_index":84,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server.prepareswagger(serviceconfig?.docspath",{"_index":82,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server?.close",{"_index":159,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.serviceconfig",{"_index":77,"title":{},"body":{"classes/BasicService.html":{}}}],["this.serviceconfig?.swagger",{"_index":80,"title":{},"body":{"classes/BasicService.html":{}}}],["this[server_method[type",{"_index":232,"title":{},"body":{"classes/ServerFactory.html":{}}}],["throw",{"_index":162,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["trigger",{"_index":342,"title":{},"body":{"index.html":{}}}],["true",{"_index":250,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["tsoa",{"_index":274,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":18,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["type=server_type.express",{"_index":231,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["typescript",{"_index":361,"title":{},"body":{"index.html":{}}}],["ui",{"_index":143,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"dependencies.html":{}}}],["unique",{"_index":234,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["unit",{"_index":367,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{}}}],["updated",{"_index":338,"title":{},"body":{"index.html":{}}}],["url",{"_index":202,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["usage",{"_index":344,"title":{},"body":{"index.html":{}}}],["use",{"_index":37,"title":{},"body":{"classes/BasicService.html":{},"index.html":{}}}],["used",{"_index":291,"title":{},"body":{"miscellaneous/functions.html":{}}}],["useful",{"_index":358,"title":{},"body":{"index.html":{}}}],["value",{"_index":95,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"miscellaneous/enumerations.html":{}}}],["verb",{"_index":20,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["verbs",{"_index":93,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"miscellaneous/enumerations.html":{}}}],["version",{"_index":330,"title":{},"body":{"index.html":{},"properties.html":{}}}],["versioning",{"_index":310,"title":{},"body":{"index.html":{}}}],["versions",{"_index":317,"title":{},"body":{"index.html":{}}}],["void",{"_index":64,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["watch",{"_index":363,"title":{},"body":{"index.html":{}}}],["web",{"_index":244,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["yes",{"_index":59,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiConfig.html":{"url":"interfaces/ApiConfig.html","title":"interface - ApiConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/api.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresents the @API decorator's configuration object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         CONTROLLER_METHOD\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CONTROLLER_METHOD\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The verb of the API.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The path of the API\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CONTROLLER_METHOD } from './controller';\n\n/**\n * Rappresents the @API decorator's configuration object.\n * @property {CONTROLLER_METHOD} method\n * @property {string} path\n */\nexport interface ApiConfig {\n    /**\n     * The verb of the API.\n     */\n    method: CONTROLLER_METHOD;\n\n    /**\n     * The path of the API\n     */\n    path: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BasicService.html":{"url":"classes/BasicService.html","title":"class - BasicService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BasicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/basic-service.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresents the basic class to build a microservice. Just use this class or extend it to create a new service and execute the method run to start it.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(serviceConfig?: ServiceConfig)\n                    \n                \n                        \n                            \n                                Defined in src/basic-service/basic-service.ts:17\n                            \n                        \n\n                \n                    \n                            Creates a new BasicService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        serviceConfig\n                                                  \n                                                        \n                                                                        ServiceConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nThe service configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ServerApplication\n\n                    \n                \n                    \n                        \n                                Defined in src/basic-service/basic-service.ts:17\n                        \n                    \n\n            \n                \n                    The server application instance.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(callback?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/basic-service.ts:39\n                \n            \n\n\n            \n                \n                    Allow the service to start listen for requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \noptional callback on listen.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServiceConfig } from '../interfaces';\nimport { ServerApplication } from '../interfaces/server-application';\nimport { ServerSingleton } from './server-singleton';\n\n/**\n * Rappresents the basic class to build a microservice. Just use this class or extend it to create a new service and execute the method run to start it.\n */\nexport class BasicService{\n\n    private readonly serviceConfig: ServiceConfig;\n\n    /**\n     * The server application instance.\n     * @type {ServerApplication}\n     * @protected\n     */\n    protected readonly server: ServerApplication;\n\n    /**\n     * Creates a new BasicService.\n     * @param {ServiceConfig} [serviceConfig] - The service configuration.\n     */\n    public constructor(serviceConfig?: ServiceConfig) {\n        if (serviceConfig){\n            this.serviceConfig = serviceConfig;\n        }\n\n        this.server = ServerSingleton.getInstance();\n\n        if (this.serviceConfig?.swagger !== false){\n            this.server.prepareSwagger(serviceConfig?.docsPath, serviceConfig?.swaggerLocation);\n        }\n    }\n    /**\n     * Allow the service to start listen for requests.\n     *\n     * @param {() => void} [callback] - optional callback on listen.\n     */\n    public run(callback?: () => void): void {\n        this.server.listen(this.serviceConfig?.port, callback);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Controller.html":{"url":"interfaces/Controller.html","title":"interface - Controller","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Controller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/controller.ts\n        \n\n\n            \n                Description\n            \n            \n                The controller structure.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            handler\n                                        \n                                \n                                \n                                        \n                                            instance\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handler:         ControllerHandler[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ControllerHandler[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The handlers' list.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        instance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        instance:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The controller instance\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The controller name.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Controller {\n\n    /**\n     * The controller name.\n     */\n    name: string;\n\n    /**\n     * The controller instance\n     */\n    instance: any;\n\n    /**\n     * The handlers' list.\n     */\n    handler?: ControllerHandler[];\n}\n\n/**\n * Contains the available verbs for the service.\n * @enum {string}\n */\nexport enum CONTROLLER_METHOD {\n    /** @value get */\n    GET = 'get',\n    /** @value post */\n    POST = 'post',\n    /** @value put */\n    PUT = 'put',\n    /** @value delete */\n    DELETE = 'delete'\n}\n\n/**\n * The controller handler structure.\n *\n * @property {CONTROLLER_METHOD} method\n * @property {string} path\n * @property {string} handler\n */\nexport interface ControllerHandler {\n\n    /**\n     * The verb of the handler.\n     */\n    method: CONTROLLER_METHOD;\n\n    /**\n     * The path of the handler.\n     */\n    path: string;\n\n    /**\n     * The handler name.\n     */\n    handler: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ControllerHandler.html":{"url":"interfaces/ControllerHandler.html","title":"interface - ControllerHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ControllerHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/controller.ts\n        \n\n\n            \n                Description\n            \n            \n                The controller handler structure.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            handler\n                                        \n                                \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handler:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The handler name.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         CONTROLLER_METHOD\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CONTROLLER_METHOD\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The verb of the handler.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The path of the handler.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Controller {\n\n    /**\n     * The controller name.\n     */\n    name: string;\n\n    /**\n     * The controller instance\n     */\n    instance: any;\n\n    /**\n     * The handlers' list.\n     */\n    handler?: ControllerHandler[];\n}\n\n/**\n * Contains the available verbs for the service.\n * @enum {string}\n */\nexport enum CONTROLLER_METHOD {\n    /** @value get */\n    GET = 'get',\n    /** @value post */\n    POST = 'post',\n    /** @value put */\n    PUT = 'put',\n    /** @value delete */\n    DELETE = 'delete'\n}\n\n/**\n * The controller handler structure.\n *\n * @property {CONTROLLER_METHOD} method\n * @property {string} path\n * @property {string} handler\n */\nexport interface ControllerHandler {\n\n    /**\n     * The verb of the handler.\n     */\n    method: CONTROLLER_METHOD;\n\n    /**\n     * The path of the handler.\n     */\n    path: string;\n\n    /**\n     * The handler name.\n     */\n    handler: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressServer.html":{"url":"classes/ExpressServer.html","title":"class - ExpressServer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressServer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/servers/express-server.ts\n        \n\n\n            \n                Description\n            \n            \n                The Express server abstraction class.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ServerApplication\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addController\n                            \n                            \n                                    Public\n                                addControllerHandlers\n                            \n                            \n                                    Public\n                                addMiddleware\n                            \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                listen\n                            \n                            \n                                    Public\n                                prepareSwagger\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/basic-service/servers/express-server.ts:45\n                            \n                        \n\n                \n                    \n                            Creates a new ExpressServer.\n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addController\n                        \n                    \n                \n            \n            \n                \n                    \n                    addController(controller: Controller)\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/servers/express-server.ts:87\n                \n            \n\n\n            \n                \n                    Add API controller\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    controller\n                                    \n                                                Controller\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addControllerHandlers\n                        \n                    \n                \n            \n            \n                \n                    \n                    addControllerHandlers(controllerid: string, controllerHandlers: ControllerHandler | ControllerHandler[])\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/servers/express-server.ts:118\n                \n            \n\n\n            \n                \n                    Add one or more API controller handlers.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    controllerid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe controller id.\n\n\n                                    \n                                \n                                \n                                    controllerHandlers\n                                    \n                                                ControllerHandler | ControllerHandler[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addMiddleware\n                        \n                    \n                \n            \n            \n                \n                    \n                    addMiddleware(middleware: (args: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/servers/express-server.ts:78\n                \n            \n\n\n            \n                \n                    Add middleware to the server.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    middleware\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/servers/express-server.ts:69\n                \n            \n\n\n            \n                \n                    Close the server.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        listen\n                        \n                    \n                \n            \n            \n                \n                    \n                    listen(port?: string | number, callback?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/servers/express-server.ts:62\n                \n            \n\n\n            \n                \n                    Allow the server to start listen for requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe listen port of the server.\n\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe on listen callback.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        prepareSwagger\n                        \n                    \n                \n            \n            \n                \n                    \n                    prepareSwagger(path: string, location: string)\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/servers/express-server.ts:162\n                \n            \n\n\n            \n                \n                    Expose the swagger API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_SWAGGER_PATH\n                                    \n\n                                    \n                                        \nthe path of the swagger api.\n\n\n                                    \n                                \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_SWAGGER_LOCATION\n                                    \n\n                                    \n                                        \nthe direcotry of the swagger.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express, { Application, Router } from 'express';\nimport morgan from 'morgan';\nimport { Controller, ControllerHandler } from '../../interfaces/controller';\nimport { ServerApplication } from '../../interfaces/server-application';\nimport swaggerUi from 'swagger-ui-express';\nimport { Server } from 'http';\n\n/**\n * Router/Controller Dictionary\n *\n * @property {Router} router - the express Router\n * @property {Controller} controller\n */\ninterface RouterControllerMap {\n    [key: string]: {\n        router: Router;\n        controller: Controller;\n    }\n}\n\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_PATH = '/docs';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_LOCATION = 'swagger';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_URL = '/swagger.json';\n\n/**\n * The Express server abstraction class.\n *\n * @implements {ServerApplication}\n */\nexport class ExpressServer implements ServerApplication {\n\n    private readonly app: Application;\n\n    private server: Server;\n\n    private routerControllerMap: RouterControllerMap = {};\n\n    /**\n     * Creates a new ExpressServer.\n     */\n    public constructor() {\n        this.app = express();\n        this.app.use(express.json());\n        this.app.use(morgan('tiny'));\n    }\n\n    /**\n     * Allow the server to start listen for requests.\n     *\n     * @param {(string | number)} [port] - the listen port of the server.\n     * @param {Function} [callback] - the on listen callback.\n     */\n    public listen(port?: string | number, callback?: () => void): void {\n        this.server = this.app.listen(port, callback);\n    }\n\n    /**\n     * Close the server.\n     */\n    public close(): void {\n        this.server?.close();\n    }\n\n    /**\n     * Add middleware to the server.\n     *\n     * @param {Function} middleware\n     */\n    public addMiddleware(middleware: (...args: any) => void): void {\n        this.app.use(middleware);\n    }\n\n    /**\n     * Add API controller\n     *\n     * @param {Controller} controller\n     */\n    public addController(controller: Controller): void {\n        if (this.routerControllerMap[controller.name]) {\n            throw new Error('controller already presents');\n        }\n\n        const router = this.createRouterForController(controller);\n\n        if (controller.handler) {\n            this.addControllerHandlers(controller.name, controller.handler);\n        }\n\n        this.app.use(router);\n    }\n\n    private createRouterForController(controller: Controller): Router {\n        const router = express.Router();\n\n        this.routerControllerMap[controller.name] = {\n            router: router,\n            controller: controller\n        };\n\n        return router;\n    }\n\n    /**\n     * Add one or more API controller handlers.\n     *\n     * @param {string} controllerid - the controller id.\n     * @param {(ControllerHandler | ControllerHandler[])} controllerHandler - one or more handlers.\n     */\n    public addControllerHandlers(controllerid: string, controllerHandlers: ControllerHandler | ControllerHandler[]): void {\n        if (!this.routerControllerMap[controllerid]) {\n            throw new Error('controller not found');\n        }\n\n        if (!Array.isArray(controllerHandlers)){\n            controllerHandlers = [controllerHandlers];\n        }\n\n        const router = this.routerControllerMap[controllerid].router;\n        const controller = this.routerControllerMap[controllerid].controller.instance;\n\n        controllerHandlers.forEach((controllerHandler: ControllerHandler): void => {\n            const method = controllerHandler.method;\n            const path = controllerHandler.path;\n            const handler = controllerHandler.handler;\n\n            router[method](path, async(req: any, res: any) => {\n                console.log('Controller:', controller);\n\n                console.log('handler:', handler);\n\n                console.log('controller[handler]:', controller[handler]);\n                const response = await controller[handler](req);\n\n                return res.send(response);\n            });\n\n            if (!this.routerControllerMap[controllerid].controller.handler){\n                this.routerControllerMap[controllerid].controller.handler = [];\n            }\n\n            if (this.routerControllerMap[controllerid].controller.handler?.indexOf(controllerHandler) === -1){\n                this.routerControllerMap[controllerid].controller.handler?.push(controllerHandler);\n            }\n        });\n    }\n\n    /**\n     * Expose the swagger API.\n     *\n     * @param {string} [path] - the path of the swagger api.\n     * @param {string} [location] -  the direcotry of the swagger.\n     */\n    public prepareSwagger(path: string = DEFAULT_SWAGGER_PATH, location: string = DEFAULT_SWAGGER_LOCATION): void {\n        this.app.use(express.static(location));\n        this.app.use(\n            path,\n            swaggerUi.serve,\n            swaggerUi.setup(undefined, {\n                swaggerOptions: {\n                    url: DEFAULT_SWAGGER_URL,\n                }\n            })\n        );\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RouterControllerMap.html":{"url":"interfaces/RouterControllerMap.html","title":"interface - RouterControllerMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RouterControllerMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/servers/express-server.ts\n        \n\n\n            \n                Description\n            \n            \n                Router/Controller Dictionary\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/basic-service/servers/express-server.ts:14\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import express, { Application, Router } from 'express';\nimport morgan from 'morgan';\nimport { Controller, ControllerHandler } from '../../interfaces/controller';\nimport { ServerApplication } from '../../interfaces/server-application';\nimport swaggerUi from 'swagger-ui-express';\nimport { Server } from 'http';\n\n/**\n * Router/Controller Dictionary\n *\n * @property {Router} router - the express Router\n * @property {Controller} controller\n */\ninterface RouterControllerMap {\n    [key: string]: {\n        router: Router;\n        controller: Controller;\n    }\n}\n\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_PATH = '/docs';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_LOCATION = 'swagger';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_URL = '/swagger.json';\n\n/**\n * The Express server abstraction class.\n *\n * @implements {ServerApplication}\n */\nexport class ExpressServer implements ServerApplication {\n\n    private readonly app: Application;\n\n    private server: Server;\n\n    private routerControllerMap: RouterControllerMap = {};\n\n    /**\n     * Creates a new ExpressServer.\n     */\n    public constructor() {\n        this.app = express();\n        this.app.use(express.json());\n        this.app.use(morgan('tiny'));\n    }\n\n    /**\n     * Allow the server to start listen for requests.\n     *\n     * @param {(string | number)} [port] - the listen port of the server.\n     * @param {Function} [callback] - the on listen callback.\n     */\n    public listen(port?: string | number, callback?: () => void): void {\n        this.server = this.app.listen(port, callback);\n    }\n\n    /**\n     * Close the server.\n     */\n    public close(): void {\n        this.server?.close();\n    }\n\n    /**\n     * Add middleware to the server.\n     *\n     * @param {Function} middleware\n     */\n    public addMiddleware(middleware: (...args: any) => void): void {\n        this.app.use(middleware);\n    }\n\n    /**\n     * Add API controller\n     *\n     * @param {Controller} controller\n     */\n    public addController(controller: Controller): void {\n        if (this.routerControllerMap[controller.name]) {\n            throw new Error('controller already presents');\n        }\n\n        const router = this.createRouterForController(controller);\n\n        if (controller.handler) {\n            this.addControllerHandlers(controller.name, controller.handler);\n        }\n\n        this.app.use(router);\n    }\n\n    private createRouterForController(controller: Controller): Router {\n        const router = express.Router();\n\n        this.routerControllerMap[controller.name] = {\n            router: router,\n            controller: controller\n        };\n\n        return router;\n    }\n\n    /**\n     * Add one or more API controller handlers.\n     *\n     * @param {string} controllerid - the controller id.\n     * @param {(ControllerHandler | ControllerHandler[])} controllerHandler - one or more handlers.\n     */\n    public addControllerHandlers(controllerid: string, controllerHandlers: ControllerHandler | ControllerHandler[]): void {\n        if (!this.routerControllerMap[controllerid]) {\n            throw new Error('controller not found');\n        }\n\n        if (!Array.isArray(controllerHandlers)){\n            controllerHandlers = [controllerHandlers];\n        }\n\n        const router = this.routerControllerMap[controllerid].router;\n        const controller = this.routerControllerMap[controllerid].controller.instance;\n\n        controllerHandlers.forEach((controllerHandler: ControllerHandler): void => {\n            const method = controllerHandler.method;\n            const path = controllerHandler.path;\n            const handler = controllerHandler.handler;\n\n            router[method](path, async(req: any, res: any) => {\n                console.log('Controller:', controller);\n\n                console.log('handler:', handler);\n\n                console.log('controller[handler]:', controller[handler]);\n                const response = await controller[handler](req);\n\n                return res.send(response);\n            });\n\n            if (!this.routerControllerMap[controllerid].controller.handler){\n                this.routerControllerMap[controllerid].controller.handler = [];\n            }\n\n            if (this.routerControllerMap[controllerid].controller.handler?.indexOf(controllerHandler) === -1){\n                this.routerControllerMap[controllerid].controller.handler?.push(controllerHandler);\n            }\n        });\n    }\n\n    /**\n     * Expose the swagger API.\n     *\n     * @param {string} [path] - the path of the swagger api.\n     * @param {string} [location] -  the direcotry of the swagger.\n     */\n    public prepareSwagger(path: string = DEFAULT_SWAGGER_PATH, location: string = DEFAULT_SWAGGER_LOCATION): void {\n        this.app.use(express.static(location));\n        this.app.use(\n            path,\n            swaggerUi.serve,\n            swaggerUi.setup(undefined, {\n                swaggerOptions: {\n                    url: DEFAULT_SWAGGER_URL,\n                }\n            })\n        );\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServerApplication.html":{"url":"interfaces/ServerApplication.html","title":"interface - ServerApplication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServerApplication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/server-application.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresent the Server application.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addController\n                                    \n                                \n                                \n                                    \n                                        addControllerHandlers\n                                    \n                                \n                                \n                                    \n                                        addMiddleware\n                                    \n                                \n                                \n                                    \n                                        close\n                                    \n                                \n                                \n                                    \n                                        listen\n                                    \n                                \n                                \n                                    \n                                        prepareSwagger\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addController\n                        \n                    \n                \n            \n            \n                \naddController(controller: Controller)\n                \n            \n\n\n            \n                \n                    Defined in src/interfaces/server-application.ts:38\n                \n            \n\n\n            \n                \n                    Add API controller\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    controller\n                                    \n                                                Controller\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addControllerHandlers\n                        \n                    \n                \n            \n            \n                \naddControllerHandlers(controllerid: string, controllerHandler: ControllerHandler | ControllerHandler[])\n                \n            \n\n\n            \n                \n                    Defined in src/interfaces/server-application.ts:46\n                \n            \n\n\n            \n                \n                    Add one or more API controller handlers.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    controllerid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe controller id.\n\n\n                                    \n                                \n                                \n                                    controllerHandler\n                                    \n                                                ControllerHandler | ControllerHandler[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \none or more handlers.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addMiddleware\n                        \n                    \n                \n            \n            \n                \naddMiddleware(middleware: (args: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/interfaces/server-application.ts:31\n                \n            \n\n\n            \n                \n                    Add middleware to the server.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    middleware\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/interfaces/server-application.ts:24\n                \n            \n\n\n            \n                \n                    Close the server.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(port?: string | number, callback?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/interfaces/server-application.ts:19\n                \n            \n\n\n            \n                \n                    Allow the server to start listen for requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe listen port of the server.\n\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe on listen callback.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prepareSwagger\n                        \n                    \n                \n            \n            \n                \nprepareSwagger(path?: string, location?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/interfaces/server-application.ts:54\n                \n            \n\n\n            \n                \n                    Expose the swagger API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe path of the swagger api.\n\n\n                                    \n                                \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe direcotry of the swagger.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Controller, ControllerHandler } from './controller';\n\n/**\n * Rappresent the Server application.\n * @property {Function} listen - Allow the server to start listen for requests.\n * @property {Function} close - Close the server.\n * @property {Function} addMiddleware - Add middleware to the server.\n * @property {Function} addController - Add API controller.\n * @property {Function} addControllerHandlers - Add one or more API controller handlers.\n * @property {Function} prepareSwagger - Expose the swagger API.\n */\nexport interface ServerApplication {\n    /**\n     * Allow the server to start listen for requests.\n     *\n     * @param {(string | number)} [port] - the listen port of the server.\n     * @param {Function} [callback] - the on listen callback.\n     */\n    listen(port?: string | number, callback?: () => void): void;\n\n    /**\n     * Close the server.\n     */\n    close(): void;\n\n    /**\n     * Add middleware to the server.\n     *\n     * @param {Function} middleware\n     */\n    addMiddleware(middleware: (...args: any) => void): void\n\n    /**\n     * Add API controller\n     *\n     * @param {Controller} controller\n     */\n    addController(controller: Controller): void;\n\n    /**\n     * Add one or more API controller handlers.\n     *\n     * @param {string} controllerid - the controller id.\n     * @param {(ControllerHandler | ControllerHandler[])} controllerHandler - one or more handlers.\n     */\n    addControllerHandlers(controllerid: string, controllerHandler: ControllerHandler | ControllerHandler[]): void;\n\n    /**\n     * Expose the swagger API.\n     *\n     * @param {string} [path] - the path of the swagger api.\n     * @param {string} [location] -  the direcotry of the swagger.\n     */\n    prepareSwagger(path?: string, location?: string): void;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServerFactory.html":{"url":"classes/ServerFactory.html","title":"class - ServerFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServerFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/server-factory.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract static factory class to create a server application.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createServer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        createServer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createServer(type: SERVER_TYPE)\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/server-factory.ts:37\n                \n            \n\n\n            \n                \n                    Facotry method that allow to select application the server type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            SERVER_TYPE\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        SERVER_TYPE.EXPRESS\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ServerApplication\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServerApplication } from '../interfaces/server-application';\nimport { ExpressServer } from './servers/express-server';\n\n/**\n * @ignore\n */\nexport enum SERVER_TYPE {\n    /** @value EXPRESS */\n    EXPRESS = 'EXPRESS'\n}\n\n/**\n * @ignore\n */\nenum SERVER_METHOD {\n    EXPRESS = 'createExpressServer'\n}\n\n/**\n * Abstract static factory class to create a server application.\n *\n * @abstract\n */\nexport abstract class ServerFactory {\n\n    private static createExpressServer(): ServerApplication {\n        return new ExpressServer();\n    }\n\n    /**\n     * Facotry method that allow to select application the server type.\n     *\n     * @static\n     * @param {SERVER_TYPE} [type=SERVER_TYPE.EXPRESS]\n     * @return {ServerApplication}\n     */\n    public static createServer(type: SERVER_TYPE = SERVER_TYPE.EXPRESS): ServerApplication {\n        return this[SERVER_METHOD[type]]();\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServerSingleton.html":{"url":"classes/ServerSingleton.html","title":"class - ServerSingleton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServerSingleton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/server-singleton.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract static singleton class to create an unique server instance.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getInstance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance(type: SERVER_TYPE)\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/server-singleton.ts:20\n                \n            \n\n\n            \n                \n                    Singleton method that return the unique server application instance.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            SERVER_TYPE\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        SERVER_TYPE.EXPRESS\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ServerApplication\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServerApplication } from '../interfaces/server-application';\nimport { ServerFactory, SERVER_TYPE } from './server-factory';\n\n/**\n * Abstract static singleton class to create an unique server instance.\n *\n * @abstract\n */\nexport class ServerSingleton{\n\n    private static app: ServerApplication;\n\n    /**\n     * Singleton method that return the unique server application instance.\n     *\n     * @static\n     * @param {SERVER_TYPE} [type=SERVER_TYPE.EXPRESS]\n     * @return {ServerApplication}\n     */\n    public static getInstance(type: SERVER_TYPE = SERVER_TYPE.EXPRESS): ServerApplication{\n        if (!this.app){\n            this.app = ServerFactory.createServer(type);\n        }\n\n        return this.app;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServiceConfig.html":{"url":"interfaces/ServiceConfig.html","title":"interface - ServiceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServiceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/service-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresents the basic service configuration.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            docsPath\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            port\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            swagger\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            swaggerLocation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        docsPath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        docsPath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The path of the swagger api.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The listening port of the web server. if not specified the port is chosen randomically.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        swagger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        swagger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Allow to enable/disable the swagger api. Default: true.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        swaggerLocation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        swaggerLocation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The directory location of the swagger.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ServiceConfig {\n\n    /**\n     * The listening port of the web server. if not specified the port is chosen randomically.\n     */\n    port?: string | number;\n\n    /**\n     * The path of the swagger api.\n     */\n    docsPath?: string;\n\n    /**\n     * The directory location of the swagger.\n     */\n    swaggerLocation?: string;\n\n    /**\n     * Allow to enable/disable the swagger api. Default: true.\n     */\n    swagger?: boolean;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/basic-service/basic-service.ts\n            \n            class\n            BasicService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/basic-service/server-factory.ts\n            \n            class\n            ServerFactory\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/basic-service/server-singleton.ts\n            \n            class\n            ServerSingleton\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/basic-service/servers/express-server.ts\n            \n            class\n            ExpressServer\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/basic-service/servers/express-server.ts\n            \n            interface\n            RouterControllerMap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            API\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            DELETE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            GET\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            POST\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            PUT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/controller.ts\n            \n            function\n            Controller\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/service.ts\n            \n            function\n            Service\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/interfaces/api.ts\n            \n            interface\n            ApiConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/interfaces/controller.ts\n            \n            interface\n            Controller\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/interfaces/controller.ts\n            \n            interface\n            ControllerHandler\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/interfaces/server-application.ts\n            \n            interface\n            ServerApplication\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/interfaces/service-config.ts\n            \n            interface\n            ServiceConfig\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            express : ^4.18.2\n        \n            morgan : ^1.10.0\n        \n            swagger-ui-express : ^4.6.0\n        \n            tsoa : ^5.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CONTROLLER_METHOD   (src/.../controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/interfaces/controller.ts\n    \n        \n            \n                \n                    \n                        \n                        CONTROLLER_METHOD\n                    \n                \n                    \n                        \n                            Contains the available verbs for the service.\n\n                        \n                    \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : get\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : put\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API   (src/.../api.ts)\n                        \n                        \n                            Controller   (src/.../controller.ts)\n                        \n                        \n                            DELETE   (src/.../api.ts)\n                        \n                        \n                            GET   (src/.../api.ts)\n                        \n                        \n                            POST   (src/.../api.ts)\n                        \n                        \n                            PUT   (src/.../api.ts)\n                        \n                        \n                            Service   (src/.../service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators/api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API\n                        \n                    \n                \n            \n            \n                \nAPI(config: ApiConfig)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as an API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                ApiConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe configuration of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DELETE\n                        \n                    \n                \n            \n            \n                \nDELETE(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a DELETE API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GET\n                        \n                    \n                \n            \n            \n                \nGET(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a GET API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POST\n                        \n                    \n                \n            \n            \n                \nPOST(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a POST API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUT\n                        \n                    \n                \n            \n            \n                \nPUT(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a PUT API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/decorators/controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Controller\n                        \n                    \n                \n            \n            \n                \nController(name?: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a class as a controller.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe name of the controller. Will be used as router. If not provided will be used the name of the class.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/decorators/service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Service\n                        \n                    \n                \n            \n            \n                \nService(serviceConfig: ServiceConfig, run?)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a class as a service. The class must extens BasicService\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    serviceConfig\n                                    \n                                                ServiceConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe service configuration.\n\n\n                                    \n                                \n                                \n                                    run\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe listen callback. If provider the service will be instantiate automatically.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBasic Service\n\n\n\n\n\n\nThis is a basic service module to implement microservices.\nInstallation / Requirements\nNodejs >= 18\nnpm i @experiments72/basic-service\nSemantic Versioning & Commit Convention\nThis project follows semantic versioning.\nWe release patch versions for critical bugfixes, minor versions for new features or non-essential changes, and major\nversions for any breaking changes.\nThis project also follows the conventional commit convention with some\nadditional customization:\nPatch version changes\n\nrefactor(optional_scope) - indicates a code refactoring.\nchore(deps): indicates some dependency has been added / updated and therefore a new release is needed.\nno-release: indicates the commit shouldn't trigger a release no matter what.\n\nUsage\nService bootstrap\nCreate BasicService object and execute run method:\nimport { BasicService } from '../../src';\n\nconst pingService = new BasicService({port: 3000});\n\npingService.run(() => {\n    console.log('server listen on port 3000');\n});Create a controller\nCreate a class and use Controller and API decorators:\nimport { Controller, GET } from '../../src';\n\n@Controller('ping')\nexport class PingController{\n\n    @GET('/ping')\n    public ping(): string{\n        return 'pong';\n    }\n\n}Useful commands\n\nnpm run build   compile typescript to js\nnpm run watch   watch for changes and compile\nnpm run test    perform the jest unit tests\nnpm run lint    perform the eslint linter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                        /builds/experiments72/basic-service/src/basic-service/basic-service.ts\n            \n            \n                100 %\n                (8/8)\n            \n            \n                94 %\n                (17/18)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/basic-service/server-factory.ts\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (5/5)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/basic-service/server-singleton.ts\n            \n            \n                100 %\n                (5/5)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/basic-service/servers/express-server.ts\n            \n            \n                96 %\n                (43/45)\n            \n            \n                80 %\n                (16/20)\n            \n            \n                100 %\n                (10/10)\n            \n            \n                96 %\n                (43/45)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/api.ts\n            \n            \n                100 %\n                (15/15)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/controller.ts\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/service.ts\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/interfaces/controller.ts\n            \n            \n                100 %\n                (5/5)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
