var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiConfig.html",[0,0.394,1,1.64]],["body/interfaces/ApiConfig.html",[0,0.471,1,2.482,2,0.765,3,0.765,4,0.765,5,0.561,6,2.705,7,0.659,8,2.887,9,1.774,10,4.252,11,2.482,12,3.429,13,0.561,14,1.659,15,1.33,16,1.802,17,2.957,18,0.712,19,0.051,20,2.887,21,1.475,22,0.881,23,1.149,24,2.277,25,1.659,26,0.659,27,0.039,28,0.039]],["title/classes/BasicService.html",[29,0.394,30,1.249]],["body/classes/BasicService.html",[2,0.441,3,0.441,4,0.441,5,0.324,7,0.684,8,1.969,11,1.693,13,0.324,14,1.132,15,0.762,18,0.583,19,0.051,22,0.914,23,0.994,26,0.38,27,0.026,28,0.026,29,0.582,30,1.719,31,0.859,32,1.842,33,2.814,34,1.313,35,1.969,36,2.901,37,1.969,38,2.901,39,1.473,40,1.492,41,1.698,42,2.339,43,3.343,44,1.964,45,3.869,46,1.308,47,1.289,48,1.812,49,2.901,50,2.357,51,1.313,52,2.901,53,2.493,54,4.213,55,1.177,56,1.509,57,1.933,58,1.969,59,1.132,60,0.872,61,2.032,62,2.627,63,0.859,64,1.933,65,1.698,66,1.693,67,2.901,68,1.933,69,1.509,70,2.339,71,1.132,72,2.063,73,1.933,74,1.693,75,1.129,76,0.994,77,1.933,78,1.842,79,1.693,80,1.358,81,1.933,82,3.481,83,1.313,84,1.933,85,1.933,86,1.933,87,1.933,88,1.933,89,1.933,90,1.933,91,1.933,92,1.129,93,1.933,94,1.933,95,1.933,96,1.933,97,1.933,98,0.982,99,1.559,100,1.933,101,1.933]],["title/interfaces/Controller.html",[0,0.394,55,0.641]],["body/interfaces/Controller.html",[0,0.586,2,0.61,3,0.61,4,0.61,5,0.447,7,0.525,13,0.447,14,1.428,15,0.961,16,1.43,17,2.436,18,0.613,19,0.052,20,1.814,21,1.522,25,1.835,26,0.883,27,0.033,28,0.033,32,1.187,46,1.1,55,1.135,60,1.349,62,2.485,102,1.356,103,3.366,104,2.951,105,3.62,106,3.297,107,3.048,108,2.09,109,1.814,110,1.995,111,2.119,112,2.119,113,2.119,114,1.356,115,2.155,116,2.903,117,2.155]],["title/interfaces/ControllerHandler.html",[0,0.394,108,1.249]],["body/interfaces/ControllerHandler.html",[0,0.584,2,0.607,3,0.607,4,0.607,5,0.445,7,0.523,13,0.445,14,1.423,15,1.233,16,1.702,17,2.74,18,0.611,19,0.052,20,2.476,21,1.52,25,1.832,26,0.881,27,0.033,28,0.033,32,1.181,55,1.071,60,1.347,62,1.805,102,1.35,103,3.357,104,2.144,105,3.357,106,2.476,107,1.805,108,1.991,109,1.805,110,1.991,111,2.113,112,2.113,113,2.113,114,1.35,115,2.144,116,3.125,117,2.144]],["title/classes/ExpressServer.html",[29,0.394,118,1.427]],["body/classes/ExpressServer.html",[0,0.194,2,0.315,3,0.315,4,0.315,5,0.231,7,0.551,9,1.296,13,0.231,15,0.362,16,1.296,18,0.539,19,0.052,21,1.42,22,0.993,23,0.473,25,0.87,26,0.271,27,0.02,28,0.02,29,0.394,31,0.613,40,1.104,44,1.131,46,0.968,47,0.99,48,1.905,50,2.103,51,1.904,55,1.114,56,1.476,58,1.513,59,1.257,60,0.968,61,1.301,63,1.431,65,1.817,66,2.323,69,0.87,71,1.379,72,2.149,74,1.301,76,1.104,78,1.571,79,0.805,80,1.476,83,0.936,92,2.623,98,1.131,108,1.431,110,0.613,114,1.424,116,0.805,118,1.635,119,2.703,120,0.805,121,2.021,122,1.797,123,2.262,124,1.513,125,1.797,126,1.797,127,2.568,128,1.379,129,1.379,130,2.187,131,1.513,132,1.513,133,1.379,134,2.187,135,1.513,136,1.88,137,1.379,138,1.513,139,2.103,140,0.805,141,2.262,142,2.262,143,1.513,144,1.379,145,1.513,146,1.88,147,1.379,148,1.635,149,0.99,150,3.161,151,1.513,152,1.112,153,0.936,154,1.112,155,1.112,156,1.112,157,1.112,158,1.637,159,1.112,160,1.112,161,1.797,162,1.112,163,0.936,164,0.936,165,1.112,166,1.112,167,1.112,168,1.112,169,1.112,170,1.797,171,1.797,172,1.797,173,1.112,174,1.112,175,1.112,176,1.797,177,1.112,178,1.112,179,1.112,180,1.112,181,1.131,182,1.112,183,2.262,184,1.112,185,1.112,186,1.112,187,1.112,188,1.112,189,1.112,190,1.112,191,1.112,192,1.112,193,1.112,194,1.112,195,1.112,196,1.112,197,1.112,198,1.112,199,1.112,200,1.797,201,1.112,202,1.112,203,1.112,204,1.112,205,1.112,206,1.112,207,1.112,208,1.112,209,1.112]],["title/interfaces/RouterControllerMap.html",[0,0.394,158,1.64]],["body/interfaces/RouterControllerMap.html",[0,0.238,2,0.598,3,0.386,4,0.386,5,0.283,7,0.333,9,1.1,15,0.445,16,1.238,18,0.283,19,0.052,21,1.374,22,1.086,23,0.58,25,1.023,26,0.333,27,0.024,28,0.024,29,0.368,40,1.1,44,0.86,48,1.612,50,1.629,51,1.15,55,1.116,56,0.661,58,1.15,63,1.165,65,1.738,66,2.109,69,0.661,72,2.032,74,0.988,76,1.1,78,1.736,79,0.988,80,1.612,83,1.15,92,2.776,98,0.86,108,1.605,114,1.629,116,0.988,118,1.331,119,1.78,120,0.988,121,2.098,122,1.366,123,2.114,127,1.78,130,1.78,131,1.15,132,1.15,134,1.78,135,1.15,136,1.53,138,1.15,139,1.984,141,2.114,142,2.114,143,1.15,145,1.15,146,1.53,148,1.331,149,1.165,150,3.321,151,1.78,152,1.366,153,1.15,154,1.366,155,1.366,156,2.114,157,2.114,158,2.109,159,2.114,160,1.366,161,2.114,162,1.366,163,1.15,164,1.15,165,1.366,166,1.366,167,1.366,168,1.366,169,1.366,170,2.114,171,2.114,172,2.114,173,1.366,174,1.366,175,1.366,176,2.114,177,1.366,178,1.366,179,1.366,180,1.366,181,1.331,182,1.366,183,2.587,184,1.366,185,1.366,186,1.366,187,1.366,188,1.366,189,1.366,190,1.366,191,1.366,192,1.366,193,1.366,194,1.366,195,1.366,196,1.366,197,1.366,198,1.366,199,1.366,200,2.114,201,1.366,202,1.366,203,1.366,204,1.366,205,1.366,206,1.366,207,1.366,208,1.366,209,1.366,210,1.693,211,1.693,212,1.693]],["title/interfaces/ServerApplication.html",[0,0.394,76,0.963]],["body/interfaces/ServerApplication.html",[0,0.278,2,0.452,3,0.452,4,0.452,5,0.331,7,0.694,9,1.638,13,0.331,16,1.342,18,0.655,19,0.051,21,1.503,22,0.52,23,0.678,24,1.344,25,1.713,26,0.389,27,0.027,28,0.027,44,1.793,46,1.177,47,1.312,50,2.47,55,1.127,56,1.634,59,1.527,60,1.177,61,2.285,63,2.162,65,1.972,66,2.563,69,1.378,71,1.634,72,2.267,74,2.061,76,1.012,80,1.713,98,1.499,106,1.344,124,2.397,125,2.847,126,2.381,127,3.175,130,3.089,131,2.005,132,2.005,134,2.843,135,2.005,136,2.285,138,2.397,139,2.31,143,2.005,145,2.005,146,2.285,148,1.987,149,1.312,213,3.541,214,1.596,215,2.952,216,1.98,217,1.98,218,1.98,219,1.98,220,1.98,221,1.98,222,1.98,223,1.98,224,1.98]],["title/classes/ServerFactory.html",[29,0.394,225,1.64]],["body/classes/ServerFactory.html",[2,0.638,3,0.638,4,0.638,5,0.468,7,0.55,13,0.468,15,0.991,18,0.766,19,0.052,22,0.991,26,0.742,27,0.034,28,0.034,29,0.6,31,1.243,39,1.916,40,0.958,46,0.841,47,1.677,48,1.667,56,1.091,59,1.091,60,0.841,65,1.864,69,1.473,71,1.091,76,1.637,78,1.243,80,1.091,109,2.563,110,1.677,114,1.916,118,1.916,121,2.323,140,1.632,149,2.033,181,2.169,225,2.203,226,2.563,227,1.899,228,2.901,229,3.044,230,3.775,231,3.775,232,3.244,233,2.797,234,3.775,235,3.775,236,3.446,237,2.797,238,2.797,239,3.775,240,2.255,241,2.797]],["title/classes/ServerSingleton.html",[29,0.394,75,1.64]],["body/classes/ServerSingleton.html",[2,0.573,3,0.573,4,0.573,5,0.42,7,0.493,13,0.42,15,0.921,18,0.732,19,0.051,22,0.921,26,0.493,27,0.032,28,0.032,29,0.645,31,1.115,35,2.38,37,2.38,39,1.779,40,0.86,46,1.053,47,1.557,48,1.367,56,1.367,59,1.576,60,1.053,65,1.907,69,1.367,71,1.367,72,1.557,75,2.046,76,1.576,78,1.557,80,0.979,110,1.115,140,1.465,149,1.942,163,1.704,164,2.968,181,2.219,225,2.357,226,2.742,228,3.553,229,3.841,232,3.122,236,2.826,240,2.024,242,1.704,243,3.525,244,4.371,245,4.371,246,4.371,247,3.505,248,3.505,249,3.505,250,2.51,251,3.505,252,4.371,253,2.51,254,2.826,255,2.51,256,2.51]],["title/classes/ServiceComposer.html",[29,0.394,257,1.908]],["body/classes/ServiceComposer.html",[3,0.601,4,0.601,5,0.441,7,0.518,13,0.441,18,0.606,19,0.051,22,0.951,23,1.242,24,1.787,26,0.712,27,0.033,28,0.033,29,0.581,30,2.148,31,1.17,39,1.839,41,2.041,44,1.839,46,1.089,47,1.61,48,1.413,54,3.34,55,1.182,56,1.413,59,1.413,60,1.089,70,2.921,71,1.413,72,1.983,78,1.61,79,1.537,80,1.413,98,1.839,99,2.123,124,2.46,228,3.518,243,3.598,257,2.46,258,3.34,259,1.787,260,3.623,261,2.921,262,2.921,263,3.623,264,2.633,265,3.623,266,2.633,267,3.623,268,2.921,269,3.623,270,2.633,271,2.633,272,2.633,273,2.633,274,2.633]],["title/interfaces/ServiceConfig.html",[0,0.394,53,1.427]],["body/interfaces/ServiceConfig.html",[0,0.355,2,0.577,3,0.577,4,0.577,5,0.423,7,0.497,8,2.391,9,1.503,11,2.056,13,0.423,14,1.374,16,1.207,18,0.82,19,0.051,21,1.575,22,0.664,23,1.207,25,1.711,26,0.497,27,0.032,28,0.032,32,1.123,41,1.374,46,1.545,53,1.788,65,1.799,69,1.374,121,1.788,136,2.056,139,2.637,140,2.559,146,2.559,148,2.576,149,1.565,232,2.977,254,2.84,275,2.038,276,2.038,277,4.61,278,4.384,279,4.61,280,3.522,281,3.522,282,3.522,283,3.522,284,3.522,285,4.384,286,3.522,287,3.522,288,3.522]],["title/coverage.html",[289,2.571]],["body/coverage.html",[0,0.696,1,1.676,5,0.481,6,2.315,9,0.984,18,0.481,19,0.05,27,0.035,28,0.035,29,0.677,30,1.276,32,2.055,33,1.949,34,1.949,40,0.984,41,1.12,53,1.458,55,0.877,63,2.251,75,1.676,76,0.984,102,1.951,108,1.276,111,1.458,112,1.458,113,1.458,118,1.458,119,2.609,120,2.243,158,1.676,213,2.315,214,2.315,225,1.676,226,2.609,227,1.949,242,1.949,257,1.949,258,2.315,259,1.949,275,2.315,276,2.315,289,1.949,290,2.871,291,2.871,292,2.315,293,4.431,294,2.315,295,3.729,296,2.315,297,3.099,298,3.887,299,4.152,300,2.315,301,2.315,302,2.315,303,2.315,304,2.315,305,2.315]],["title/dependencies.html",[306,1.912,307,2.715]],["body/dependencies.html",[19,0.05,27,0.044,28,0.044,121,2.443,139,2.086,151,2.789,153,2.789,307,3.313,308,4.108,309,4.108,310,4.108,311,4.108,312,4.108]],["title/miscellaneous/enumerations.html",[313,1.384,314,2.715]],["body/miscellaneous/enumerations.html",[13,0.66,17,2.741,19,0.049,27,0.043,28,0.043,32,1.752,41,1.538,102,2.002,110,2.307,111,2.384,112,2.384,113,2.384,313,2.302,314,3.18,315,3.18,316,3.943,317,3.943,318,3.943]],["title/miscellaneous/functions.html",[313,1.384,319,2.286]],["body/miscellaneous/functions.html",[1,2.093,7,0.97,9,1.804,11,2.093,13,0.434,15,1.222,16,1.723,18,0.826,19,0.048,21,1.553,27,0.033,28,0.033,29,0.622,30,1.826,41,1.878,46,1.483,53,2.087,55,1.012,59,1.925,60,1.534,61,2.399,63,1.97,71,1.73,107,1.762,111,2.087,112,2.087,113,2.087,150,1.762,261,2.892,268,3.979,298,2.092,300,2.092,301,2.092,313,1.514,315,2.092,319,1.762,320,4.654,321,2.595,322,2.595,323,4.934,324,2.595,325,2.595,326,2.595,327,2.595,328,2.595,329,2.595,330,2.595,331,2.595,332,2.595]],["title/index.html",[13,0.397,333,2.371,334,2.371]],["body/index.html",[9,0.93,12,2.187,15,0.712,19,0.049,21,0.815,22,0.971,23,1.267,26,0.533,27,0.034,28,0.034,29,0.519,30,1.643,35,1.841,37,1.841,39,2.136,40,1.442,41,1.763,42,2.187,43,3.812,48,1.058,50,1.377,55,0.96,92,1.583,148,1.377,181,1.377,262,2.187,335,2.712,336,2.712,337,2.712,338,3.697,339,3.697,340,4.206,341,3.697,342,3.697,343,3.697,344,4.518,345,3.697,346,4.206,347,2.712,348,2.712,349,2.712,350,2.712,351,2.712,352,2.712,353,4.518,354,2.712,355,2.712,356,2.712,357,2.712,358,2.712,359,2.187,360,2.712,361,4.206,362,2.712,363,2.712,364,2.712,365,2.712,366,2.712,367,2.712,368,2.712,369,2.712,370,2.712,371,2.712,372,2.712,373,2.712,374,2.712,375,2.712,376,2.712,377,4.727,378,2.712,379,2.712,380,2.712,381,3.697,382,2.712,383,2.712,384,3.697,385,2.712,386,2.712,387,2.712,388,2.712,389,2.712,390,2.712,391,2.712,392,2.712,393,2.712,394,3.697,395,2.712,396,2.712,397,3.697,398,1.841,399,3.697,400,2.712,401,1.841,402,2.712,403,2.712,404,2.712,405,2.712]],["title/modules.html",[406,3.054]],["body/modules.html",[19,0.045,27,0.045,28,0.045,406,3.5]],["title/overview.html",[407,3.054]],["body/overview.html",[2,0.975,19,0.045,27,0.045,28,0.045,31,1.898,407,3.445,408,4.271,409,4.271]],["title/properties.html",[14,1.314,306,1.912]],["body/properties.html",[14,1.673,19,0.047,27,0.045,28,0.045,359,3.458,410,4.288]],["title/unit-test.html",[398,2.057,401,2.057]],["body/unit-test.html",[5,0.461,19,0.052,27,0.034,28,0.034,33,1.87,34,1.87,40,0.944,102,1.398,120,1.607,227,1.87,242,1.87,259,1.87,289,1.87,292,2.221,293,4.483,294,3.013,295,2.221,296,2.221,297,3.013,299,3.419,302,3.833,303,3.013,304,2.221,305,2.221,319,1.87,398,1.87,401,1.87,411,2.754,412,2.754,413,5.169,414,3.736,415,3.736,416,3.736,417,2.754,418,2.754,419,2.754,420,3.736,421,2.754,422,4.546,423,3.736,424,2.754,425,2.754,426,2.754,427,3.736,428,2.754,429,2.754,430,2.754,431,3.736,432,4.546,433,2.754,434,2.754,435,2.754,436,3.736,437,2.754,438,2.754,439,2.754]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"unit-test.html":{}}}],["0",{"_index":271,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["1",{"_index":202,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["1.0.3",{"_index":410,"title":{},"body":{"properties.html":{}}}],["1.10.0",{"_index":309,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":299,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["10/10",{"_index":439,"title":{},"body":{"unit-test.html":{}}}],["100",{"_index":293,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["13/24",{"_index":438,"title":{},"body":{"unit-test.html":{}}}],["15/15",{"_index":420,"title":{},"body":{"unit-test.html":{}}}],["18",{"_index":376,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":302,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["20/21",{"_index":416,"title":{},"body":{"unit-test.html":{}}}],["29/31",{"_index":418,"title":{},"body":{"unit-test.html":{}}}],["3/3",{"_index":295,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["3/4",{"_index":425,"title":{},"body":{"unit-test.html":{}}}],["3000",{"_index":384,"title":{},"body":{"index.html":{}}}],["37/42",{"_index":436,"title":{},"body":{"unit-test.html":{}}}],["4.18.2",{"_index":308,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":310,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":296,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["5",{"_index":408,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":312,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":294,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["54",{"_index":437,"title":{},"body":{"unit-test.html":{}}}],["6",{"_index":409,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":297,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["6/7",{"_index":434,"title":{},"body":{"unit-test.html":{}}}],["7/7",{"_index":303,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["7/8",{"_index":423,"title":{},"body":{"unit-test.html":{}}}],["75",{"_index":424,"title":{},"body":{"unit-test.html":{}}}],["8/8",{"_index":432,"title":{},"body":{"unit-test.html":{}}}],["86",{"_index":433,"title":{},"body":{"unit-test.html":{}}}],["88",{"_index":422,"title":{},"body":{"unit-test.html":{}}}],["9/10",{"_index":429,"title":{},"body":{"unit-test.html":{}}}],["9/9",{"_index":427,"title":{},"body":{"unit-test.html":{}}}],["90",{"_index":428,"title":{},"body":{"unit-test.html":{}}}],["94",{"_index":417,"title":{},"body":{"unit-test.html":{}}}],["95",{"_index":415,"title":{},"body":{"unit-test.html":{}}}],["abstract",{"_index":243,"title":{},"body":{"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{}}}],["abstraction",{"_index":122,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["actionname",{"_index":115,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["actionsdictionary",{"_index":105,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["add",{"_index":130,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["addcontroller",{"_index":124,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServiceComposer.html":{}}}],["addcontroller(controller",{"_index":98,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServiceComposer.html":{}}}],["addcontrollerhandlers",{"_index":221,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["addcontrollerhandlers(controllerid",{"_index":182,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["added",{"_index":366,"title":{},"body":{"index.html":{}}}],["additional",{"_index":357,"title":{},"body":{"index.html":{}}}],["addmiddleware",{"_index":125,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{}}}],["addmiddleware(middleware",{"_index":131,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["addswagger",{"_index":126,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{}}}],["addswagger(path",{"_index":135,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["allow",{"_index":69,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["already",{"_index":173,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["api",{"_index":9,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["api(config",{"_index":322,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apiconfig",{"_index":1,"title":{"interfaces/ApiConfig.html":{}},"body":{"interfaces/ApiConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["app",{"_index":163,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerSingleton.html":{}}}],["application",{"_index":149,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["application.ts",{"_index":214,"title":{},"body":{"interfaces/ServerApplication.html":{},"coverage.html":{}}}],["application.ts:19",{"_index":220,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:24",{"_index":219,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:31",{"_index":217,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:38",{"_index":216,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:46",{"_index":218,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["args",{"_index":132,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["array.isarray(controllerhandlers",{"_index":186,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["array.isarray(controllers",{"_index":94,"title":{},"body":{"classes/BasicService.html":{}}}],["async(req",{"_index":194,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["attach",{"_index":70,"title":{},"body":{"classes/BasicService.html":{},"classes/ServiceComposer.html":{}}}],["attachcontrollers",{"_index":49,"title":{},"body":{"classes/BasicService.html":{}}}],["attachcontrollers(controllers",{"_index":67,"title":{},"body":{"classes/BasicService.html":{}}}],["attachswaggertoserver",{"_index":87,"title":{},"body":{"classes/BasicService.html":{}}}],["available",{"_index":317,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["await",{"_index":197,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["basic",{"_index":23,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["basicservice",{"_index":30,"title":{"classes/BasicService.html":{}},"body":{"classes/BasicService.html":{},"classes/ServiceComposer.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["basicservice({port",{"_index":383,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":285,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["bootstrap",{"_index":380,"title":{},"body":{"index.html":{}}}],["branches",{"_index":411,"title":{},"body":{"unit-test.html":{}}}],["breaking",{"_index":355,"title":{},"body":{"index.html":{}}}],["bugfixes",{"_index":348,"title":{},"body":{"index.html":{}}}],["build",{"_index":35,"title":{},"body":{"classes/BasicService.html":{},"classes/ServerSingleton.html":{},"index.html":{}}}],["builder",{"_index":260,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["builds/experiments72/basic",{"_index":413,"title":{},"body":{"unit-test.html":{}}}],["callback",{"_index":66,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["changes",{"_index":353,"title":{},"body":{"index.html":{}}}],["chore(deps",{"_index":364,"title":{},"body":{"index.html":{}}}],["chosen",{"_index":283,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["class",{"_index":29,"title":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{}},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["classes",{"_index":31,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"overview.html":{}}}],["close",{"_index":127,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["code",{"_index":362,"title":{},"body":{"index.html":{}}}],["commands",{"_index":393,"title":{},"body":{"index.html":{}}}],["commit",{"_index":340,"title":{},"body":{"index.html":{}}}],["compile",{"_index":394,"title":{},"body":{"index.html":{}}}],["composer.ts",{"_index":259,"title":{},"body":{"classes/ServiceComposer.html":{},"coverage.html":{},"unit-test.html":{}}}],["composer.ts:21",{"_index":266,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["composer.ts:38",{"_index":264,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["config",{"_index":324,"title":{},"body":{"miscellaneous/functions.html":{}}}],["config.ts",{"_index":276,"title":{},"body":{"interfaces/ServiceConfig.html":{},"coverage.html":{}}}],["configuration",{"_index":11,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["configured",{"_index":267,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["console.log('server",{"_index":386,"title":{},"body":{"index.html":{}}}],["const",{"_index":92,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"index.html":{}}}],["constructor",{"_index":51,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["constructor(serviceconfig",{"_index":52,"title":{},"body":{"classes/BasicService.html":{}}}],["contains",{"_index":316,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["controller",{"_index":55,"title":{"interfaces/Controller.html":{}},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServiceComposer.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["controller('ping",{"_index":387,"title":{},"body":{"index.html":{}}}],["controller(id",{"_index":329,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controller.handlers",{"_index":176,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controller[handler]?.(req",{"_index":198,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controller_method",{"_index":17,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"miscellaneous/enumerations.html":{}}}],["controllerarray",{"_index":93,"title":{},"body":{"classes/BasicService.html":{}}}],["controllerarray?.foreach((controller",{"_index":95,"title":{},"body":{"classes/BasicService.html":{}}}],["controllerhandler",{"_index":108,"title":{"interfaces/ControllerHandler.html":{}},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{}}}],["controllerhandler.handler",{"_index":192,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandler.method",{"_index":190,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandler.path",{"_index":191,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandlers",{"_index":183,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandlers.foreach((controllerhandler",{"_index":189,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllers",{"_index":54,"title":{},"body":{"classes/BasicService.html":{},"classes/ServiceComposer.html":{}}}],["convention",{"_index":341,"title":{},"body":{"index.html":{}}}],["conventional",{"_index":356,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":289,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["create",{"_index":39,"title":{},"body":{"classes/BasicService.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"index.html":{}}}],["createexpressserver",{"_index":239,"title":{},"body":{"classes/ServerFactory.html":{}}}],["createrouterforcontroller(controller",{"_index":179,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["creates",{"_index":58,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["createserver",{"_index":230,"title":{},"body":{"classes/ServerFactory.html":{}}}],["createserver(type",{"_index":231,"title":{},"body":{"classes/ServerFactory.html":{}}}],["createservice",{"_index":263,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["createservice(service",{"_index":265,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["critical",{"_index":347,"title":{},"body":{"index.html":{}}}],["customization",{"_index":358,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":268,"title":{},"body":{"classes/ServiceComposer.html":{},"miscellaneous/functions.html":{}}}],["decorator's",{"_index":10,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["decorators",{"_index":262,"title":{},"body":{"classes/ServiceComposer.html":{},"index.html":{}}}],["default",{"_index":140,"title":{},"body":{"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["default_swagger_location",{"_index":142,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["default_swagger_path",{"_index":141,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["default_swagger_url",{"_index":161,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["defined",{"_index":56,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{}}}],["delete",{"_index":113,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["delete(path",{"_index":325,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dependencies",{"_index":307,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":365,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["dictionary",{"_index":157,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["direcotry",{"_index":143,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["directory",{"_index":288,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["docs",{"_index":160,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["docspath",{"_index":277,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["documentation",{"_index":290,"title":{},"body":{"coverage.html":{}}}],["enable/disable",{"_index":286,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["enum",{"_index":109,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ServerFactory.html":{}}}],["enumerations",{"_index":314,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error('controller",{"_index":172,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["eslint",{"_index":404,"title":{},"body":{"index.html":{}}}],["essential",{"_index":352,"title":{},"body":{"index.html":{}}}],["execute",{"_index":42,"title":{},"body":{"classes/BasicService.html":{},"index.html":{}}}],["experiments72/basic",{"_index":378,"title":{},"body":{"index.html":{}}}],["export",{"_index":26,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["expose",{"_index":138,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["express",{"_index":121,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"interfaces/ServiceConfig.html":{},"dependencies.html":{}}}],["express.router",{"_index":180,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["expressserver",{"_index":118,"title":{"classes/ExpressServer.html":{}},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"coverage.html":{}}}],["extend",{"_index":38,"title":{},"body":{"classes/BasicService.html":{}}}],["extends",{"_index":104,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["extens",{"_index":332,"title":{},"body":{"miscellaneous/functions.html":{}}}],["facotry",{"_index":234,"title":{},"body":{"classes/ServerFactory.html":{}}}],["factory",{"_index":229,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["factory.ts",{"_index":227,"title":{},"body":{"classes/ServerFactory.html":{},"coverage.html":{},"unit-test.html":{}}}],["factory.ts:35",{"_index":233,"title":{},"body":{"classes/ServerFactory.html":{}}}],["false",{"_index":89,"title":{},"body":{"classes/BasicService.html":{}}}],["features",{"_index":350,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"unit-test.html":{}}}],["follows",{"_index":343,"title":{},"body":{"index.html":{}}}],["found",{"_index":185,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["function",{"_index":63,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":319,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"unit-test.html":{}}}],["get('/ping",{"_index":389,"title":{},"body":{"index.html":{}}}],["get(path",{"_index":326,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getinstance",{"_index":247,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["getinstance(type",{"_index":249,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["getting",{"_index":333,"title":{"index.html":{}},"body":{}}],["handler",{"_index":116,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["handlers",{"_index":106,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/ServerApplication.html":{}}}],["http",{"_index":154,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["id",{"_index":107,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"miscellaneous/functions.html":{}}}],["identifier",{"_index":291,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":114,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{}}}],["implement",{"_index":336,"title":{},"body":{"index.html":{}}}],["implements",{"_index":123,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["import",{"_index":22,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indexable",{"_index":210,"title":{},"body":{"interfaces/RouterControllerMap.html":{}}}],["indicates",{"_index":361,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{}}}],["installation",{"_index":373,"title":{},"body":{"index.html":{}}}],["instance",{"_index":246,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"overview.html":{}}}],["jest",{"_index":400,"title":{},"body":{"index.html":{}}}],["js",{"_index":396,"title":{},"body":{"index.html":{}}}],["key",{"_index":159,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["keyof",{"_index":117,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["lines",{"_index":412,"title":{},"body":{"unit-test.html":{}}}],["lint",{"_index":403,"title":{},"body":{"index.html":{}}}],["linter",{"_index":405,"title":{},"body":{"index.html":{}}}],["list",{"_index":62,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["listen",{"_index":50,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"index.html":{}}}],["listen(port",{"_index":145,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["listening",{"_index":280,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["literal",{"_index":211,"title":{},"body":{"interfaces/RouterControllerMap.html":{}}}],["location",{"_index":136,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["major",{"_index":354,"title":{},"body":{"index.html":{}}}],["marks",{"_index":323,"title":{},"body":{"miscellaneous/functions.html":{}}}],["matching",{"_index":28,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"unit-test.html":{}}}],["matter",{"_index":372,"title":{},"body":{"index.html":{}}}],["method",{"_index":15,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["methods",{"_index":47,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{}}}],["microservice",{"_index":36,"title":{},"body":{"classes/BasicService.html":{}}}],["microservices",{"_index":337,"title":{},"body":{"index.html":{}}}],["middleware",{"_index":134,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["minor",{"_index":349,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":313,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["module",{"_index":335,"title":{},"body":{"index.html":{}}}],["modules",{"_index":406,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":223,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["morgan",{"_index":151,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"dependencies.html":{}}}],["name",{"_index":60,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"miscellaneous/functions.html":{}}}],["needed",{"_index":369,"title":{},"body":{"index.html":{}}}],["new",{"_index":40,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["nodejs",{"_index":375,"title":{},"body":{"index.html":{}}}],["non",{"_index":351,"title":{},"body":{"index.html":{}}}],["npm",{"_index":377,"title":{},"body":{"index.html":{}}}],["number",{"_index":146,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["object",{"_index":12,"title":{},"body":{"interfaces/ApiConfig.html":{},"index.html":{}}}],["one",{"_index":222,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["optional",{"_index":46,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["overview",{"_index":407,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":306,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":80,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{}}}],["parameters",{"_index":59,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"miscellaneous/functions.html":{}}}],["patch",{"_index":345,"title":{},"body":{"index.html":{}}}],["path",{"_index":16,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["perform",{"_index":399,"title":{},"body":{"index.html":{}}}],["ping",{"_index":390,"title":{},"body":{"index.html":{}}}],["pingcontroller",{"_index":388,"title":{},"body":{"index.html":{}}}],["pingservice",{"_index":382,"title":{},"body":{"index.html":{}}}],["pingservice.run",{"_index":385,"title":{},"body":{"index.html":{}}}],["pong",{"_index":391,"title":{},"body":{"index.html":{}}}],["port",{"_index":148,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["post",{"_index":111,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["post(path",{"_index":327,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prepareswagger",{"_index":224,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["presents",{"_index":174,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["private",{"_index":78,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{}}}],["project",{"_index":342,"title":{},"body":{"index.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/ServiceConfig.html":{},"properties.html":{}}}],["property",{"_index":25,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["protected",{"_index":45,"title":{},"body":{"classes/BasicService.html":{}}}],["provided",{"_index":330,"title":{},"body":{"miscellaneous/functions.html":{}}}],["public",{"_index":48,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"index.html":{}}}],["put",{"_index":112,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["put(path",{"_index":328,"title":{},"body":{"miscellaneous/functions.html":{}}}],["randomically",{"_index":284,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["rappresent",{"_index":215,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["rappresents",{"_index":8,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{}}}],["readonly",{"_index":79,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServiceComposer.html":{}}}],["refactor(optional_scope",{"_index":360,"title":{},"body":{"index.html":{}}}],["refactoring",{"_index":363,"title":{},"body":{"index.html":{}}}],["release",{"_index":344,"title":{},"body":{"index.html":{}}}],["requests",{"_index":74,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["requirements",{"_index":374,"title":{},"body":{"index.html":{}}}],["res",{"_index":195,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["res.send(response",{"_index":199,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["response",{"_index":196,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["results",{"_index":27,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"unit-test.html":{}}}],["return",{"_index":181,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"index.html":{}}}],["returns",{"_index":71,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"miscellaneous/functions.html":{}}}],["router",{"_index":150,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"miscellaneous/functions.html":{}}}],["router/controller",{"_index":156,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["router[method](path",{"_index":193,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["routercontrollermap",{"_index":158,"title":{"interfaces/RouterControllerMap.html":{}},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{}}}],["run",{"_index":43,"title":{},"body":{"classes/BasicService.html":{},"index.html":{}}}],["select",{"_index":235,"title":{},"body":{"classes/ServerFactory.html":{}}}],["semantic",{"_index":338,"title":{},"body":{"index.html":{}}}],["server",{"_index":65,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["server.ts",{"_index":120,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{},"unit-test.html":{}}}],["server.ts:15",{"_index":212,"title":{},"body":{"interfaces/RouterControllerMap.html":{}}}],["server.ts:152",{"_index":137,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:46",{"_index":128,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:63",{"_index":147,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:70",{"_index":144,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:79",{"_index":133,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:88",{"_index":129,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server/interfaces",{"_index":77,"title":{},"body":{"classes/BasicService.html":{}}}],["server_method",{"_index":238,"title":{},"body":{"classes/ServerFactory.html":{}}}],["server_type",{"_index":232,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["server_type.express",{"_index":236,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["serverapplication",{"_index":76,"title":{"interfaces/ServerApplication.html":{}},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["serverfactory",{"_index":225,"title":{"classes/ServerFactory.html":{}},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["servers/express",{"_index":237,"title":{},"body":{"classes/ServerFactory.html":{}}}],["serversingleton",{"_index":75,"title":{"classes/ServerSingleton.html":{}},"body":{"classes/BasicService.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["serversingleton.getinstance(serviceconfig?.servertype",{"_index":84,"title":{},"body":{"classes/BasicService.html":{}}}],["servertype",{"_index":278,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["service",{"_index":41,"title":{},"body":{"classes/BasicService.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["service(serviceconfig",{"_index":331,"title":{},"body":{"miscellaneous/functions.html":{}}}],["service.ts",{"_index":34,"title":{},"body":{"classes/BasicService.html":{},"coverage.html":{},"unit-test.html":{}}}],["service.ts:15",{"_index":64,"title":{},"body":{"classes/BasicService.html":{}}}],["service.ts:19",{"_index":57,"title":{},"body":{"classes/BasicService.html":{}}}],["service.ts:50",{"_index":68,"title":{},"body":{"classes/BasicService.html":{}}}],["service.ts:72",{"_index":73,"title":{},"body":{"classes/BasicService.html":{}}}],["service/basic",{"_index":33,"title":{},"body":{"classes/BasicService.html":{},"coverage.html":{},"unit-test.html":{}}}],["service/interfaces",{"_index":24,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ServerApplication.html":{},"classes/ServiceComposer.html":{}}}],["service/interfaces/controller",{"_index":155,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["service/interfaces/controller.ts",{"_index":102,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"unit-test.html":{}}}],["service/interfaces/service",{"_index":275,"title":{},"body":{"interfaces/ServiceConfig.html":{},"coverage.html":{}}}],["service/src/basic",{"_index":414,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/api.ts",{"_index":419,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/controller.ts",{"_index":421,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/service",{"_index":426,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/service.ts",{"_index":430,"title":{},"body":{"unit-test.html":{}}}],["service/src/server/server",{"_index":431,"title":{},"body":{"unit-test.html":{}}}],["service/src/server/servers/express",{"_index":435,"title":{},"body":{"unit-test.html":{}}}],["servicecomposer",{"_index":257,"title":{"classes/ServiceComposer.html":{}},"body":{"classes/ServiceComposer.html":{},"coverage.html":{}}}],["serviceconfig",{"_index":53,"title":{"interfaces/ServiceConfig.html":{}},"body":{"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":254,"title":{},"body":{"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["shouldn't",{"_index":370,"title":{},"body":{"index.html":{}}}],["singleton",{"_index":244,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["singleton.ts",{"_index":242,"title":{},"body":{"classes/ServerSingleton.html":{},"coverage.html":{},"unit-test.html":{}}}],["singleton.ts:19",{"_index":253,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["singleton.ts:32",{"_index":250,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{}}}],["specified",{"_index":282,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["src",{"_index":381,"title":{},"body":{"index.html":{}}}],["src/.../api.ts",{"_index":320,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../controller.ts",{"_index":315,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../service.ts",{"_index":321,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/basic",{"_index":32,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/decorators/api.ts",{"_index":298,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/decorators/controller.ts",{"_index":300,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/decorators/interfaces/api.ts",{"_index":6,"title":{},"body":{"interfaces/ApiConfig.html":{},"coverage.html":{}}}],["src/decorators/service",{"_index":258,"title":{},"body":{"classes/ServiceComposer.html":{},"coverage.html":{}}}],["src/decorators/service.ts",{"_index":301,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/server/interfaces/server",{"_index":213,"title":{},"body":{"interfaces/ServerApplication.html":{},"coverage.html":{}}}],["src/server/server",{"_index":226,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["src/server/servers/express",{"_index":119,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{}}}],["start",{"_index":44,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServiceComposer.html":{}}}],["started",{"_index":334,"title":{"index.html":{}},"body":{}}],["statements",{"_index":292,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":228,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{}}}],["string",{"_index":21,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["structure",{"_index":103,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["swagger",{"_index":139,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"dependencies.html":{}}}],["swagger.json",{"_index":162,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerlocation",{"_index":279,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["swaggeroptions",{"_index":208,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerui",{"_index":152,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerui.serve",{"_index":206,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerui.setup(undefined",{"_index":207,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["t",{"_index":252,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["table",{"_index":305,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":304,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["test",{"_index":398,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{}}}],["tests",{"_index":402,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":368,"title":{},"body":{"index.html":{}}}],["this.addcontroller(controller",{"_index":97,"title":{},"body":{"classes/BasicService.html":{}}}],["this.addcontrollerhandlers(controller.id",{"_index":177,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app",{"_index":164,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerSingleton.html":{}}}],["this.app.listen(port",{"_index":167,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use",{"_index":205,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(express.json",{"_index":165,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(express.static(location",{"_index":204,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(middleware",{"_index":169,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(morgan('tiny",{"_index":166,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(router",{"_index":178,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.attachcontrollers(this.controllers",{"_index":86,"title":{},"body":{"classes/BasicService.html":{}}}],["this.attachswaggertoserver",{"_index":85,"title":{},"body":{"classes/BasicService.html":{}}}],["this.controllers",{"_index":82,"title":{},"body":{"classes/BasicService.html":{}}}],["this.controllers.push(controller",{"_index":99,"title":{},"body":{"classes/BasicService.html":{},"classes/ServiceComposer.html":{}}}],["this.controllers?.length",{"_index":270,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["this.createrouterforcontroller(controller",{"_index":175,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.factory",{"_index":255,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["this.factory.createserver(type",{"_index":256,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["this.routercontrollermap[controller.id",{"_index":170,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid",{"_index":184,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller",{"_index":188,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.handlers",{"_index":200,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.handlers?.indexof(controllerhandler",{"_index":201,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.handlers?.push(controllerhandler",{"_index":203,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].router",{"_index":187,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.run",{"_index":101,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server",{"_index":83,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.server.addcontroller(controller",{"_index":96,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server.addswagger(this.serviceconfig?.docspath",{"_index":90,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server.listen(this.serviceconfig?.port",{"_index":100,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server?.close",{"_index":168,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.service",{"_index":269,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["this.service.attachcontrollers(this.controllers",{"_index":272,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["this.service.listen",{"_index":273,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["this.service?.attachcontrollers(controller",{"_index":274,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["this.serviceconfig",{"_index":81,"title":{},"body":{"classes/BasicService.html":{}}}],["this.serviceconfig?.swagger",{"_index":88,"title":{},"body":{"classes/BasicService.html":{}}}],["this.serviceconfig?.swaggerlocation",{"_index":91,"title":{},"body":{"classes/BasicService.html":{}}}],["this[server_method[type",{"_index":241,"title":{},"body":{"classes/ServerFactory.html":{}}}],["throw",{"_index":171,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["trigger",{"_index":371,"title":{},"body":{"index.html":{}}}],["true",{"_index":287,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["tsoa",{"_index":311,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":18,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["type=server_type.express",{"_index":240,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["typescript",{"_index":395,"title":{},"body":{"index.html":{}}}],["ui",{"_index":153,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"dependencies.html":{}}}],["unique",{"_index":245,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["unit",{"_index":401,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{}}}],["updated",{"_index":367,"title":{},"body":{"index.html":{}}}],["url",{"_index":209,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["usage",{"_index":379,"title":{},"body":{"index.html":{}}}],["use",{"_index":37,"title":{},"body":{"classes/BasicService.html":{},"classes/ServerSingleton.html":{},"index.html":{}}}],["used",{"_index":261,"title":{},"body":{"classes/ServiceComposer.html":{},"miscellaneous/functions.html":{}}}],["usefactory",{"_index":248,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["usefactory(factory",{"_index":251,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["useful",{"_index":392,"title":{},"body":{"index.html":{}}}],["value",{"_index":110,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"miscellaneous/enumerations.html":{}}}],["verb",{"_index":20,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["verbs",{"_index":318,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["version",{"_index":359,"title":{},"body":{"index.html":{},"properties.html":{}}}],["versioning",{"_index":339,"title":{},"body":{"index.html":{}}}],["versions",{"_index":346,"title":{},"body":{"index.html":{}}}],["void",{"_index":72,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{}}}],["watch",{"_index":397,"title":{},"body":{"index.html":{}}}],["web",{"_index":281,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["yes",{"_index":61,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiConfig.html":{"url":"interfaces/ApiConfig.html","title":"interface - ApiConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorators/interfaces/api.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresents the @API decorator's configuration object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         CONTROLLER_METHOD\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CONTROLLER_METHOD\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The verb of the API.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The path of the API\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CONTROLLER_METHOD } from '../../basic-service/interfaces';\n\n/**\n * Rappresents the @API decorator's configuration object.\n * @property {CONTROLLER_METHOD} method\n * @property {string} path\n */\nexport interface ApiConfig {\n    /**\n     * The verb of the API.\n     */\n    method: CONTROLLER_METHOD;\n\n    /**\n     * The path of the API\n     */\n    path: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BasicService.html":{"url":"classes/BasicService.html","title":"class - BasicService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BasicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/basic-service.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresents the basic class to build a microservice. Just use this class or extend it to create a new service and execute the method run to start it.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Optional\n                                run\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attachControllers\n                            \n                            \n                                    Public\n                                listen\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(serviceConfig?: ServiceConfig, controllers?: Controller[])\n                    \n                \n                        \n                            \n                                Defined in src/basic-service/basic-service.ts:19\n                            \n                        \n\n                \n                    \n                            Creates a new BasicService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        serviceConfig\n                                                  \n                                                        \n                                                                        ServiceConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nThe service configuration.\n\n\n                                                        \n                                                \n                                                \n                                                        controllers\n                                                  \n                                                        \n                                                                        Controller[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nThe list of controllers.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        run\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/basic-service/basic-service.ts:15\n                        \n                    \n\n            \n                \n                    Optional On Server Listen callback\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attachControllers\n                        \n                    \n                \n            \n            \n                \n                    \n                    attachControllers(controllers?: Controller | Controller[])\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/basic-service.ts:50\n                \n            \n\n\n            \n                \n                    Allow to attach new controllers to the server.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    controllers\n                                    \n                                                Controller | Controller[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe list of controllers.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        listen\n                        \n                    \n                \n            \n            \n                \n                    \n                    listen()\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/basic-service.ts:72\n                \n            \n\n\n            \n                \n                    Allow the service to start listen for requests.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServiceConfig, Controller } from './interfaces';\nimport { ServerSingleton } from '../server';\nimport { ServerApplication } from '../server/interfaces';\n\n/**\n * Rappresents the basic class to build a microservice. Just use this class or extend it to create a new service and execute the method run to start it.\n */\nexport class BasicService{\n\n    /**\n     * Optional On Server Listen callback\n     *\n     * @protected\n     */\n    protected run?: ()=> void;\n\n    private readonly server: ServerApplication;\n    private readonly serviceConfig?: ServiceConfig;\n    private controllers?: Controller[] = [];\n\n    /**\n     * Creates a new BasicService.\n     * @param {ServiceConfig} [serviceConfig] - The service configuration.\n     * @param {Controller[]} [controllers] - The list of controllers.\n     */\n    public constructor(serviceConfig?: ServiceConfig, controllers?: Controller[]) {\n        if (serviceConfig){\n            this.serviceConfig = serviceConfig;\n        }\n\n        if (controllers){\n            this.controllers = controllers;\n        }\n\n        this.server = ServerSingleton.getInstance(serviceConfig?.serverType);\n        this.attachSwaggerToServer();\n        this.attachControllers(this.controllers);\n    }\n\n    private attachSwaggerToServer(): void {\n        if (this.serviceConfig?.swagger !== false){\n            this.server.addSwagger(this.serviceConfig?.docsPath, this.serviceConfig?.swaggerLocation);\n        }\n    }\n\n    /**\n     * Allow to attach new controllers to the server.\n     * @param {Controller | Controller[]} [controllers] - The list of controllers.\n     */\n    public attachControllers(controllers?: Controller | Controller[]): void {\n        if (controllers){\n            const controllerArray = Array.isArray(controllers) ? controllers : [controllers];\n\n            controllerArray?.forEach((controller: Controller): void => {\n                this.server.addController(controller);\n                this.addController(controller);\n            });\n        }\n    }\n\n    private addController(controller: Controller): void {\n        if (!this.controllers){\n            this.controllers = [];\n        }\n\n        this.controllers.push(controller);\n    }\n\n    /**\n     * Allow the service to start listen for requests.\n     */\n    public listen(): void {\n        this.server.listen(this.serviceConfig?.port, this.run);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Controller.html":{"url":"interfaces/Controller.html","title":"interface - Controller","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Controller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/interfaces/controller.ts\n        \n\n\n            \n                Description\n            \n            \n                The controller structure.\n\n            \n\n            \n                Extends\n            \n            \n                    ActionsDictionary\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            handlers\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handlers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handlers:         ControllerHandler[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ControllerHandler[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The handlers' list.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The controller name.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export enum CONTROLLER_METHOD {\n    /** @value get */\n    GET = 'get',\n    /** @value post */\n    POST = 'post',\n    /** @value put */\n    PUT = 'put',\n    /** @value delete */\n    DELETE = 'delete'\n}\n\n/**\n * @ignore\n */\nexport interface ActionsDictionary {\n    [actionName: string]: any;\n}\n\n/**\n * The controller structure.\n *\n * @property {string} name\n * @property {ControllerHandler[]} [handler]\n */\nexport interface Controller extends ActionsDictionary{\n\n    /**\n     * The controller name.\n     */\n    id: string;\n\n    /**\n     * The handlers' list.\n     */\n    handlers?: ControllerHandler[];\n}\n\n/**\n * The controller handler structure.\n *\n * @property {CONTROLLER_METHOD} method\n * @property {string} path\n * @property {string} handler\n */\nexport interface ControllerHandler {\n\n    /**\n     * The verb of the handler.\n     */\n    method: CONTROLLER_METHOD;\n\n    /**\n     * The path of the handler.\n     */\n    path: string;\n\n    /**\n     * The handler name.\n     */\n    handler: keyof ActionsDictionary;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ControllerHandler.html":{"url":"interfaces/ControllerHandler.html","title":"interface - ControllerHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ControllerHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/interfaces/controller.ts\n        \n\n\n            \n                Description\n            \n            \n                The controller handler structure.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            handler\n                                        \n                                \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handler:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    The handler name.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         CONTROLLER_METHOD\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CONTROLLER_METHOD\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The verb of the handler.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The path of the handler.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export enum CONTROLLER_METHOD {\n    /** @value get */\n    GET = 'get',\n    /** @value post */\n    POST = 'post',\n    /** @value put */\n    PUT = 'put',\n    /** @value delete */\n    DELETE = 'delete'\n}\n\n/**\n * @ignore\n */\nexport interface ActionsDictionary {\n    [actionName: string]: any;\n}\n\n/**\n * The controller structure.\n *\n * @property {string} name\n * @property {ControllerHandler[]} [handler]\n */\nexport interface Controller extends ActionsDictionary{\n\n    /**\n     * The controller name.\n     */\n    id: string;\n\n    /**\n     * The handlers' list.\n     */\n    handlers?: ControllerHandler[];\n}\n\n/**\n * The controller handler structure.\n *\n * @property {CONTROLLER_METHOD} method\n * @property {string} path\n * @property {string} handler\n */\nexport interface ControllerHandler {\n\n    /**\n     * The verb of the handler.\n     */\n    method: CONTROLLER_METHOD;\n\n    /**\n     * The path of the handler.\n     */\n    path: string;\n\n    /**\n     * The handler name.\n     */\n    handler: keyof ActionsDictionary;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressServer.html":{"url":"classes/ExpressServer.html","title":"class - ExpressServer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressServer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/servers/express-server.ts\n        \n\n\n            \n                Description\n            \n            \n                The Express server abstraction class.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ServerApplication\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addController\n                            \n                            \n                                    Public\n                                addMiddleware\n                            \n                            \n                                    Public\n                                addSwagger\n                            \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                listen\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/server/servers/express-server.ts:46\n                            \n                        \n\n                \n                    \n                            Creates a new ExpressServer.\n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addController\n                        \n                    \n                \n            \n            \n                \n                    \n                    addController(controller: Controller)\n                \n            \n\n\n            \n                \n                    Defined in src/server/servers/express-server.ts:88\n                \n            \n\n\n            \n                \n                    Add API controller\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    controller\n                                    \n                                                Controller\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addMiddleware\n                        \n                    \n                \n            \n            \n                \n                    \n                    addMiddleware(middleware: (args: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/server/servers/express-server.ts:79\n                \n            \n\n\n            \n                \n                    Add middleware to the server.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    middleware\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addSwagger\n                        \n                    \n                \n            \n            \n                \n                    \n                    addSwagger(path: string, location: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/servers/express-server.ts:152\n                \n            \n\n\n            \n                \n                    Expose the swagger API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_SWAGGER_PATH\n                                    \n\n                                    \n                                        \nthe path of the swagger api.\n\n\n                                    \n                                \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_SWAGGER_LOCATION\n                                    \n\n                                    \n                                        \nthe direcotry of the swagger.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in src/server/servers/express-server.ts:70\n                \n            \n\n\n            \n                \n                    Close the server.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        listen\n                        \n                    \n                \n            \n            \n                \n                    \n                    listen(port?: string | number, callback?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/server/servers/express-server.ts:63\n                \n            \n\n\n            \n                \n                    Allow the server to start listen for requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe listen port of the server.\n\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe on listen callback.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express, { Application, Router } from 'express';\nimport morgan from 'morgan';\nimport swaggerUi from 'swagger-ui-express';\nimport { Server } from 'http';\n\nimport { ServerApplication } from '../interfaces';\nimport { Controller, ControllerHandler } from '../../basic-service/interfaces/controller';\n\n/**\n * Router/Controller Dictionary\n *\n * @property {Router} router - the express Router\n * @property {Controller} controller\n */\ninterface RouterControllerMap {\n    [key: string]: {\n        router: Router;\n        controller: Controller;\n    }\n}\n\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_PATH = '/docs';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_LOCATION = 'swagger';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_URL = '/swagger.json';\n\n/**\n * The Express server abstraction class.\n *\n * @implements {ServerApplication}\n */\nexport class ExpressServer implements ServerApplication {\n\n    private readonly app: Application;\n\n    private server: Server;\n\n    private routerControllerMap: RouterControllerMap = {};\n\n    /**\n     * Creates a new ExpressServer.\n     */\n    public constructor() {\n        this.app = express();\n        this.app.use(express.json());\n        this.app.use(morgan('tiny'));\n    }\n\n    /**\n     * Allow the server to start listen for requests.\n     *\n     * @param {(string | number)} [port] - the listen port of the server.\n     * @param {Function} [callback] - the on listen callback.\n     */\n    public listen(port?: string | number, callback?: () => void): void {\n        this.server = this.app.listen(port, callback);\n    }\n\n    /**\n     * Close the server.\n     */\n    public close(): void {\n        this.server?.close();\n    }\n\n    /**\n     * Add middleware to the server.\n     *\n     * @param {Function} middleware\n     */\n    public addMiddleware(middleware: (...args: any) => void): void {\n        this.app.use(middleware);\n    }\n\n    /**\n     * Add API controller\n     *\n     * @param {Controller} controller\n     */\n    public addController(controller: Controller): void {\n        if (this.routerControllerMap[controller.id]) {\n            throw new Error('controller already presents');\n        }\n\n        const router = this.createRouterForController(controller);\n\n        if (controller.handlers) {\n            this.addControllerHandlers(controller.id, controller.handlers);\n        }\n\n        this.app.use(router);\n    }\n\n    private createRouterForController(controller: Controller): Router {\n        const router = express.Router();\n\n        this.routerControllerMap[controller.id] = {\n            router: router,\n            controller: controller\n        };\n\n        return router;\n    }\n\n    private addControllerHandlers(controllerid: string, controllerHandlers: ControllerHandler | ControllerHandler[]): void {\n        if (!this.routerControllerMap[controllerid]) {\n            throw new Error('controller not found');\n        }\n\n        if (!Array.isArray(controllerHandlers)){\n            controllerHandlers = [controllerHandlers];\n        }\n\n        const router = this.routerControllerMap[controllerid].router;\n        const controller = this.routerControllerMap[controllerid].controller;\n\n        controllerHandlers.forEach((controllerHandler: ControllerHandler): void => {\n            const method = controllerHandler.method;\n            const path = controllerHandler.path;\n            const handler = controllerHandler.handler;\n\n            router[method](path, async(req: any, res: any) => {\n                const response = await controller[handler]?.(req);\n\n                return res.send(response);\n            });\n\n            if (!this.routerControllerMap[controllerid].controller.handlers){\n                this.routerControllerMap[controllerid].controller.handlers = [];\n            }\n\n            if (this.routerControllerMap[controllerid].controller.handlers?.indexOf(controllerHandler) === -1){\n                this.routerControllerMap[controllerid].controller.handlers?.push(controllerHandler);\n            }\n        });\n    }\n\n    /**\n     * Expose the swagger API.\n     *\n     * @param {string} [path] - the path of the swagger api.\n     * @param {string} [location] -  the direcotry of the swagger.\n     */\n    public addSwagger(path: string = DEFAULT_SWAGGER_PATH, location: string = DEFAULT_SWAGGER_LOCATION): void {\n        this.app.use(express.static(location));\n        this.app.use(\n            path,\n            swaggerUi.serve,\n            swaggerUi.setup(undefined, {\n                swaggerOptions: {\n                    url: DEFAULT_SWAGGER_URL,\n                }\n            })\n        );\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RouterControllerMap.html":{"url":"interfaces/RouterControllerMap.html","title":"interface - RouterControllerMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RouterControllerMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/servers/express-server.ts\n        \n\n\n            \n                Description\n            \n            \n                Router/Controller Dictionary\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/server/servers/express-server.ts:15\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import express, { Application, Router } from 'express';\nimport morgan from 'morgan';\nimport swaggerUi from 'swagger-ui-express';\nimport { Server } from 'http';\n\nimport { ServerApplication } from '../interfaces';\nimport { Controller, ControllerHandler } from '../../basic-service/interfaces/controller';\n\n/**\n * Router/Controller Dictionary\n *\n * @property {Router} router - the express Router\n * @property {Controller} controller\n */\ninterface RouterControllerMap {\n    [key: string]: {\n        router: Router;\n        controller: Controller;\n    }\n}\n\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_PATH = '/docs';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_LOCATION = 'swagger';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_URL = '/swagger.json';\n\n/**\n * The Express server abstraction class.\n *\n * @implements {ServerApplication}\n */\nexport class ExpressServer implements ServerApplication {\n\n    private readonly app: Application;\n\n    private server: Server;\n\n    private routerControllerMap: RouterControllerMap = {};\n\n    /**\n     * Creates a new ExpressServer.\n     */\n    public constructor() {\n        this.app = express();\n        this.app.use(express.json());\n        this.app.use(morgan('tiny'));\n    }\n\n    /**\n     * Allow the server to start listen for requests.\n     *\n     * @param {(string | number)} [port] - the listen port of the server.\n     * @param {Function} [callback] - the on listen callback.\n     */\n    public listen(port?: string | number, callback?: () => void): void {\n        this.server = this.app.listen(port, callback);\n    }\n\n    /**\n     * Close the server.\n     */\n    public close(): void {\n        this.server?.close();\n    }\n\n    /**\n     * Add middleware to the server.\n     *\n     * @param {Function} middleware\n     */\n    public addMiddleware(middleware: (...args: any) => void): void {\n        this.app.use(middleware);\n    }\n\n    /**\n     * Add API controller\n     *\n     * @param {Controller} controller\n     */\n    public addController(controller: Controller): void {\n        if (this.routerControllerMap[controller.id]) {\n            throw new Error('controller already presents');\n        }\n\n        const router = this.createRouterForController(controller);\n\n        if (controller.handlers) {\n            this.addControllerHandlers(controller.id, controller.handlers);\n        }\n\n        this.app.use(router);\n    }\n\n    private createRouterForController(controller: Controller): Router {\n        const router = express.Router();\n\n        this.routerControllerMap[controller.id] = {\n            router: router,\n            controller: controller\n        };\n\n        return router;\n    }\n\n    private addControllerHandlers(controllerid: string, controllerHandlers: ControllerHandler | ControllerHandler[]): void {\n        if (!this.routerControllerMap[controllerid]) {\n            throw new Error('controller not found');\n        }\n\n        if (!Array.isArray(controllerHandlers)){\n            controllerHandlers = [controllerHandlers];\n        }\n\n        const router = this.routerControllerMap[controllerid].router;\n        const controller = this.routerControllerMap[controllerid].controller;\n\n        controllerHandlers.forEach((controllerHandler: ControllerHandler): void => {\n            const method = controllerHandler.method;\n            const path = controllerHandler.path;\n            const handler = controllerHandler.handler;\n\n            router[method](path, async(req: any, res: any) => {\n                const response = await controller[handler]?.(req);\n\n                return res.send(response);\n            });\n\n            if (!this.routerControllerMap[controllerid].controller.handlers){\n                this.routerControllerMap[controllerid].controller.handlers = [];\n            }\n\n            if (this.routerControllerMap[controllerid].controller.handlers?.indexOf(controllerHandler) === -1){\n                this.routerControllerMap[controllerid].controller.handlers?.push(controllerHandler);\n            }\n        });\n    }\n\n    /**\n     * Expose the swagger API.\n     *\n     * @param {string} [path] - the path of the swagger api.\n     * @param {string} [location] -  the direcotry of the swagger.\n     */\n    public addSwagger(path: string = DEFAULT_SWAGGER_PATH, location: string = DEFAULT_SWAGGER_LOCATION): void {\n        this.app.use(express.static(location));\n        this.app.use(\n            path,\n            swaggerUi.serve,\n            swaggerUi.setup(undefined, {\n                swaggerOptions: {\n                    url: DEFAULT_SWAGGER_URL,\n                }\n            })\n        );\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServerApplication.html":{"url":"interfaces/ServerApplication.html","title":"interface - ServerApplication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServerApplication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/interfaces/server-application.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresent the Server application.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addController\n                                    \n                                \n                                \n                                    \n                                        addMiddleware\n                                    \n                                \n                                \n                                    \n                                        addSwagger\n                                    \n                                \n                                \n                                    \n                                        close\n                                    \n                                \n                                \n                                    \n                                        listen\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addController\n                        \n                    \n                \n            \n            \n                \naddController(controller: Controller)\n                \n            \n\n\n            \n                \n                    Defined in src/server/interfaces/server-application.ts:38\n                \n            \n\n\n            \n                \n                    Add API controller\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    controller\n                                    \n                                                Controller\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addMiddleware\n                        \n                    \n                \n            \n            \n                \naddMiddleware(middleware: (args: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/server/interfaces/server-application.ts:31\n                \n            \n\n\n            \n                \n                    Add middleware to the server.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    middleware\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addSwagger\n                        \n                    \n                \n            \n            \n                \naddSwagger(path?: string, location?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/interfaces/server-application.ts:46\n                \n            \n\n\n            \n                \n                    Expose the swagger API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe path of the swagger api.\n\n\n                                    \n                                \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe direcotry of the swagger.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/server/interfaces/server-application.ts:24\n                \n            \n\n\n            \n                \n                    Close the server.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(port?: string | number, callback?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/server/interfaces/server-application.ts:19\n                \n            \n\n\n            \n                \n                    Allow the server to start listen for requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe listen port of the server.\n\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe on listen callback.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Controller } from '../../basic-service/interfaces';\n\n/**\n * Rappresent the Server application.\n * @property {Function} listen - Allow the server to start listen for requests.\n * @property {Function} close - Close the server.\n * @property {Function} addMiddleware - Add middleware to the server.\n * @property {Function} addController - Add API controller.\n * @property {Function} addControllerHandlers - Add one or more API controller handlers.\n * @property {Function} prepareSwagger - Expose the swagger API.\n */\nexport interface ServerApplication {\n    /**\n     * Allow the server to start listen for requests.\n     *\n     * @param {(string | number)} [port] - the listen port of the server.\n     * @param {Function} [callback] - the on listen callback.\n     */\n    listen(port?: string | number, callback?: () => void): void;\n\n    /**\n     * Close the server.\n     */\n    close(): void;\n\n    /**\n     * Add middleware to the server.\n     *\n     * @param {Function} middleware\n     */\n    addMiddleware(middleware: (...args: any) => void): void\n\n    /**\n     * Add API controller\n     *\n     * @param {Controller} controller\n     */\n    addController(controller: Controller): void;\n\n    /**\n     * Expose the swagger API.\n     *\n     * @param {string} [path] - the path of the swagger api.\n     * @param {string} [location] -  the direcotry of the swagger.\n     */\n    addSwagger(path?: string, location?: string): void;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServerFactory.html":{"url":"classes/ServerFactory.html","title":"class - ServerFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServerFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/server-factory.ts\n        \n\n\n            \n                Description\n            \n            \n                Static factory class to create a server application.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createServer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createServer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createServer(type: SERVER_TYPE)\n                \n            \n\n\n            \n                \n                    Defined in src/server/server-factory.ts:35\n                \n            \n\n\n            \n                \n                    Facotry method that allow to select application the server type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            SERVER_TYPE\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        SERVER_TYPE.EXPRESS\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ServerApplication\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServerApplication } from './interfaces';\nimport { ExpressServer } from './servers/express-server';\n\n/**\n * @ignore\n */\nexport enum SERVER_TYPE {\n    /** @value EXPRESS */\n    EXPRESS = 'EXPRESS'\n}\n\n/**\n * @ignore\n */\nenum SERVER_METHOD {\n    EXPRESS = 'createExpressServer'\n}\n\n/**\n * Static factory class to create a server application.\n */\nexport class ServerFactory {\n\n    private createExpressServer(): ServerApplication {\n        return new ExpressServer();\n    }\n\n    /**\n     * Facotry method that allow to select application the server type.\n     *\n     * @static\n     * @param {SERVER_TYPE} [type=SERVER_TYPE.EXPRESS]\n     * @return {ServerApplication}\n     */\n    public createServer(type: SERVER_TYPE = SERVER_TYPE.EXPRESS): ServerApplication {\n        return this[SERVER_METHOD[type || SERVER_TYPE.EXPRESS]]();\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServerSingleton.html":{"url":"classes/ServerSingleton.html","title":"class - ServerSingleton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServerSingleton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/server-singleton.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract static singleton class to create an unique server instance.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                    Static\n                                useFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getInstance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance(type: SERVER_TYPE)\n                \n            \n\n\n            \n                \n                    Defined in src/server/server-singleton.ts:32\n                \n            \n\n\n            \n                \n                    Singleton method that return the unique server application instance.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            SERVER_TYPE\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        SERVER_TYPE.EXPRESS\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ServerApplication\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        useFactory\n                        \n                    \n                \n            \n            \n                \n                    \n                    useFactory(factory: T)\n                \n            \n\n\n            \n                \n                    Defined in src/server/server-singleton.ts:19\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Allow to set the factory class to use to build the server application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    factory\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServerApplication } from './interfaces';\nimport { ServerFactory, SERVER_TYPE } from './server-factory';\n\n/**\n * Abstract static singleton class to create an unique server instance.\n *\n * @abstract\n */\nexport abstract class ServerSingleton{\n\n    private static app: ServerApplication;\n    private static factory: ServerFactory = new ServerFactory();\n\n    /**\n     * Allow to set the factory class to use to build the server application.\n     *\n     * @static\n     */\n    public static useFactory(factory: T): void {\n        if (!this.app){\n            this.factory = factory;\n        }\n    }\n\n    /**\n     * Singleton method that return the unique server application instance.\n     *\n     * @static\n     * @param {SERVER_TYPE} [type=SERVER_TYPE.EXPRESS]\n     * @return {ServerApplication}\n     */\n    public static getInstance(type: SERVER_TYPE = SERVER_TYPE.EXPRESS): ServerApplication{\n        if (!this.app){\n            this.app = this.factory.createServer(type);\n        }\n\n        return this.app;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServiceComposer.html":{"url":"classes/ServiceComposer.html","title":"class - ServiceComposer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServiceComposer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorators/service-composer.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract service builder class used in decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                addController\n                            \n                            \n                                    Static\n                                createService\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        addController\n                        \n                    \n                \n            \n            \n                \n                    \n                    addController(controller: Controller)\n                \n            \n\n\n            \n                \n                    Defined in src/decorators/service-composer.ts:38\n                \n            \n\n\n            \n                \n                    Attach a controller to the service\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    controller\n                                    \n                                                Controller\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        createService\n                        \n                    \n                \n            \n            \n                \n                    \n                    createService(service: BasicService)\n                \n            \n\n\n            \n                \n                    Defined in src/decorators/service-composer.ts:21\n                \n            \n\n\n            \n                \n                    Create and start the service with controllers configured by decorator\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                                BasicService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BasicService } from '../basic-service';\nimport { Controller } from '../basic-service/interfaces';\n\n/**\n * Abstract service builder class used in decorators.\n *\n * @export\n * @abstract\n */\nexport abstract class ServiceComposer {\n\n    private static readonly controllers: Controller[] = [];\n    private static service: BasicService;\n\n    /**\n     * Create and start the service with controllers configured by decorator\n     *\n     * @static\n     * @param {BasicService} service\n     */\n    public static createService(service: BasicService): void {\n        if (!this.service){\n            this.service = service;\n            if (this.controllers?.length > 0){\n                this.service.attachControllers(this.controllers);\n            }\n\n            this.service.listen();\n        }\n    }\n\n    /**\n     * Attach a controller to the service\n     *\n     * @static\n     * @param {Controller} controller\n     */\n    public static addController(controller: Controller): void{\n        this.controllers.push(controller);\n        this.service?.attachControllers(controller);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServiceConfig.html":{"url":"interfaces/ServiceConfig.html","title":"interface - ServiceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServiceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/interfaces/service-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresents the basic service configuration.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            docsPath\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            port\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            serverType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            swagger\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            swaggerLocation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        docsPath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        docsPath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The path of the swagger api.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The listening port of the web server. if not specified the port is chosen randomically.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        serverType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        serverType:     SERVER_TYPE\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SERVER_TYPE\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the server application type. Default: EXPRESS\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        swagger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        swagger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Allow to enable/disable the swagger api. Default: true.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        swaggerLocation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        swaggerLocation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The directory location of the swagger.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { SERVER_TYPE } from '../../server';\n\n/**\n * Rappresents the basic service configuration.\n * @property {string | number} [port]\n * @property {string} [docsPath]\n * @property {string} [swaggerLocation]\n * @property {boolean} [swagger]\n */\nexport interface ServiceConfig {\n\n    /**\n     * The listening port of the web server. if not specified the port is chosen randomically.\n     */\n    port?: string | number;\n\n    /**\n     * The path of the swagger api.\n     */\n    docsPath?: string;\n\n    /**\n     * The directory location of the swagger.\n     */\n    swaggerLocation?: string;\n\n    /**\n     * Allow to enable/disable the swagger api. Default: true.\n     */\n    swagger?: boolean;\n\n    /**\n     * Set the server application type. Default: EXPRESS\n     */\n    serverType?: SERVER_TYPE\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/basic-service/basic-service.ts\n            \n            class\n            BasicService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/basic-service/interfaces/controller.ts\n            \n            interface\n            Controller\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/basic-service/interfaces/controller.ts\n            \n            interface\n            ControllerHandler\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/basic-service/interfaces/service-config.ts\n            \n            interface\n            ServiceConfig\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            API\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            DELETE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            GET\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            POST\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            PUT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/controller.ts\n            \n            function\n            Controller\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/interfaces/api.ts\n            \n            interface\n            ApiConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/decorators/service-composer.ts\n            \n            class\n            ServiceComposer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/decorators/service.ts\n            \n            function\n            Service\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/interfaces/server-application.ts\n            \n            interface\n            ServerApplication\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/server/server-factory.ts\n            \n            class\n            ServerFactory\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/server/server-singleton.ts\n            \n            class\n            ServerSingleton\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/server/servers/express-server.ts\n            \n            class\n            ExpressServer\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/server/servers/express-server.ts\n            \n            interface\n            RouterControllerMap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            express : ^4.18.2\n        \n            morgan : ^1.10.0\n        \n            swagger-ui-express : ^4.6.0\n        \n            tsoa : ^5.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CONTROLLER_METHOD   (src/.../controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/basic-service/interfaces/controller.ts\n    \n        \n            \n                \n                    \n                        \n                        CONTROLLER_METHOD\n                    \n                \n                    \n                        \n                            Contains the available verbs for the service.\n\n                        \n                    \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : get\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : put\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API   (src/.../api.ts)\n                        \n                        \n                            Controller   (src/.../controller.ts)\n                        \n                        \n                            DELETE   (src/.../api.ts)\n                        \n                        \n                            GET   (src/.../api.ts)\n                        \n                        \n                            POST   (src/.../api.ts)\n                        \n                        \n                            PUT   (src/.../api.ts)\n                        \n                        \n                            Service   (src/.../service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators/api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API\n                        \n                    \n                \n            \n            \n                \nAPI(config: ApiConfig)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as an API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                ApiConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe configuration of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DELETE\n                        \n                    \n                \n            \n            \n                \nDELETE(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a DELETE API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GET\n                        \n                    \n                \n            \n            \n                \nGET(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a GET API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POST\n                        \n                    \n                \n            \n            \n                \nPOST(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a POST API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUT\n                        \n                    \n                \n            \n            \n                \nPUT(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a PUT API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/decorators/controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Controller\n                        \n                    \n                \n            \n            \n                \nController(id?: string, service?: BasicService)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a class as a controller.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe name of the controller. Will be used as router. If not provided will be used the name of the class.\n\n\n                                    \n                                \n                                \n                                    service\n                                    \n                                                BasicService\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/decorators/service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Service\n                        \n                    \n                \n            \n            \n                \nService(serviceConfig?: ServiceConfig)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a class as a service. The class must extens BasicService\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    serviceConfig\n                                    \n                                                ServiceConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe service configuration.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBasic Service\n\n\n\n\n\nThis is a basic service module to implement microservices.\nSemantic Versioning & Commit Convention\nThis project follows semantic versioning.\nWe release patch versions for critical bugfixes, minor versions for new features or non-essential changes, and major\nversions for any breaking changes.\nThis project also follows the conventional commit convention with some\nadditional customization:\nPatch version changes\n\nrefactor(optional_scope) - indicates a code refactoring.\nchore(deps): indicates some dependency has been added / updated and therefore a new release is needed.\nno-release: indicates the commit shouldn't trigger a release no matter what.\n\nInstallation / Requirements\nNodejs >= 18\nnpm i @experiments72/basic-service\nUsage\nService bootstrap\nCreate BasicService object and execute run method:\nimport { BasicService } from '../../src';\n\nconst pingService = new BasicService({port: 3000});\n\npingService.run(() => {\n    console.log('server listen on port 3000');\n});Create a controller\nCreate a class and use Controller and API decorators:\nimport { Controller, GET } from '../../src';\n\n@Controller('ping')\nexport class PingController{\n\n    @GET('/ping')\n    public ping(): string{\n        return 'pong';\n    }\n\n}Useful commands\n\nnpm run build   compile typescript to js\nnpm run watch   watch for changes and compile\nnpm run test    perform the jest unit tests\nnpm run lint    perform the eslint linter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.3\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                        /builds/experiments72/basic-service/src/basic-service/basic-service.ts\n            \n            \n                95 %\n                (20/21)\n            \n            \n                94 %\n                (29/31)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                95 %\n                (20/21)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/basic-service/interfaces/controller.ts\n            \n            \n                100 %\n                (5/5)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/api.ts\n            \n            \n                100 %\n                (15/15)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/controller.ts\n            \n            \n                88 %\n                (7/8)\n            \n            \n                75 %\n                (3/4)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                88 %\n                (7/8)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/service-composer.ts\n            \n            \n                100 %\n                (9/9)\n            \n            \n                90 %\n                (9/10)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/service.ts\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/server/server-factory.ts\n            \n            \n                100 %\n                (8/8)\n            \n            \n                86 %\n                (6/7)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/server/server-singleton.ts\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/server/servers/express-server.ts\n            \n            \n                88 %\n                (37/42)\n            \n            \n                54 %\n                (13/24)\n            \n            \n                100 %\n                (10/10)\n            \n            \n                88 %\n                (37/42)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
