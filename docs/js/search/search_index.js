var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiConfig.html",[0,0.394,1,1.64]],["body/interfaces/ApiConfig.html",[0,0.464,1,2.46,2,0.65,3,0.755,4,0.755,5,0.554,6,2.668,7,0.755,8,2.862,9,1.767,10,4.215,11,2.46,12,3.399,13,0.554,14,1.445,15,1.325,16,1.796,17,2.944,18,0.706,19,0.051,20,2.862,21,1.283,22,0.869,23,1.291,24,2.246,25,1.645,26,0.65,27,0.038,28,0.038]],["title/classes/BasicController.html",[29,0.394,30,1.908]],["body/classes/BasicController.html",[2,0.679,3,0.788,4,0.788,5,0.578,13,0.578,14,1.484,18,0.725,19,0.049,21,1.138,22,0.907,26,0.679,27,0.04,28,0.04,29,0.485,30,2.941,31,1.535,32,1.846,33,3.213,34,2.345,35,2.941,36,1.08,37,2.034,38,3.044,39,2.762,40,2.762,41,1.846,42,1.69,43,3.454,44,3.454,45,2.785]],["title/classes/BasicService.html",[29,0.394,46,1.427]],["body/classes/BasicService.html",[2,0.422,3,0.49,4,0.49,5,0.359,7,0.715,8,2.128,11,1.83,13,0.359,14,1.074,15,0.823,18,0.525,19,0.051,22,1.069,23,1.445,24,1.458,26,0.422,27,0.029,28,0.029,29,0.608,31,0.954,32,1.588,36,1.065,37,1.689,38,2.161,42,1.445,46,2.067,47,2.764,48,1.458,49,2.128,50,3.135,51,2.128,52,3.135,53,1.83,54,1.395,55,2.009,56,2.528,57,3.492,58,2.376,59,4.071,60,1.484,61,1.591,62,2.43,63,1.458,64,3.135,65,2.552,66,4.882,67,2.147,68,2.128,69,0.954,70,0.736,71,1.83,72,2.128,73,0.954,74,2.147,75,1.588,76,1.83,77,2.147,78,1.223,79,1.83,80,0.954,81,2.295,82,1.253,83,1.074,84,2.147,85,2.198,86,1.393,87,2.147,88,2.147,89,1.458,90,2.147,91,2.147,92,2.147,93,2.147,94,2.147,95,2.147,96,2.147,97,2.147,98,2.147,99,2.147,100,2.147,101,2.147,102,2.147]],["title/interfaces/Controller.html",[0,0.394,36,0.641]],["body/interfaces/Controller.html",[0,0.579,2,0.514,3,0.596,4,0.596,5,0.438,7,0.596,13,0.438,14,1.236,15,0.947,16,1.414,17,2.409,18,0.604,19,0.052,20,1.775,21,1.323,25,1.821,26,0.874,27,0.033,28,0.033,32,1.02,36,1.128,39,2.816,40,2.596,41,1.821,60,1.236,70,1.524,72,2.448,103,1.327,104,3.328,105,2.907,106,3.587,107,1.775,108,1.977,109,2.095,110,2.095,111,2.095,112,1.327,113,2.108,114,2.886,115,2.108]],["title/interfaces/ControllerHandler.html",[0,0.394,41,1.096]],["body/interfaces/ControllerHandler.html",[0,0.578,2,0.511,3,0.593,4,0.593,5,0.435,7,0.593,13,0.435,14,1.231,15,1.223,16,1.692,17,2.719,18,0.601,19,0.052,20,2.439,21,1.321,25,1.817,26,0.873,27,0.033,28,0.033,32,1.015,36,1.063,39,2.097,40,1.518,41,1.732,70,1.521,72,1.766,103,1.32,104,3.319,105,2.097,106,3.319,107,1.766,108,1.972,109,2.089,110,2.089,111,2.089,112,1.32,113,2.097,114,3.115,115,2.097]],["title/classes/ExpressServer.html",[29,0.394,116,1.427]],["body/classes/ExpressServer.html",[0,0.186,2,0.261,3,0.303,4,0.303,5,0.222,7,0.624,9,1.274,13,0.222,15,0.349,16,1.274,18,0.528,19,0.052,21,1.229,22,0.976,23,0.518,25,0.844,26,0.261,27,0.02,28,0.02,29,0.384,31,0.59,35,1.856,36,1.106,37,1.89,38,0.775,41,1.229,42,1.45,54,1.08,58,1.262,60,1.08,61,1.098,62,2.074,63,1.856,68,1.468,69,1.4,70,1.08,71,1.262,73,1.4,75,1.799,76,2.288,78,0.844,79,1.262,80,1.541,81,2.435,83,1.08,85,1.761,86,1.652,89,0.902,108,0.59,112,1.388,114,0.775,116,1.6,117,2.661,118,0.775,119,1.99,120,1.744,121,1.744,122,1.744,123,1.744,124,2.524,125,1.329,126,1.468,127,1.329,128,2.139,129,1.468,130,1.468,131,1.329,132,2.139,133,1.468,134,1.839,135,1.329,136,1.468,137,2.074,138,0.775,139,2.205,140,2.205,141,1.468,142,1.329,143,1.468,144,1.839,145,1.329,146,1.6,147,0.961,148,3.13,149,1.468,150,1.071,151,0.902,152,1.071,153,1.071,154,1.071,155,1.071,156,1.596,157,1.071,158,3.017,159,1.071,160,1.744,161,1.071,162,0.902,163,0.902,164,1.071,165,1.071,166,1.071,167,1.071,168,1.071,169,1.744,170,1.744,171,1.744,172,1.071,173,1.071,174,1.071,175,1.744,176,1.071,177,1.071,178,1.071,179,1.071,180,1.098,181,1.071,182,2.205,183,1.071,184,1.071,185,1.071,186,1.071,187,1.071,188,1.071,189,1.071,190,1.071,191,1.071,192,1.071,193,1.071,194,1.071,195,1.071,196,1.071,197,1.071,198,1.071,199,1.744,200,1.071,201,1.071,202,1.071,203,1.071,204,1.071,205,1.071,206,1.071,207,1.071,208,1.071]],["title/interfaces/RouterControllerMap.html",[0,0.394,156,1.64]],["body/interfaces/RouterControllerMap.html",[0,0.23,2,0.502,3,0.374,4,0.374,5,0.274,7,0.374,9,1.076,15,0.43,16,1.216,18,0.274,19,0.052,21,1.189,22,1.071,23,0.639,25,0.997,26,0.322,27,0.023,28,0.023,29,0.358,35,1.734,36,1.108,37,1.59,38,0.956,41,1.384,42,0.639,54,1.076,58,0.956,62,1.594,63,1.112,68,1.112,73,1.135,75,1.718,76,2.071,78,0.639,79,0.956,81,2.298,83,1.076,85,1.953,86,1.811,89,1.112,112,1.594,114,0.956,116,1.297,117,1.734,118,0.956,119,2.069,120,1.32,124,1.734,126,1.112,128,1.734,129,1.112,130,1.112,132,1.734,133,1.112,134,1.491,136,1.112,137,1.953,139,2.06,140,2.06,141,1.112,143,1.112,144,1.491,146,1.297,147,1.135,148,3.296,149,1.734,150,1.32,151,1.112,152,1.32,153,1.32,154,2.06,155,2.06,156,2.071,157,2.06,158,3.201,159,1.32,160,2.06,161,1.32,162,1.112,163,1.112,164,1.32,165,1.32,166,1.32,167,1.32,168,1.32,169,2.06,170,2.06,171,2.06,172,1.32,173,1.32,174,1.32,175,2.06,176,1.32,177,1.32,178,1.32,179,1.32,180,1.297,181,1.32,182,2.533,183,1.32,184,1.32,185,1.32,186,1.32,187,1.32,188,1.32,189,1.32,190,1.32,191,1.32,192,1.32,193,1.32,194,1.32,195,1.32,196,1.32,197,1.32,198,1.32,199,2.06,200,1.32,201,1.32,202,1.32,203,1.32,204,1.32,205,1.32,206,1.32,207,1.32,208,1.32,209,1.637,210,1.637,211,1.637]],["title/interfaces/ServerApplication.html",[0,0.394,83,0.963]],["body/interfaces/ServerApplication.html",[0,0.27,2,0.378,3,0.438,4,0.438,5,0.322,7,0.791,9,1.625,13,0.322,16,1.322,18,0.646,19,0.051,21,1.305,22,0.504,23,0.749,24,1.304,25,1.694,26,0.378,27,0.026,28,0.026,36,1.119,39,1.121,42,1.613,58,2.024,60,1.322,61,1.465,62,2.452,69,1.714,70,1.322,71,2.251,73,2.146,75,1.96,76,2.535,78,1.353,79,2.024,80,1.837,81,2.575,83,0.989,86,1.93,121,2.797,122,2.797,123,2.328,124,3.146,126,1.96,128,3.058,129,1.96,130,1.96,132,2.807,133,1.96,134,2.251,136,2.354,137,2.287,141,1.96,143,1.96,144,2.251,146,1.958,147,1.283,212,3.502,213,1.549,214,2.887,215,1.921,216,1.921,217,1.921,218,1.921,219,1.921,220,1.921,221,1.921,222,1.921,223,1.921]],["title/classes/ServerFactory.html",[29,0.394,224,1.64]],["body/classes/ServerFactory.html",[2,0.539,3,0.625,4,0.625,5,0.459,7,0.625,13,0.459,15,0.978,18,0.76,19,0.052,22,0.978,26,0.732,27,0.034,28,0.034,29,0.594,31,1.218,37,1.65,42,1.069,53,2.173,54,0.939,60,0.939,61,1.89,69,1.218,70,0.939,75,1.851,78,1.453,80,1.218,83,1.626,85,1.391,86,1.218,107,2.528,108,1.655,112,1.89,116,1.89,119,2.303,138,1.6,147,2.016,180,2.147,224,2.173,225,2.528,226,1.861,227,3.41,228,3.003,229,3.723,230,3.723,231,3.221,232,2.74,233,3.723,234,3.723,235,3.41,236,2.74,237,2.74,238,3.723,239,2.21,240,2.74]],["title/classes/ServerSingleton.html",[29,0.394,82,1.64]],["body/classes/ServerSingleton.html",[2,0.482,3,0.559,4,0.559,5,0.41,7,0.559,13,0.41,15,0.905,18,0.724,19,0.051,22,0.905,26,0.482,27,0.031,28,0.031,29,0.64,31,1.089,37,1.345,42,1.345,45,3.488,49,2.34,51,2.34,53,2.012,54,0.84,60,1.181,61,1.75,69,1.772,70,1.181,75,1.895,78,1.345,80,1.532,81,1.75,82,2.012,83,1.562,85,1.75,86,1.089,108,1.089,138,1.431,147,1.922,162,1.664,163,2.937,180,2.196,224,2.327,225,2.707,227,4.203,228,3.812,231,3.095,235,2.78,239,1.977,241,1.664,242,4.326,243,4.326,244,4.326,245,3.447,246,3.447,247,3.447,248,2.451,249,3.447,250,4.326,251,2.451,252,2.78,253,2.451,254,2.451]],["title/interfaces/ServiceConfig.html",[0,0.394,65,1.427]],["body/interfaces/ServiceConfig.html",[0,0.346,2,0.485,3,0.563,4,0.563,5,0.413,7,0.563,8,2.352,9,1.487,11,2.022,13,0.413,14,1.187,16,1.187,18,0.815,19,0.051,21,1.371,22,0.648,23,1.352,25,1.693,26,0.485,27,0.032,28,0.032,32,0.963,55,1.539,60,1.753,65,1.759,75,1.783,78,1.352,119,1.759,134,2.022,137,2.625,138,2.533,144,2.533,146,2.563,147,1.539,231,2.946,252,2.794,255,1.991,256,1.991,257,4.57,258,4.339,259,4.57,260,3.464,261,3.464,262,3.464,263,3.464,264,3.464,265,4.339,266,3.464,267,3.464,268,3.464]],["title/coverage.html",[269,2.571]],["body/coverage.html",[0,0.692,1,1.639,5,0.47,6,2.265,9,0.962,18,0.47,19,0.05,27,0.035,28,0.035,29,0.671,30,1.907,32,1.867,33,1.907,34,1.907,36,0.864,41,1.096,46,1.426,47,1.907,48,1.907,54,0.962,55,1.248,65,1.426,73,2.239,82,1.639,83,0.962,103,1.922,109,1.426,110,1.426,111,1.426,116,1.426,117,2.57,118,2.21,156,1.639,212,2.265,213,2.265,224,1.639,225,2.57,226,1.907,241,1.907,255,2.265,256,2.265,269,1.907,270,2.808,271,2.808,272,2.265,273,2.808,274,2.808,275,4.405,276,3.453,277,3.053,278,3.053,279,3.858,280,4.131,281,2.265,282,2.265,283,2.265,284,2.808,285,2.265,286,2.265]],["title/dependencies.html",[287,1.912,288,2.715]],["body/dependencies.html",[19,0.05,27,0.044,28,0.044,119,2.437,137,2.077,149,2.777,151,2.777,288,3.299,289,4.09,290,4.09,291,4.09,292,4.09,293,4.09]],["title/miscellaneous/enumerations.html",[294,1.384,295,2.715]],["body/miscellaneous/enumerations.html",[13,0.656,17,2.731,19,0.049,27,0.043,28,0.043,32,1.529,55,1.741,103,1.989,108,2.303,109,2.375,110,2.375,111,2.375,294,2.287,295,3.159,296,3.159,297,3.918,298,3.918,299,3.918]],["title/miscellaneous/functions.html",[294,1.384,300,2.286]],["body/miscellaneous/functions.html",[1,2.082,7,1.123,9,1.801,11,2.082,13,0.431,15,1.219,16,1.72,18,0.824,19,0.048,21,1.355,27,0.033,28,0.033,29,0.62,36,1.008,40,1.503,46,1.307,55,1.964,60,1.687,65,2.078,69,2.188,70,1.746,71,1.503,73,1.964,80,1.964,109,2.078,110,2.078,111,2.078,148,1.748,279,2.076,281,2.076,282,2.076,294,1.503,296,2.076,300,1.748,301,4.641,302,2.575,303,2.575,304,4.923,305,4.923,306,2.575,307,2.575,308,2.575,309,2.575,310,2.575,311,2.575,312,3.567,313,2.575,314,2.575,315,2.575]],["title/index.html",[13,0.397,316,2.371,317,2.371]],["body/index.html",[9,0.91,12,2.141,15,0.697,19,0.049,21,0.697,22,0.957,23,1.422,26,0.522,27,0.033,28,0.033,29,0.511,36,0.949,37,1.036,46,1.85,49,1.802,51,1.802,53,2.428,54,1.426,55,1.99,56,2.141,57,3.784,62,1.348,146,1.348,158,1.802,180,1.348,318,2.655,319,2.655,320,2.655,321,3.644,322,3.644,323,4.16,324,3.644,325,3.644,326,3.644,327,4.477,328,3.644,329,4.16,330,2.655,331,2.655,332,2.655,333,2.655,334,2.655,335,2.655,336,4.477,337,2.655,338,2.655,339,2.655,340,2.655,341,2.655,342,2.141,343,2.655,344,4.16,345,2.655,346,2.655,347,2.655,348,2.655,349,2.655,350,2.655,351,2.655,352,2.655,353,2.655,354,2.655,355,2.655,356,2.655,357,2.655,358,2.655,359,2.655,360,4.692,361,2.655,362,2.655,363,2.655,364,3.644,365,2.655,366,2.655,367,3.644,368,2.655,369,2.655,370,2.655,371,2.655,372,2.655,373,2.655,374,2.655,375,2.655,376,2.655,377,2.655,378,3.644,379,2.655,380,2.655,381,3.644,382,1.802,383,3.644,384,2.655,385,1.802,386,2.655,387,2.655,388,2.655,389,2.655]],["title/modules.html",[390,3.054]],["body/modules.html",[19,0.045,27,0.045,28,0.045,390,3.495]],["title/overview.html",[391,3.054]],["body/overview.html",[2,0.838,19,0.045,27,0.045,28,0.045,31,1.894,391,3.436,392,4.261,393,4.261]],["title/properties.html",[14,1.154,287,1.912]],["body/properties.html",[14,1.466,19,0.047,27,0.045,28,0.045,342,3.451,394,4.279]],["title/unit-test.html",[382,2.057,385,2.057]],["body/unit-test.html",[5,0.45,19,0.051,27,0.034,28,0.034,33,1.826,34,1.826,47,1.826,48,1.826,54,0.922,103,1.366,118,1.57,226,1.826,241,1.826,269,1.826,272,2.169,275,4.513,276,2.169,277,2.169,278,3.378,280,3.631,283,3.801,285,2.169,286,2.169,300,1.826,382,1.826,385,1.826,395,2.69,396,2.69,397,5.144,398,4.188,399,4.188,400,4.714,401,4.502,402,2.69,403,2.69,404,2.69,405,2.69,406,2.69,407,3.676,408,4.502,409,2.69,410,2.69,411,2.69,412,3.676,413,3.676,414,2.69,415,2.69,416,2.69]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicController.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"unit-test.html":{}}}],["0",{"_index":273,"title":{},"body":{"coverage.html":{}}}],["0/0",{"_index":399,"title":{},"body":{"unit-test.html":{}}}],["0/3",{"_index":274,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":201,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["1.0.2",{"_index":394,"title":{},"body":{"properties.html":{}}}],["1.10.0",{"_index":290,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":280,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["10/10",{"_index":416,"title":{},"body":{"unit-test.html":{}}}],["100",{"_index":275,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["13/24",{"_index":415,"title":{},"body":{"unit-test.html":{}}}],["15/15",{"_index":401,"title":{},"body":{"unit-test.html":{}}}],["18",{"_index":359,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":283,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["25/27",{"_index":403,"title":{},"body":{"unit-test.html":{}}}],["3/3",{"_index":276,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["3000",{"_index":367,"title":{},"body":{"index.html":{}}}],["37/42",{"_index":413,"title":{},"body":{"unit-test.html":{}}}],["4.18.2",{"_index":289,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":291,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":277,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["5",{"_index":392,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":293,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":400,"title":{},"body":{"unit-test.html":{}}}],["54",{"_index":414,"title":{},"body":{"unit-test.html":{}}}],["6",{"_index":393,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":278,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["6/7",{"_index":410,"title":{},"body":{"unit-test.html":{}}}],["7/7",{"_index":284,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":408,"title":{},"body":{"unit-test.html":{}}}],["86",{"_index":409,"title":{},"body":{"unit-test.html":{}}}],["88",{"_index":412,"title":{},"body":{"unit-test.html":{}}}],["93",{"_index":402,"title":{},"body":{"unit-test.html":{}}}],["abstract",{"_index":45,"title":{},"body":{"classes/BasicController.html":{},"classes/ServerSingleton.html":{}}}],["abstraction",{"_index":120,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["actionname",{"_index":113,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["actionsdictionary",{"_index":106,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["add",{"_index":128,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["addcontroller",{"_index":121,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{}}}],["addcontroller(controller",{"_index":126,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["addcontrollerhandlers",{"_index":220,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["addcontrollerhandlers(controllerid",{"_index":181,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["added",{"_index":349,"title":{},"body":{"index.html":{}}}],["additional",{"_index":340,"title":{},"body":{"index.html":{}}}],["addmiddleware",{"_index":122,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{}}}],["addmiddleware(middleware",{"_index":129,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["addswagger",{"_index":123,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{}}}],["addswagger(path",{"_index":133,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["allow",{"_index":78,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["already",{"_index":172,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["api",{"_index":9,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["api(config",{"_index":303,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apiconfig",{"_index":1,"title":{"interfaces/ApiConfig.html":{}},"body":{"interfaces/ApiConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["app",{"_index":162,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerSingleton.html":{}}}],["application",{"_index":147,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["application.ts",{"_index":213,"title":{},"body":{"interfaces/ServerApplication.html":{},"coverage.html":{}}}],["application.ts:19",{"_index":219,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:24",{"_index":218,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:31",{"_index":216,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:38",{"_index":215,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:46",{"_index":217,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["args",{"_index":130,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["array.isarray(controllerhandlers",{"_index":185,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["async(req",{"_index":193,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["attachcontrollerstoserver",{"_index":98,"title":{},"body":{"classes/BasicService.html":{}}}],["attachswaggertoserver",{"_index":93,"title":{},"body":{"classes/BasicService.html":{}}}],["available",{"_index":298,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["await",{"_index":196,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["basic",{"_index":23,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["basiccontroller",{"_index":30,"title":{"classes/BasicController.html":{}},"body":{"classes/BasicController.html":{},"coverage.html":{}}}],["basicservice",{"_index":46,"title":{"classes/BasicService.html":{}},"body":{"classes/BasicService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["basicservice({port",{"_index":366,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":265,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["bootstrap",{"_index":363,"title":{},"body":{"index.html":{}}}],["branches",{"_index":395,"title":{},"body":{"unit-test.html":{}}}],["breaking",{"_index":338,"title":{},"body":{"index.html":{}}}],["bugfixes",{"_index":331,"title":{},"body":{"index.html":{}}}],["build",{"_index":49,"title":{},"body":{"classes/BasicService.html":{},"classes/ServerSingleton.html":{},"index.html":{}}}],["builds/experiments72/basic",{"_index":397,"title":{},"body":{"unit-test.html":{}}}],["callback",{"_index":76,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["changes",{"_index":336,"title":{},"body":{"index.html":{}}}],["chore(deps",{"_index":347,"title":{},"body":{"index.html":{}}}],["chosen",{"_index":263,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["class",{"_index":29,"title":{"classes/BasicController.html":{},"classes/BasicService.html":{},"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}},"body":{"classes/BasicController.html":{},"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["classes",{"_index":31,"title":{},"body":{"classes/BasicController.html":{},"classes/BasicService.html":{},"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"overview.html":{}}}],["close",{"_index":124,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["code",{"_index":345,"title":{},"body":{"index.html":{}}}],["commands",{"_index":377,"title":{},"body":{"index.html":{}}}],["commit",{"_index":323,"title":{},"body":{"index.html":{}}}],["compile",{"_index":378,"title":{},"body":{"index.html":{}}}],["config",{"_index":306,"title":{},"body":{"miscellaneous/functions.html":{}}}],["config.ts",{"_index":256,"title":{},"body":{"interfaces/ServiceConfig.html":{},"coverage.html":{}}}],["configuration",{"_index":11,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["console.log('server",{"_index":369,"title":{},"body":{"index.html":{}}}],["const",{"_index":158,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"index.html":{}}}],["constructor",{"_index":63,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["constructor(serviceconfig",{"_index":64,"title":{},"body":{"classes/BasicService.html":{}}}],["contains",{"_index":297,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["controller",{"_index":36,"title":{"interfaces/Controller.html":{}},"body":{"classes/BasicController.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["controller('ping",{"_index":371,"title":{},"body":{"index.html":{}}}],["controller(id",{"_index":311,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controller.handlers",{"_index":175,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controller.ts",{"_index":34,"title":{},"body":{"classes/BasicController.html":{},"coverage.html":{},"unit-test.html":{}}}],["controller.ts:5",{"_index":44,"title":{},"body":{"classes/BasicController.html":{}}}],["controller.ts:7",{"_index":43,"title":{},"body":{"classes/BasicController.html":{}}}],["controller/basic",{"_index":33,"title":{},"body":{"classes/BasicController.html":{},"coverage.html":{},"unit-test.html":{}}}],["controller/interfaces",{"_index":24,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/ServerApplication.html":{}}}],["controller/interfaces/controller",{"_index":153,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controller/interfaces/controller.ts",{"_index":103,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"unit-test.html":{}}}],["controller[handler]?.(req",{"_index":197,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controller_method",{"_index":17,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"miscellaneous/enumerations.html":{}}}],["controllerhandler",{"_index":41,"title":{"interfaces/ControllerHandler.html":{}},"body":{"classes/BasicController.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{}}}],["controllerhandler.handler",{"_index":191,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandler.method",{"_index":189,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandler.path",{"_index":190,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandlers",{"_index":182,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandlers.foreach((controllerhandler",{"_index":188,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllers",{"_index":66,"title":{},"body":{"classes/BasicService.html":{}}}],["convention",{"_index":324,"title":{},"body":{"index.html":{}}}],["conventional",{"_index":339,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":269,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["create",{"_index":53,"title":{},"body":{"classes/BasicService.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"index.html":{}}}],["createexpressserver",{"_index":238,"title":{},"body":{"classes/ServerFactory.html":{}}}],["createrouterforcontroller(controller",{"_index":178,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["creates",{"_index":68,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["createserver",{"_index":229,"title":{},"body":{"classes/ServerFactory.html":{}}}],["createserver(type",{"_index":230,"title":{},"body":{"classes/ServerFactory.html":{}}}],["critical",{"_index":330,"title":{},"body":{"index.html":{}}}],["customization",{"_index":341,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":304,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decorator's",{"_index":10,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["decorators",{"_index":370,"title":{},"body":{"index.html":{}}}],["default",{"_index":138,"title":{},"body":{"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["default_swagger_location",{"_index":140,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["default_swagger_path",{"_index":139,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["default_swagger_url",{"_index":160,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["defined",{"_index":42,"title":{},"body":{"classes/BasicController.html":{},"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["delete",{"_index":111,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["delete(path",{"_index":307,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dependencies",{"_index":288,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":348,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["dictionary",{"_index":155,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["direcotry",{"_index":141,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["directory",{"_index":268,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["docs",{"_index":159,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["docspath",{"_index":257,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["documentation",{"_index":270,"title":{},"body":{"coverage.html":{}}}],["enable/disable",{"_index":266,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["enum",{"_index":107,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ServerFactory.html":{}}}],["enumerations",{"_index":295,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error('controller",{"_index":171,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["eslint",{"_index":388,"title":{},"body":{"index.html":{}}}],["essential",{"_index":335,"title":{},"body":{"index.html":{}}}],["execute",{"_index":56,"title":{},"body":{"classes/BasicService.html":{},"index.html":{}}}],["experiments72/basic",{"_index":361,"title":{},"body":{"index.html":{}}}],["export",{"_index":26,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicController.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["expose",{"_index":136,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["express",{"_index":119,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"interfaces/ServiceConfig.html":{},"dependencies.html":{}}}],["express.router",{"_index":179,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["expressserver",{"_index":116,"title":{"classes/ExpressServer.html":{}},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"coverage.html":{}}}],["extend",{"_index":52,"title":{},"body":{"classes/BasicService.html":{}}}],["extends",{"_index":105,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["extens",{"_index":315,"title":{},"body":{"miscellaneous/functions.html":{}}}],["facotry",{"_index":233,"title":{},"body":{"classes/ServerFactory.html":{}}}],["factory",{"_index":228,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["factory.ts",{"_index":226,"title":{},"body":{"classes/ServerFactory.html":{},"coverage.html":{},"unit-test.html":{}}}],["factory.ts:35",{"_index":232,"title":{},"body":{"classes/ServerFactory.html":{}}}],["false",{"_index":95,"title":{},"body":{"classes/BasicService.html":{}}}],["features",{"_index":333,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicController.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"unit-test.html":{}}}],["follows",{"_index":326,"title":{},"body":{"index.html":{}}}],["found",{"_index":184,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["function",{"_index":73,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":300,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"unit-test.html":{}}}],["get('/ping",{"_index":373,"title":{},"body":{"index.html":{}}}],["get(path",{"_index":308,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getinstance",{"_index":245,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["getinstance(type",{"_index":247,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["getting",{"_index":316,"title":{"index.html":{}},"body":{}}],["handler",{"_index":114,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["handlers",{"_index":39,"title":{},"body":{"classes/BasicController.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/ServerApplication.html":{}}}],["http",{"_index":152,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["id",{"_index":40,"title":{},"body":{"classes/BasicController.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"miscellaneous/functions.html":{}}}],["identifier",{"_index":271,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":112,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{}}}],["implement",{"_index":319,"title":{},"body":{"index.html":{}}}],["implements",{"_index":35,"title":{},"body":{"classes/BasicController.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["import",{"_index":22,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicController.html":{},"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/ApiConfig.html":{},"classes/BasicController.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indexable",{"_index":209,"title":{},"body":{"interfaces/RouterControllerMap.html":{}}}],["indicates",{"_index":344,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicController.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["installation",{"_index":356,"title":{},"body":{"index.html":{}}}],["instance",{"_index":244,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicController.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"overview.html":{}}}],["jest",{"_index":384,"title":{},"body":{"index.html":{}}}],["js",{"_index":380,"title":{},"body":{"index.html":{}}}],["key",{"_index":157,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["keyof",{"_index":115,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["lines",{"_index":396,"title":{},"body":{"unit-test.html":{}}}],["lint",{"_index":387,"title":{},"body":{"index.html":{}}}],["linter",{"_index":389,"title":{},"body":{"index.html":{}}}],["list",{"_index":72,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["listen",{"_index":62,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"index.html":{}}}],["listen(port",{"_index":143,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["listening",{"_index":260,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["literal",{"_index":210,"title":{},"body":{"interfaces/RouterControllerMap.html":{}}}],["location",{"_index":134,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["major",{"_index":337,"title":{},"body":{"index.html":{}}}],["marks",{"_index":305,"title":{},"body":{"miscellaneous/functions.html":{}}}],["matching",{"_index":28,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicController.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"unit-test.html":{}}}],["matter",{"_index":355,"title":{},"body":{"index.html":{}}}],["method",{"_index":15,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["methods",{"_index":61,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["microservice",{"_index":50,"title":{},"body":{"classes/BasicService.html":{}}}],["microservices",{"_index":320,"title":{},"body":{"index.html":{}}}],["middleware",{"_index":132,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["minor",{"_index":332,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":294,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["module",{"_index":318,"title":{},"body":{"index.html":{}}}],["modules",{"_index":390,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":222,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["morgan",{"_index":149,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"dependencies.html":{}}}],["name",{"_index":70,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"miscellaneous/functions.html":{}}}],["needed",{"_index":352,"title":{},"body":{"index.html":{}}}],["new",{"_index":54,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["nodejs",{"_index":358,"title":{},"body":{"index.html":{}}}],["non",{"_index":334,"title":{},"body":{"index.html":{}}}],["npm",{"_index":360,"title":{},"body":{"index.html":{}}}],["number",{"_index":144,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["object",{"_index":12,"title":{},"body":{"interfaces/ApiConfig.html":{},"index.html":{}}}],["one",{"_index":221,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["optional",{"_index":60,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["overview",{"_index":391,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":287,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":86,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["parameters",{"_index":69,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"miscellaneous/functions.html":{}}}],["patch",{"_index":328,"title":{},"body":{"index.html":{}}}],["path",{"_index":16,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["perform",{"_index":383,"title":{},"body":{"index.html":{}}}],["ping",{"_index":374,"title":{},"body":{"index.html":{}}}],["pingcontroller",{"_index":372,"title":{},"body":{"index.html":{}}}],["pingservice",{"_index":365,"title":{},"body":{"index.html":{}}}],["pingservice.run",{"_index":368,"title":{},"body":{"index.html":{}}}],["pong",{"_index":375,"title":{},"body":{"index.html":{}}}],["port",{"_index":146,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["post",{"_index":109,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["post(path",{"_index":309,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prepareswagger",{"_index":223,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["presents",{"_index":173,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["private",{"_index":85,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["project",{"_index":325,"title":{},"body":{"index.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/ApiConfig.html":{},"classes/BasicController.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/ServiceConfig.html":{},"properties.html":{}}}],["property",{"_index":25,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["protected",{"_index":59,"title":{},"body":{"classes/BasicService.html":{}}}],["provided",{"_index":313,"title":{},"body":{"miscellaneous/functions.html":{}}}],["public",{"_index":37,"title":{},"body":{"classes/BasicController.html":{},"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"index.html":{}}}],["put",{"_index":110,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["put(path",{"_index":310,"title":{},"body":{"miscellaneous/functions.html":{}}}],["randomically",{"_index":264,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["rappresent",{"_index":214,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["rappresents",{"_index":8,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{}}}],["readonly",{"_index":38,"title":{},"body":{"classes/BasicController.html":{},"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["refactor(optional_scope",{"_index":343,"title":{},"body":{"index.html":{}}}],["refactoring",{"_index":346,"title":{},"body":{"index.html":{}}}],["release",{"_index":327,"title":{},"body":{"index.html":{}}}],["requests",{"_index":79,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["requirements",{"_index":357,"title":{},"body":{"index.html":{}}}],["res",{"_index":194,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["res.send(response",{"_index":198,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["response",{"_index":195,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["results",{"_index":27,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicController.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"unit-test.html":{}}}],["return",{"_index":180,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"index.html":{}}}],["returns",{"_index":80,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"miscellaneous/functions.html":{}}}],["router",{"_index":148,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"miscellaneous/functions.html":{}}}],["router/controller",{"_index":154,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["router[method](path",{"_index":192,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["routercontrollermap",{"_index":156,"title":{"interfaces/RouterControllerMap.html":{}},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{}}}],["run",{"_index":57,"title":{},"body":{"classes/BasicService.html":{},"index.html":{}}}],["select",{"_index":234,"title":{},"body":{"classes/ServerFactory.html":{}}}],["semantic",{"_index":321,"title":{},"body":{"index.html":{}}}],["server",{"_index":75,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["server.ts",{"_index":118,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{},"unit-test.html":{}}}],["server.ts:15",{"_index":211,"title":{},"body":{"interfaces/RouterControllerMap.html":{}}}],["server.ts:152",{"_index":135,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:46",{"_index":125,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:63",{"_index":145,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:70",{"_index":142,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:79",{"_index":131,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:88",{"_index":127,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server/interfaces",{"_index":84,"title":{},"body":{"classes/BasicService.html":{}}}],["server_method",{"_index":237,"title":{},"body":{"classes/ServerFactory.html":{}}}],["server_type",{"_index":231,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["server_type.express",{"_index":235,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["serverapplication",{"_index":83,"title":{"interfaces/ServerApplication.html":{}},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["serverfactory",{"_index":224,"title":{"classes/ServerFactory.html":{}},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["servers/express",{"_index":236,"title":{},"body":{"classes/ServerFactory.html":{}}}],["serversingleton",{"_index":82,"title":{"classes/ServerSingleton.html":{}},"body":{"classes/BasicService.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["serversingleton.getinstance(serviceconfig?.servertype",{"_index":90,"title":{},"body":{"classes/BasicService.html":{}}}],["servertype",{"_index":258,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["service",{"_index":55,"title":{},"body":{"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["service(serviceconfig",{"_index":314,"title":{},"body":{"miscellaneous/functions.html":{}}}],["service.ts",{"_index":48,"title":{},"body":{"classes/BasicService.html":{},"coverage.html":{},"unit-test.html":{}}}],["service.ts:16",{"_index":74,"title":{},"body":{"classes/BasicService.html":{}}}],["service.ts:20",{"_index":67,"title":{},"body":{"classes/BasicService.html":{}}}],["service.ts:56",{"_index":77,"title":{},"body":{"classes/BasicService.html":{}}}],["service/basic",{"_index":47,"title":{},"body":{"classes/BasicService.html":{},"coverage.html":{},"unit-test.html":{}}}],["service/interfaces/service",{"_index":255,"title":{},"body":{"interfaces/ServiceConfig.html":{},"coverage.html":{}}}],["service/src/basic",{"_index":398,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/api.ts",{"_index":404,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/controller.ts",{"_index":405,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/service.ts",{"_index":406,"title":{},"body":{"unit-test.html":{}}}],["service/src/server/server",{"_index":407,"title":{},"body":{"unit-test.html":{}}}],["service/src/server/servers/express",{"_index":411,"title":{},"body":{"unit-test.html":{}}}],["serviceconfig",{"_index":65,"title":{"interfaces/ServiceConfig.html":{}},"body":{"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":252,"title":{},"body":{"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["shouldn't",{"_index":353,"title":{},"body":{"index.html":{}}}],["singleton",{"_index":242,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["singleton.ts",{"_index":241,"title":{},"body":{"classes/ServerSingleton.html":{},"coverage.html":{},"unit-test.html":{}}}],["singleton.ts:19",{"_index":251,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["singleton.ts:32",{"_index":248,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicController.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["specified",{"_index":262,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["src",{"_index":364,"title":{},"body":{"index.html":{}}}],["src/.../api.ts",{"_index":301,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../controller.ts",{"_index":296,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../service.ts",{"_index":302,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/basic",{"_index":32,"title":{},"body":{"classes/BasicController.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/decorators/api.ts",{"_index":279,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/decorators/controller.ts",{"_index":281,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/decorators/interfaces/api.ts",{"_index":6,"title":{},"body":{"interfaces/ApiConfig.html":{},"coverage.html":{}}}],["src/decorators/service.ts",{"_index":282,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/server/interfaces/server",{"_index":212,"title":{},"body":{"interfaces/ServerApplication.html":{},"coverage.html":{}}}],["src/server/server",{"_index":225,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["src/server/servers/express",{"_index":117,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{}}}],["start",{"_index":58,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["started",{"_index":317,"title":{"index.html":{}},"body":{}}],["statements",{"_index":272,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":227,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["string",{"_index":21,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicController.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["structure",{"_index":104,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["swagger",{"_index":137,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"dependencies.html":{}}}],["swagger.json",{"_index":161,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerlocation",{"_index":259,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["swaggeroptions",{"_index":207,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerui",{"_index":150,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerui.serve",{"_index":205,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerui.setup(undefined",{"_index":206,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["t",{"_index":250,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["table",{"_index":286,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":285,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["test",{"_index":382,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{}}}],["tests",{"_index":386,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":351,"title":{},"body":{"index.html":{}}}],["this.addcontrollerhandlers(controller.id",{"_index":176,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app",{"_index":163,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerSingleton.html":{}}}],["this.app.listen(port",{"_index":166,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use",{"_index":204,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(express.json",{"_index":164,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(express.static(location",{"_index":203,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(middleware",{"_index":168,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(morgan('tiny",{"_index":165,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(router",{"_index":177,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.attachcontrollerstoserver",{"_index":92,"title":{},"body":{"classes/BasicService.html":{}}}],["this.attachswaggertoserver",{"_index":91,"title":{},"body":{"classes/BasicService.html":{}}}],["this.controllers",{"_index":88,"title":{},"body":{"classes/BasicService.html":{}}}],["this.controllers?.foreach((controller",{"_index":99,"title":{},"body":{"classes/BasicService.html":{}}}],["this.createrouterforcontroller(controller",{"_index":174,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.factory",{"_index":253,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["this.factory.createserver(type",{"_index":254,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["this.routercontrollermap[controller.id",{"_index":169,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid",{"_index":183,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller",{"_index":187,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.handlers",{"_index":199,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.handlers?.indexof(controllerhandler",{"_index":200,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.handlers?.push(controllerhandler",{"_index":202,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].router",{"_index":186,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.run",{"_index":102,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server",{"_index":89,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.server.addcontroller(controller",{"_index":100,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server.addswagger(this.serviceconfig?.docspath",{"_index":96,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server.listen(this.serviceconfig?.port",{"_index":101,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server?.close",{"_index":167,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.serviceconfig",{"_index":87,"title":{},"body":{"classes/BasicService.html":{}}}],["this.serviceconfig?.swagger",{"_index":94,"title":{},"body":{"classes/BasicService.html":{}}}],["this.serviceconfig?.swaggerlocation",{"_index":97,"title":{},"body":{"classes/BasicService.html":{}}}],["this[server_method[type",{"_index":240,"title":{},"body":{"classes/ServerFactory.html":{}}}],["throw",{"_index":170,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["trigger",{"_index":354,"title":{},"body":{"index.html":{}}}],["true",{"_index":267,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["tsoa",{"_index":292,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":18,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicController.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["type=server_type.express",{"_index":239,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["typescript",{"_index":379,"title":{},"body":{"index.html":{}}}],["ui",{"_index":151,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"dependencies.html":{}}}],["unique",{"_index":243,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["unit",{"_index":385,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{}}}],["updated",{"_index":350,"title":{},"body":{"index.html":{}}}],["url",{"_index":208,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["usage",{"_index":362,"title":{},"body":{"index.html":{}}}],["use",{"_index":51,"title":{},"body":{"classes/BasicService.html":{},"classes/ServerSingleton.html":{},"index.html":{}}}],["used",{"_index":312,"title":{},"body":{"miscellaneous/functions.html":{}}}],["usefactory",{"_index":246,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["usefactory(factory",{"_index":249,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["useful",{"_index":376,"title":{},"body":{"index.html":{}}}],["value",{"_index":108,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"miscellaneous/enumerations.html":{}}}],["verb",{"_index":20,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["verbs",{"_index":299,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["version",{"_index":342,"title":{},"body":{"index.html":{},"properties.html":{}}}],["versioning",{"_index":322,"title":{},"body":{"index.html":{}}}],["versions",{"_index":329,"title":{},"body":{"index.html":{}}}],["void",{"_index":81,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerSingleton.html":{}}}],["watch",{"_index":381,"title":{},"body":{"index.html":{}}}],["web",{"_index":261,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["yes",{"_index":71,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiConfig.html":{"url":"interfaces/ApiConfig.html","title":"interface - ApiConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorators/interfaces/api.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresents the @API decorator's configuration object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         CONTROLLER_METHOD\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CONTROLLER_METHOD\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The verb of the API.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The path of the API\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CONTROLLER_METHOD } from '../../basic-controller/interfaces';\n\n/**\n * Rappresents the @API decorator's configuration object.\n * @property {CONTROLLER_METHOD} method\n * @property {string} path\n */\nexport interface ApiConfig {\n    /**\n     * The verb of the API.\n     */\n    method: CONTROLLER_METHOD;\n\n    /**\n     * The path of the API\n     */\n    path: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BasicController.html":{"url":"classes/BasicController.html","title":"class - BasicController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BasicController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-controller/basic-controller.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Controller\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                handlers\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        handlers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ControllerHandler[]\n\n                    \n                \n                    \n                        \n                                Defined in src/basic-controller/basic-controller.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/basic-controller/basic-controller.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, ControllerHandler } from './interfaces';\n\nexport abstract class BasicController implements Controller {\n\n    public readonly id: string;\n\n    public readonly handlers: ControllerHandler[];\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BasicService.html":{"url":"classes/BasicService.html","title":"class - BasicService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BasicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/basic-service.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresents the basic class to build a microservice. Just use this class or extend it to create a new service and execute the method run to start it.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Optional\n                                run\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                listen\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(serviceConfig?: ServiceConfig, controllers?: Controller[])\n                    \n                \n                        \n                            \n                                Defined in src/basic-service/basic-service.ts:20\n                            \n                        \n\n                \n                    \n                            Creates a new BasicService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        serviceConfig\n                                                  \n                                                        \n                                                                        ServiceConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nThe service configuration.\n\n\n                                                        \n                                                \n                                                \n                                                        controllers\n                                                  \n                                                        \n                                                                        Controller[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nThe list of controllers.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        run\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/basic-service/basic-service.ts:16\n                        \n                    \n\n            \n                \n                    Optional On Server Listen callback\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        listen\n                        \n                    \n                \n            \n            \n                \n                    \n                    listen()\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/basic-service.ts:56\n                \n            \n\n\n            \n                \n                    Allow the service to start listen for requests.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServiceConfig } from './interfaces';\nimport { ServerSingleton } from '../server';\nimport { ServerApplication } from '../server/interfaces';\nimport { Controller } from '../basic-controller/interfaces';\n\n/**\n * Rappresents the basic class to build a microservice. Just use this class or extend it to create a new service and execute the method run to start it.\n */\nexport class BasicService{\n\n    /**\n     * Optional On Server Listen callback\n     *\n     * @protected\n     */\n    protected run?: ()=> void;\n\n    private readonly server: ServerApplication;\n    private readonly serviceConfig?: ServiceConfig;\n    private readonly controllers?: Controller[] = [];\n\n    /**\n     * Creates a new BasicService.\n     * @param {ServiceConfig} [serviceConfig] - The service configuration.\n     * @param {Controller[]} [controllers] - The list of controllers.\n     */\n    public constructor(serviceConfig?: ServiceConfig, controllers?: Controller[]) {\n        if (serviceConfig){\n            this.serviceConfig = serviceConfig;\n        }\n\n        if (controllers){\n            this.controllers = controllers;\n        }\n\n        this.server = ServerSingleton.getInstance(serviceConfig?.serverType);\n        this.attachSwaggerToServer();\n        this.attachControllersToServer();\n    }\n\n    private attachSwaggerToServer(): void {\n        if (this.serviceConfig?.swagger !== false){\n            this.server.addSwagger(this.serviceConfig?.docsPath, this.serviceConfig?.swaggerLocation);\n        }\n    }\n\n    private attachControllersToServer(): void {\n        this.controllers?.forEach((controller: Controller): void => {\n            this.server.addController(controller);\n        });\n    }\n\n    /**\n     * Allow the service to start listen for requests.\n     */\n    public listen(): void {\n        this.server.listen(this.serviceConfig?.port, this.run);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Controller.html":{"url":"interfaces/Controller.html","title":"interface - Controller","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Controller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-controller/interfaces/controller.ts\n        \n\n\n            \n                Description\n            \n            \n                The controller structure.\n\n            \n\n            \n                Extends\n            \n            \n                    ActionsDictionary\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            handlers\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handlers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handlers:         ControllerHandler[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ControllerHandler[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The handlers' list.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The controller name.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export enum CONTROLLER_METHOD {\n    /** @value get */\n    GET = 'get',\n    /** @value post */\n    POST = 'post',\n    /** @value put */\n    PUT = 'put',\n    /** @value delete */\n    DELETE = 'delete'\n}\n\n/**\n * @ignore\n */\nexport interface ActionsDictionary {\n    [actionName: string]: any;\n}\n\n/**\n * The controller structure.\n *\n * @property {string} name\n * @property {ControllerHandler[]} [handler]\n */\nexport interface Controller extends ActionsDictionary{\n\n    /**\n     * The controller name.\n     */\n    id: string;\n\n    /**\n     * The handlers' list.\n     */\n    handlers?: ControllerHandler[];\n}\n\n/**\n * The controller handler structure.\n *\n * @property {CONTROLLER_METHOD} method\n * @property {string} path\n * @property {string} handler\n */\nexport interface ControllerHandler {\n\n    /**\n     * The verb of the handler.\n     */\n    method: CONTROLLER_METHOD;\n\n    /**\n     * The path of the handler.\n     */\n    path: string;\n\n    /**\n     * The handler name.\n     */\n    handler: keyof ActionsDictionary;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ControllerHandler.html":{"url":"interfaces/ControllerHandler.html","title":"interface - ControllerHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ControllerHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-controller/interfaces/controller.ts\n        \n\n\n            \n                Description\n            \n            \n                The controller handler structure.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            handler\n                                        \n                                \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handler:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    The handler name.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         CONTROLLER_METHOD\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CONTROLLER_METHOD\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The verb of the handler.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The path of the handler.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export enum CONTROLLER_METHOD {\n    /** @value get */\n    GET = 'get',\n    /** @value post */\n    POST = 'post',\n    /** @value put */\n    PUT = 'put',\n    /** @value delete */\n    DELETE = 'delete'\n}\n\n/**\n * @ignore\n */\nexport interface ActionsDictionary {\n    [actionName: string]: any;\n}\n\n/**\n * The controller structure.\n *\n * @property {string} name\n * @property {ControllerHandler[]} [handler]\n */\nexport interface Controller extends ActionsDictionary{\n\n    /**\n     * The controller name.\n     */\n    id: string;\n\n    /**\n     * The handlers' list.\n     */\n    handlers?: ControllerHandler[];\n}\n\n/**\n * The controller handler structure.\n *\n * @property {CONTROLLER_METHOD} method\n * @property {string} path\n * @property {string} handler\n */\nexport interface ControllerHandler {\n\n    /**\n     * The verb of the handler.\n     */\n    method: CONTROLLER_METHOD;\n\n    /**\n     * The path of the handler.\n     */\n    path: string;\n\n    /**\n     * The handler name.\n     */\n    handler: keyof ActionsDictionary;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressServer.html":{"url":"classes/ExpressServer.html","title":"class - ExpressServer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressServer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/servers/express-server.ts\n        \n\n\n            \n                Description\n            \n            \n                The Express server abstraction class.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ServerApplication\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addController\n                            \n                            \n                                    Public\n                                addMiddleware\n                            \n                            \n                                    Public\n                                addSwagger\n                            \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                listen\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/server/servers/express-server.ts:46\n                            \n                        \n\n                \n                    \n                            Creates a new ExpressServer.\n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addController\n                        \n                    \n                \n            \n            \n                \n                    \n                    addController(controller: Controller)\n                \n            \n\n\n            \n                \n                    Defined in src/server/servers/express-server.ts:88\n                \n            \n\n\n            \n                \n                    Add API controller\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    controller\n                                    \n                                                Controller\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addMiddleware\n                        \n                    \n                \n            \n            \n                \n                    \n                    addMiddleware(middleware: (args: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/server/servers/express-server.ts:79\n                \n            \n\n\n            \n                \n                    Add middleware to the server.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    middleware\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addSwagger\n                        \n                    \n                \n            \n            \n                \n                    \n                    addSwagger(path: string, location: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/servers/express-server.ts:152\n                \n            \n\n\n            \n                \n                    Expose the swagger API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_SWAGGER_PATH\n                                    \n\n                                    \n                                        \nthe path of the swagger api.\n\n\n                                    \n                                \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_SWAGGER_LOCATION\n                                    \n\n                                    \n                                        \nthe direcotry of the swagger.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in src/server/servers/express-server.ts:70\n                \n            \n\n\n            \n                \n                    Close the server.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        listen\n                        \n                    \n                \n            \n            \n                \n                    \n                    listen(port?: string | number, callback?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/server/servers/express-server.ts:63\n                \n            \n\n\n            \n                \n                    Allow the server to start listen for requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe listen port of the server.\n\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe on listen callback.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express, { Application, Router } from 'express';\nimport morgan from 'morgan';\nimport swaggerUi from 'swagger-ui-express';\nimport { Server } from 'http';\n\nimport { ServerApplication } from '../interfaces';\nimport { Controller, ControllerHandler } from '../../basic-controller/interfaces/controller';\n\n/**\n * Router/Controller Dictionary\n *\n * @property {Router} router - the express Router\n * @property {Controller} controller\n */\ninterface RouterControllerMap {\n    [key: string]: {\n        router: Router;\n        controller: Controller;\n    }\n}\n\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_PATH = '/docs';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_LOCATION = 'swagger';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_URL = '/swagger.json';\n\n/**\n * The Express server abstraction class.\n *\n * @implements {ServerApplication}\n */\nexport class ExpressServer implements ServerApplication {\n\n    private readonly app: Application;\n\n    private server: Server;\n\n    private routerControllerMap: RouterControllerMap = {};\n\n    /**\n     * Creates a new ExpressServer.\n     */\n    public constructor() {\n        this.app = express();\n        this.app.use(express.json());\n        this.app.use(morgan('tiny'));\n    }\n\n    /**\n     * Allow the server to start listen for requests.\n     *\n     * @param {(string | number)} [port] - the listen port of the server.\n     * @param {Function} [callback] - the on listen callback.\n     */\n    public listen(port?: string | number, callback?: () => void): void {\n        this.server = this.app.listen(port, callback);\n    }\n\n    /**\n     * Close the server.\n     */\n    public close(): void {\n        this.server?.close();\n    }\n\n    /**\n     * Add middleware to the server.\n     *\n     * @param {Function} middleware\n     */\n    public addMiddleware(middleware: (...args: any) => void): void {\n        this.app.use(middleware);\n    }\n\n    /**\n     * Add API controller\n     *\n     * @param {Controller} controller\n     */\n    public addController(controller: Controller): void {\n        if (this.routerControllerMap[controller.id]) {\n            throw new Error('controller already presents');\n        }\n\n        const router = this.createRouterForController(controller);\n\n        if (controller.handlers) {\n            this.addControllerHandlers(controller.id, controller.handlers);\n        }\n\n        this.app.use(router);\n    }\n\n    private createRouterForController(controller: Controller): Router {\n        const router = express.Router();\n\n        this.routerControllerMap[controller.id] = {\n            router: router,\n            controller: controller\n        };\n\n        return router;\n    }\n\n    private addControllerHandlers(controllerid: string, controllerHandlers: ControllerHandler | ControllerHandler[]): void {\n        if (!this.routerControllerMap[controllerid]) {\n            throw new Error('controller not found');\n        }\n\n        if (!Array.isArray(controllerHandlers)){\n            controllerHandlers = [controllerHandlers];\n        }\n\n        const router = this.routerControllerMap[controllerid].router;\n        const controller = this.routerControllerMap[controllerid].controller;\n\n        controllerHandlers.forEach((controllerHandler: ControllerHandler): void => {\n            const method = controllerHandler.method;\n            const path = controllerHandler.path;\n            const handler = controllerHandler.handler;\n\n            router[method](path, async(req: any, res: any) => {\n                const response = await controller[handler]?.(req);\n\n                return res.send(response);\n            });\n\n            if (!this.routerControllerMap[controllerid].controller.handlers){\n                this.routerControllerMap[controllerid].controller.handlers = [];\n            }\n\n            if (this.routerControllerMap[controllerid].controller.handlers?.indexOf(controllerHandler) === -1){\n                this.routerControllerMap[controllerid].controller.handlers?.push(controllerHandler);\n            }\n        });\n    }\n\n    /**\n     * Expose the swagger API.\n     *\n     * @param {string} [path] - the path of the swagger api.\n     * @param {string} [location] -  the direcotry of the swagger.\n     */\n    public addSwagger(path: string = DEFAULT_SWAGGER_PATH, location: string = DEFAULT_SWAGGER_LOCATION): void {\n        this.app.use(express.static(location));\n        this.app.use(\n            path,\n            swaggerUi.serve,\n            swaggerUi.setup(undefined, {\n                swaggerOptions: {\n                    url: DEFAULT_SWAGGER_URL,\n                }\n            })\n        );\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RouterControllerMap.html":{"url":"interfaces/RouterControllerMap.html","title":"interface - RouterControllerMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RouterControllerMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/servers/express-server.ts\n        \n\n\n            \n                Description\n            \n            \n                Router/Controller Dictionary\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/server/servers/express-server.ts:15\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import express, { Application, Router } from 'express';\nimport morgan from 'morgan';\nimport swaggerUi from 'swagger-ui-express';\nimport { Server } from 'http';\n\nimport { ServerApplication } from '../interfaces';\nimport { Controller, ControllerHandler } from '../../basic-controller/interfaces/controller';\n\n/**\n * Router/Controller Dictionary\n *\n * @property {Router} router - the express Router\n * @property {Controller} controller\n */\ninterface RouterControllerMap {\n    [key: string]: {\n        router: Router;\n        controller: Controller;\n    }\n}\n\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_PATH = '/docs';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_LOCATION = 'swagger';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_URL = '/swagger.json';\n\n/**\n * The Express server abstraction class.\n *\n * @implements {ServerApplication}\n */\nexport class ExpressServer implements ServerApplication {\n\n    private readonly app: Application;\n\n    private server: Server;\n\n    private routerControllerMap: RouterControllerMap = {};\n\n    /**\n     * Creates a new ExpressServer.\n     */\n    public constructor() {\n        this.app = express();\n        this.app.use(express.json());\n        this.app.use(morgan('tiny'));\n    }\n\n    /**\n     * Allow the server to start listen for requests.\n     *\n     * @param {(string | number)} [port] - the listen port of the server.\n     * @param {Function} [callback] - the on listen callback.\n     */\n    public listen(port?: string | number, callback?: () => void): void {\n        this.server = this.app.listen(port, callback);\n    }\n\n    /**\n     * Close the server.\n     */\n    public close(): void {\n        this.server?.close();\n    }\n\n    /**\n     * Add middleware to the server.\n     *\n     * @param {Function} middleware\n     */\n    public addMiddleware(middleware: (...args: any) => void): void {\n        this.app.use(middleware);\n    }\n\n    /**\n     * Add API controller\n     *\n     * @param {Controller} controller\n     */\n    public addController(controller: Controller): void {\n        if (this.routerControllerMap[controller.id]) {\n            throw new Error('controller already presents');\n        }\n\n        const router = this.createRouterForController(controller);\n\n        if (controller.handlers) {\n            this.addControllerHandlers(controller.id, controller.handlers);\n        }\n\n        this.app.use(router);\n    }\n\n    private createRouterForController(controller: Controller): Router {\n        const router = express.Router();\n\n        this.routerControllerMap[controller.id] = {\n            router: router,\n            controller: controller\n        };\n\n        return router;\n    }\n\n    private addControllerHandlers(controllerid: string, controllerHandlers: ControllerHandler | ControllerHandler[]): void {\n        if (!this.routerControllerMap[controllerid]) {\n            throw new Error('controller not found');\n        }\n\n        if (!Array.isArray(controllerHandlers)){\n            controllerHandlers = [controllerHandlers];\n        }\n\n        const router = this.routerControllerMap[controllerid].router;\n        const controller = this.routerControllerMap[controllerid].controller;\n\n        controllerHandlers.forEach((controllerHandler: ControllerHandler): void => {\n            const method = controllerHandler.method;\n            const path = controllerHandler.path;\n            const handler = controllerHandler.handler;\n\n            router[method](path, async(req: any, res: any) => {\n                const response = await controller[handler]?.(req);\n\n                return res.send(response);\n            });\n\n            if (!this.routerControllerMap[controllerid].controller.handlers){\n                this.routerControllerMap[controllerid].controller.handlers = [];\n            }\n\n            if (this.routerControllerMap[controllerid].controller.handlers?.indexOf(controllerHandler) === -1){\n                this.routerControllerMap[controllerid].controller.handlers?.push(controllerHandler);\n            }\n        });\n    }\n\n    /**\n     * Expose the swagger API.\n     *\n     * @param {string} [path] - the path of the swagger api.\n     * @param {string} [location] -  the direcotry of the swagger.\n     */\n    public addSwagger(path: string = DEFAULT_SWAGGER_PATH, location: string = DEFAULT_SWAGGER_LOCATION): void {\n        this.app.use(express.static(location));\n        this.app.use(\n            path,\n            swaggerUi.serve,\n            swaggerUi.setup(undefined, {\n                swaggerOptions: {\n                    url: DEFAULT_SWAGGER_URL,\n                }\n            })\n        );\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServerApplication.html":{"url":"interfaces/ServerApplication.html","title":"interface - ServerApplication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServerApplication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/interfaces/server-application.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresent the Server application.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addController\n                                    \n                                \n                                \n                                    \n                                        addMiddleware\n                                    \n                                \n                                \n                                    \n                                        addSwagger\n                                    \n                                \n                                \n                                    \n                                        close\n                                    \n                                \n                                \n                                    \n                                        listen\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addController\n                        \n                    \n                \n            \n            \n                \naddController(controller: Controller)\n                \n            \n\n\n            \n                \n                    Defined in src/server/interfaces/server-application.ts:38\n                \n            \n\n\n            \n                \n                    Add API controller\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    controller\n                                    \n                                                Controller\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addMiddleware\n                        \n                    \n                \n            \n            \n                \naddMiddleware(middleware: (args: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/server/interfaces/server-application.ts:31\n                \n            \n\n\n            \n                \n                    Add middleware to the server.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    middleware\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addSwagger\n                        \n                    \n                \n            \n            \n                \naddSwagger(path?: string, location?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/interfaces/server-application.ts:46\n                \n            \n\n\n            \n                \n                    Expose the swagger API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe path of the swagger api.\n\n\n                                    \n                                \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe direcotry of the swagger.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/server/interfaces/server-application.ts:24\n                \n            \n\n\n            \n                \n                    Close the server.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(port?: string | number, callback?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/server/interfaces/server-application.ts:19\n                \n            \n\n\n            \n                \n                    Allow the server to start listen for requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe listen port of the server.\n\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe on listen callback.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Controller } from '../../basic-controller/interfaces';\n\n/**\n * Rappresent the Server application.\n * @property {Function} listen - Allow the server to start listen for requests.\n * @property {Function} close - Close the server.\n * @property {Function} addMiddleware - Add middleware to the server.\n * @property {Function} addController - Add API controller.\n * @property {Function} addControllerHandlers - Add one or more API controller handlers.\n * @property {Function} prepareSwagger - Expose the swagger API.\n */\nexport interface ServerApplication {\n    /**\n     * Allow the server to start listen for requests.\n     *\n     * @param {(string | number)} [port] - the listen port of the server.\n     * @param {Function} [callback] - the on listen callback.\n     */\n    listen(port?: string | number, callback?: () => void): void;\n\n    /**\n     * Close the server.\n     */\n    close(): void;\n\n    /**\n     * Add middleware to the server.\n     *\n     * @param {Function} middleware\n     */\n    addMiddleware(middleware: (...args: any) => void): void\n\n    /**\n     * Add API controller\n     *\n     * @param {Controller} controller\n     */\n    addController(controller: Controller): void;\n\n    /**\n     * Expose the swagger API.\n     *\n     * @param {string} [path] - the path of the swagger api.\n     * @param {string} [location] -  the direcotry of the swagger.\n     */\n    addSwagger(path?: string, location?: string): void;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServerFactory.html":{"url":"classes/ServerFactory.html","title":"class - ServerFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServerFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/server-factory.ts\n        \n\n\n            \n                Description\n            \n            \n                Static factory class to create a server application.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createServer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createServer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createServer(type: SERVER_TYPE)\n                \n            \n\n\n            \n                \n                    Defined in src/server/server-factory.ts:35\n                \n            \n\n\n            \n                \n                    Facotry method that allow to select application the server type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            SERVER_TYPE\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        SERVER_TYPE.EXPRESS\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ServerApplication\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServerApplication } from './interfaces';\nimport { ExpressServer } from './servers/express-server';\n\n/**\n * @ignore\n */\nexport enum SERVER_TYPE {\n    /** @value EXPRESS */\n    EXPRESS = 'EXPRESS'\n}\n\n/**\n * @ignore\n */\nenum SERVER_METHOD {\n    EXPRESS = 'createExpressServer'\n}\n\n/**\n * Static factory class to create a server application.\n */\nexport class ServerFactory {\n\n    private createExpressServer(): ServerApplication {\n        return new ExpressServer();\n    }\n\n    /**\n     * Facotry method that allow to select application the server type.\n     *\n     * @static\n     * @param {SERVER_TYPE} [type=SERVER_TYPE.EXPRESS]\n     * @return {ServerApplication}\n     */\n    public createServer(type: SERVER_TYPE = SERVER_TYPE.EXPRESS): ServerApplication {\n        return this[SERVER_METHOD[type || SERVER_TYPE.EXPRESS]]();\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServerSingleton.html":{"url":"classes/ServerSingleton.html","title":"class - ServerSingleton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServerSingleton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/server-singleton.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract static singleton class to create an unique server instance.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                    Static\n                                useFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getInstance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance(type: SERVER_TYPE)\n                \n            \n\n\n            \n                \n                    Defined in src/server/server-singleton.ts:32\n                \n            \n\n\n            \n                \n                    Singleton method that return the unique server application instance.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            SERVER_TYPE\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        SERVER_TYPE.EXPRESS\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ServerApplication\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        useFactory\n                        \n                    \n                \n            \n            \n                \n                    \n                    useFactory(factory: T)\n                \n            \n\n\n            \n                \n                    Defined in src/server/server-singleton.ts:19\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Allow to set the factory class to use to build the server application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    factory\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServerApplication } from './interfaces';\nimport { ServerFactory, SERVER_TYPE } from './server-factory';\n\n/**\n * Abstract static singleton class to create an unique server instance.\n *\n * @abstract\n */\nexport abstract class ServerSingleton{\n\n    private static app: ServerApplication;\n    private static factory: ServerFactory = new ServerFactory();\n\n    /**\n     * Allow to set the factory class to use to build the server application.\n     *\n     * @static\n     */\n    public static useFactory(factory: T): void {\n        if (!this.app){\n            this.factory = factory;\n        }\n    }\n\n    /**\n     * Singleton method that return the unique server application instance.\n     *\n     * @static\n     * @param {SERVER_TYPE} [type=SERVER_TYPE.EXPRESS]\n     * @return {ServerApplication}\n     */\n    public static getInstance(type: SERVER_TYPE = SERVER_TYPE.EXPRESS): ServerApplication{\n        if (!this.app){\n            this.app = this.factory.createServer(type);\n        }\n\n        return this.app;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServiceConfig.html":{"url":"interfaces/ServiceConfig.html","title":"interface - ServiceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServiceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/interfaces/service-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresents the basic service configuration.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            docsPath\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            port\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            serverType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            swagger\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            swaggerLocation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        docsPath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        docsPath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The path of the swagger api.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The listening port of the web server. if not specified the port is chosen randomically.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        serverType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        serverType:     SERVER_TYPE\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SERVER_TYPE\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the server application type. Default: EXPRESS\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        swagger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        swagger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Allow to enable/disable the swagger api. Default: true.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        swaggerLocation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        swaggerLocation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The directory location of the swagger.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { SERVER_TYPE } from '../../server';\n\n/**\n * Rappresents the basic service configuration.\n * @property {string | number} [port]\n * @property {string} [docsPath]\n * @property {string} [swaggerLocation]\n * @property {boolean} [swagger]\n */\nexport interface ServiceConfig {\n\n    /**\n     * The listening port of the web server. if not specified the port is chosen randomically.\n     */\n    port?: string | number;\n\n    /**\n     * The path of the swagger api.\n     */\n    docsPath?: string;\n\n    /**\n     * The directory location of the swagger.\n     */\n    swaggerLocation?: string;\n\n    /**\n     * Allow to enable/disable the swagger api. Default: true.\n     */\n    swagger?: boolean;\n\n    /**\n     * Set the server application type. Default: EXPRESS\n     */\n    serverType?: SERVER_TYPE\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/basic-controller/basic-controller.ts\n            \n            class\n            BasicController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/basic-controller/interfaces/controller.ts\n            \n            interface\n            Controller\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/basic-controller/interfaces/controller.ts\n            \n            interface\n            ControllerHandler\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/basic-service/basic-service.ts\n            \n            class\n            BasicService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/basic-service/interfaces/service-config.ts\n            \n            interface\n            ServiceConfig\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            API\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            DELETE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            GET\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            POST\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            PUT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/controller.ts\n            \n            function\n            Controller\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/interfaces/api.ts\n            \n            interface\n            ApiConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/decorators/service.ts\n            \n            function\n            Service\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/interfaces/server-application.ts\n            \n            interface\n            ServerApplication\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/server/server-factory.ts\n            \n            class\n            ServerFactory\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/server/server-singleton.ts\n            \n            class\n            ServerSingleton\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/server/servers/express-server.ts\n            \n            class\n            ExpressServer\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/server/servers/express-server.ts\n            \n            interface\n            RouterControllerMap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            express : ^4.18.2\n        \n            morgan : ^1.10.0\n        \n            swagger-ui-express : ^4.6.0\n        \n            tsoa : ^5.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CONTROLLER_METHOD   (src/.../controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/basic-controller/interfaces/controller.ts\n    \n        \n            \n                \n                    \n                        \n                        CONTROLLER_METHOD\n                    \n                \n                    \n                        \n                            Contains the available verbs for the service.\n\n                        \n                    \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : get\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : put\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API   (src/.../api.ts)\n                        \n                        \n                            Controller   (src/.../controller.ts)\n                        \n                        \n                            DELETE   (src/.../api.ts)\n                        \n                        \n                            GET   (src/.../api.ts)\n                        \n                        \n                            POST   (src/.../api.ts)\n                        \n                        \n                            PUT   (src/.../api.ts)\n                        \n                        \n                            Service   (src/.../service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators/api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API\n                        \n                    \n                \n            \n            \n                \nAPI(config: ApiConfig)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as an API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                ApiConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe configuration of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DELETE\n                        \n                    \n                \n            \n            \n                \nDELETE(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a DELETE API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GET\n                        \n                    \n                \n            \n            \n                \nGET(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a GET API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POST\n                        \n                    \n                \n            \n            \n                \nPOST(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a POST API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUT\n                        \n                    \n                \n            \n            \n                \nPUT(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a PUT API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/decorators/controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Controller\n                        \n                    \n                \n            \n            \n                \nController(id?: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a class as a controller.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe name of the controller. Will be used as router. If not provided will be used the name of the class.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/decorators/service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Service\n                        \n                    \n                \n            \n            \n                \nService(serviceConfig: ServiceConfig)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a class as a service. The class must extens BasicService\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    serviceConfig\n                                    \n                                                ServiceConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe service configuration.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBasic Service\n\n\n\n\n\nThis is a basic service module to implement microservices.\nSemantic Versioning & Commit Convention\nThis project follows semantic versioning.\nWe release patch versions for critical bugfixes, minor versions for new features or non-essential changes, and major\nversions for any breaking changes.\nThis project also follows the conventional commit convention with some\nadditional customization:\nPatch version changes\n\nrefactor(optional_scope) - indicates a code refactoring.\nchore(deps): indicates some dependency has been added / updated and therefore a new release is needed.\nno-release: indicates the commit shouldn't trigger a release no matter what.\n\nInstallation / Requirements\nNodejs >= 18\nnpm i @experiments72/basic-service\nUsage\nService bootstrap\nCreate BasicService object and execute run method:\nimport { BasicService } from '../../src';\n\nconst pingService = new BasicService({port: 3000});\n\npingService.run(() => {\n    console.log('server listen on port 3000');\n});Create a controller\nCreate a class and use Controller and API decorators:\nimport { Controller, GET } from '../../src';\n\n@Controller('ping')\nexport class PingController{\n\n    @GET('/ping')\n    public ping(): string{\n        return 'pong';\n    }\n\n}Useful commands\n\nnpm run build   compile typescript to js\nnpm run watch   watch for changes and compile\nnpm run test    perform the jest unit tests\nnpm run lint    perform the eslint linter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.2\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                        /builds/experiments72/basic-service/src/basic-controller/basic-controller.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/basic-controller/interfaces/controller.ts\n            \n            \n                100 %\n                (5/5)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/basic-service/basic-service.ts\n            \n            \n                100 %\n                (15/15)\n            \n            \n                93 %\n                (25/27)\n            \n            \n                100 %\n                (5/5)\n            \n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/api.ts\n            \n            \n                100 %\n                (15/15)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/controller.ts\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/service.ts\n            \n            \n                100 %\n                (5/5)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/server/server-factory.ts\n            \n            \n                100 %\n                (8/8)\n            \n            \n                86 %\n                (6/7)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/server/server-singleton.ts\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/server/servers/express-server.ts\n            \n            \n                88 %\n                (37/42)\n            \n            \n                54 %\n                (13/24)\n            \n            \n                100 %\n                (10/10)\n            \n            \n                88 %\n                (37/42)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
