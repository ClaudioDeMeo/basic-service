var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiConfig.html",[0,0.323,1,1.64]],["body/interfaces/ApiConfig.html",[0,0.392,1,2.505,2,0.777,3,0.777,4,0.777,5,0.57,6,2.745,7,0.669,8,2.914,9,1.78,10,4.292,11,2.505,12,3.461,13,0.57,14,1.674,15,1.336,16,1.585,17,2.97,18,0.718,19,0.051,20,2.914,21,1.483,22,0.894,23,1.167,24,2.311,25,1.674,26,0.669,27,0.039,28,0.039]],["title/classes/BasicService.html",[29,0.394,30,1.249]],["body/classes/BasicService.html",[2,0.449,3,0.449,4,0.449,5,0.329,7,0.691,8,1.994,11,1.714,13,0.329,14,1.146,15,0.771,18,0.589,19,0.052,22,0.924,23,1.007,26,0.386,27,0.027,28,0.027,29,0.586,30,1.733,31,0.874,32,1.855,33,2.834,34,1.335,35,1.994,36,2.937,37,1.994,38,2.937,39,1.491,40,1.501,41,1.709,42,2.369,43,3.367,44,1.98,45,3.146,46,1.316,47,1.305,48,1.821,49,2.937,50,2.369,51,1.335,52,2.937,53,2.503,54,4.246,55,1.207,56,1.522,57,1.966,58,1.994,59,1.146,60,0.883,61,2.053,62,2.648,63,0.874,64,1.966,65,1.709,66,1.714,67,2.937,68,1.966,69,1.522,70,2.369,71,1.146,72,1.821,73,1.966,74,1.714,75,1.147,76,1.007,77,1.966,78,1.855,79,1.491,80,1.372,81,1.966,82,3.516,83,2.937,84,1.335,85,1.966,86,1.966,87,1.966,88,1.966,89,1.966,90,1.966,91,1.966,92,1.966,93,1.147,94,1.966,95,1.966,96,1.966,97,1.966,98,0.998,99,1.585,100,1.966,101,1.966]],["title/interfaces/Controller.html",[0,0.323,55,0.641]],["body/interfaces/Controller.html",[0,0.486,2,0.624,3,0.624,4,0.624,5,0.458,7,0.538,13,0.458,14,1.451,15,0.977,16,1.27,17,2.467,18,0.623,19,0.052,20,1.858,21,1.531,25,1.85,26,0.891,27,0.034,28,0.034,32,1.216,46,1.118,55,1.142,60,1.363,62,2.526,102,1.389,103,3.408,104,2.526,105,3.657,106,2.855,107,2.647,108,1.85,109,1.858,110,2.015,111,2.145,112,2.145,113,2.145,114,1.389,115,2.207,116,2.54,117,2.207]],["title/interfaces/ControllerHandler.html",[0,0.323,108,1.096]],["body/interfaces/ControllerHandler.html",[0,0.485,2,0.621,3,0.621,4,0.621,5,0.456,7,0.535,13,0.456,14,1.447,15,1.243,16,1.502,17,2.763,18,0.621,19,0.052,20,2.517,21,1.529,25,1.847,26,0.89,27,0.034,28,0.034,32,1.21,55,1.08,60,1.36,62,1.849,102,1.383,103,3.4,104,1.849,105,3.4,106,2.164,107,1.59,108,1.766,109,1.849,110,2.011,111,2.14,112,2.14,113,2.14,114,1.383,115,2.196,116,2.727,117,2.196]],["title/classes/ExpressServer.html",[29,0.394,118,1.427]],["body/classes/ExpressServer.html",[0,0.165,2,0.328,3,0.328,4,0.328,5,0.241,7,0.567,9,1.321,13,0.241,15,0.378,16,1.158,18,0.552,19,0.052,21,1.434,22,1.012,23,0.493,25,0.899,26,0.283,27,0.021,28,0.021,29,0.405,31,0.639,40,1.131,44,1.17,46,0.992,47,1.024,48,1.922,50,2.136,51,1.958,55,1.124,56,1.504,58,1.565,59,1.287,60,0.992,61,1.345,63,1.466,65,1.836,66,2.363,69,0.899,71,1.409,72,1.904,74,1.345,76,1.131,78,1.605,79,0.73,80,1.504,84,0.976,93,2.655,98,1.17,108,1.287,110,0.639,114,1.464,116,0.73,118,1.675,119,2.749,120,0.839,121,2.055,122,1.858,123,1.958,124,1.565,125,1.858,126,1.858,127,2.617,128,1.438,129,1.438,130,2.24,131,1.565,132,1.565,133,1.438,134,2.24,135,1.565,136,1.926,137,1.438,138,1.565,139,2.136,140,0.839,141,2.326,142,2.326,143,1.565,144,1.438,145,1.565,146,1.926,147,1.438,148,1.675,149,1.024,150,3.195,151,1.565,152,1.159,153,0.976,154,1.159,155,1.159,156,1.159,157,1.159,158,1.684,159,1.159,160,1.159,161,1.858,162,1.159,163,0.976,164,0.976,165,1.159,166,1.159,167,1.159,168,1.159,169,1.159,170,1.858,171,1.858,172,1.858,173,1.159,174,1.159,175,1.159,176,1.858,177,1.159,178,1.159,179,1.159,180,1.159,181,1.17,182,1.159,183,2.326,184,1.159,185,1.159,186,1.159,187,1.159,188,1.159,189,1.159,190,1.159,191,1.159,192,1.159,193,1.159,194,1.159,195,1.159,196,1.159,197,1.159,198,1.159,199,1.159,200,1.858,201,1.159,202,1.159,203,1.159,204,1.159,205,1.159,206,1.159,207,1.159,208,1.159,209,1.159]],["title/interfaces/RouterControllerMap.html",[0,0.323,158,1.64]],["body/interfaces/RouterControllerMap.html",[0,0.202,2,0.616,3,0.401,4,0.401,5,0.294,7,0.346,9,1.126,15,0.462,16,1.107,18,0.294,19,0.052,21,1.389,22,1.102,23,0.602,25,1.053,26,0.346,27,0.025,28,0.025,29,0.379,40,1.126,44,0.892,48,1.637,50,1.667,51,1.193,55,1.125,56,0.686,58,1.193,63,1.199,65,1.759,66,2.151,69,0.686,72,1.804,74,1.026,76,1.126,78,1.766,79,0.892,80,1.637,84,1.193,93,2.802,98,0.892,108,1.437,114,1.667,116,0.892,118,1.37,119,1.832,120,1.026,121,2.13,122,1.417,123,1.832,127,1.832,130,1.832,131,1.193,132,1.193,134,1.832,135,1.193,136,1.575,138,1.193,139,2.018,141,2.176,142,2.176,143,1.193,145,1.193,146,1.575,148,1.37,149,1.199,150,3.349,151,1.832,152,1.417,153,1.193,154,1.417,155,1.417,156,2.176,157,2.176,158,2.151,159,2.176,160,1.417,161,2.176,162,1.417,163,1.193,164,1.193,165,1.417,166,1.417,167,1.417,168,1.417,169,1.417,170,2.176,171,2.176,172,2.176,173,1.417,174,1.417,175,1.417,176,2.176,177,1.417,178,1.417,179,1.417,180,1.417,181,1.37,182,1.417,183,2.649,184,1.417,185,1.417,186,1.417,187,1.417,188,1.417,189,1.417,190,1.417,191,1.417,192,1.417,193,1.417,194,1.417,195,1.417,196,1.417,197,1.417,198,1.417,199,1.417,200,2.176,201,1.417,202,1.417,203,1.417,204,1.417,205,1.417,206,1.417,207,1.417,208,1.417,209,1.417,210,1.758,211,1.758,212,1.758]],["title/interfaces/ServerApplication.html",[0,0.323,76,0.963]],["body/interfaces/ServerApplication.html",[0,0.236,2,0.467,3,0.467,4,0.467,5,0.343,7,0.708,9,1.653,13,0.343,16,1.196,18,0.666,19,0.051,21,1.513,22,0.538,23,0.701,24,1.39,25,1.734,26,0.402,27,0.028,28,0.028,44,1.828,46,1.196,47,1.345,50,2.49,55,1.135,56,1.657,59,1.552,60,1.196,61,2.323,63,2.18,65,1.985,66,2.595,69,1.405,71,1.657,72,2.002,74,2.102,76,1.037,80,1.734,98,1.536,106,1.195,124,2.445,125,2.904,126,2.441,127,3.206,130,3.123,131,2.055,132,2.055,134,2.883,135,2.055,136,2.323,138,2.445,139,2.335,143,2.055,145,2.055,146,2.323,148,2.02,149,1.345,213,3.585,214,1.651,215,3.026,216,2.047,217,2.047,218,2.047,219,2.047,220,2.047,221,2.047,222,2.047,223,2.047,224,2.047]],["title/classes/ServerFactory.html",[29,0.394,225,1.64]],["body/classes/ServerFactory.html",[2,0.652,3,0.652,4,0.652,5,0.479,7,0.562,13,0.479,15,1.006,18,0.773,19,0.052,22,1.006,26,0.753,27,0.035,28,0.035,29,0.607,31,1.271,39,1.945,40,0.98,46,0.86,47,1.703,48,1.686,56,1.116,59,1.116,60,0.86,65,1.878,69,1.495,71,1.116,76,1.65,78,1.271,80,1.116,109,2.602,110,1.703,114,1.945,118,1.945,121,2.344,140,1.669,149,2.052,181,2.194,225,2.237,226,2.602,227,1.941,228,2.934,229,3.09,230,3.832,231,3.832,232,3.268,233,2.86,234,3.832,235,3.832,236,3.485,237,2.86,238,2.86,239,3.832,240,2.306,241,2.86]],["title/classes/ServerSingleton.html",[29,0.394,75,1.64]],["body/classes/ServerSingleton.html",[2,0.588,3,0.588,4,0.588,5,0.431,7,0.506,13,0.431,15,0.937,18,0.74,19,0.051,22,0.937,26,0.506,27,0.033,28,0.033,29,0.651,31,1.145,35,2.423,37,2.423,39,1.812,40,0.883,46,1.073,47,1.586,48,1.392,56,1.392,59,1.598,60,1.073,65,1.921,69,1.392,71,1.392,72,1.392,75,2.083,76,1.591,78,1.586,80,1.005,110,1.145,140,1.504,149,1.964,163,1.749,164,3.001,181,2.244,225,2.39,226,2.78,228,3.569,229,3.873,232,3.152,236,2.878,240,2.078,242,1.749,243,3.565,244,4.421,245,4.421,246,4.421,247,3.569,248,3.569,249,3.569,250,2.576,251,3.569,252,4.421,253,2.576,254,2.878,255,2.576,256,2.576]],["title/classes/ServiceComposer.html",[29,0.394,257,1.908]],["body/classes/ServiceComposer.html",[3,0.616,4,0.616,5,0.452,7,0.53,13,0.452,18,0.617,19,0.051,22,0.968,23,1.263,24,1.832,26,0.724,27,0.034,28,0.034,29,0.589,30,2.164,31,1.199,39,1.87,41,2.05,44,1.87,46,1.107,47,1.637,48,1.437,54,3.383,55,1.188,56,1.437,59,1.437,60,1.107,70,2.971,71,1.437,72,1.759,78,1.637,79,1.37,80,1.437,98,1.87,99,2.176,124,2.501,228,3.535,243,3.635,257,2.501,258,3.383,259,1.832,260,3.684,261,2.971,262,2.971,263,3.684,264,2.698,265,3.684,266,2.698,267,3.684,268,2.501,269,3.684,270,2.698,271,2.698,272,2.698,273,2.698,274,2.698]],["title/interfaces/ServiceConfig.html",[0,0.323,53,1.427]],["body/interfaces/ServiceConfig.html",[0,0.298,2,0.592,3,0.592,4,0.592,5,0.434,7,0.51,8,2.435,9,1.519,11,2.093,13,0.434,14,1.399,16,1.078,18,0.826,19,0.051,21,1.582,22,0.681,23,1.229,25,1.73,26,0.51,27,0.033,28,0.033,32,1.153,41,1.399,46,1.553,53,1.82,65,1.816,69,1.399,121,1.82,136,2.093,139,2.649,140,2.588,146,2.588,148,2.591,149,1.593,232,3.01,254,2.892,275,2.092,276,2.092,277,4.653,278,4.433,279,4.653,280,3.586,281,3.586,282,3.586,283,3.586,284,3.586,285,4.433,286,3.586,287,3.586,288,3.586]],["title/coverage.html",[289,2.571]],["body/coverage.html",[0,0.574,1,1.712,5,0.491,6,2.365,9,1.005,18,0.491,19,0.051,27,0.036,28,0.036,29,0.681,30,1.303,32,2.072,33,1.991,34,1.991,40,1.005,41,1.144,53,1.489,55,0.889,63,2.263,75,1.712,76,1.005,102,1.978,108,1.144,111,1.489,112,1.489,113,1.489,118,1.489,119,2.646,120,2.275,158,1.712,213,2.365,214,2.365,225,1.712,226,2.646,227,1.991,242,1.991,257,1.991,258,2.365,259,1.991,275,2.365,276,2.365,289,1.991,290,2.933,291,2.933,292,2.365,293,4.44,294,2.365,295,3.761,296,2.365,297,3.143,298,3.915,299,4.171,300,2.365,301,2.365,302,2.365,303,2.365,304,2.365,305,2.365]],["title/dependencies.html",[306,1.912,307,2.715]],["body/dependencies.html",[19,0.05,27,0.044,28,0.044,121,2.45,139,2.096,151,2.803,153,2.803,307,3.329,308,4.128,309,4.128,310,4.128,311,4.128,312,4.128]],["title/miscellaneous/enumerations.html",[313,1.384,314,2.715]],["body/miscellaneous/enumerations.html",[13,0.665,17,2.753,19,0.049,27,0.043,28,0.043,32,1.764,41,1.549,102,2.016,110,2.313,111,2.394,112,2.394,113,2.394,313,2.318,314,3.202,315,3.202,316,3.97,317,3.97,318,3.97]],["title/miscellaneous/functions.html",[313,1.384,319,2.286]],["body/miscellaneous/functions.html",[1,2.13,7,0.976,9,1.811,11,2.13,13,0.445,15,1.233,16,1.52,18,0.832,19,0.049,21,1.561,27,0.033,28,0.033,29,0.629,30,1.851,41,1.892,46,1.493,53,2.114,55,1.023,59,1.938,60,1.542,61,2.431,63,1.991,71,1.748,107,1.553,111,2.114,112,2.114,113,2.114,150,1.806,261,2.942,268,3.372,298,2.145,300,2.145,301,2.145,313,1.553,315,2.145,319,1.806,320,4.695,321,2.66,322,2.66,323,4.967,324,2.66,325,2.66,326,2.66,327,2.66,328,2.66,329,2.66,330,2.66,331,2.66,332,2.66]],["title/index.html",[13,0.397,333,2.371,334,2.371]],["body/index.html",[0,0.215,9,0.642,12,1.51,15,1,16,1.026,19,0.051,21,1.382,22,0.744,23,0.971,26,0.368,27,0.026,28,0.026,29,0.673,30,1.911,35,1.271,37,1.923,39,1.734,40,1.474,41,1.485,42,1.51,43,3.796,45,3.07,48,1.902,50,2.076,55,0.779,72,1.485,79,2.183,93,1.993,104,2.585,106,1.993,107,1.993,108,1.332,116,1.734,123,2.319,148,2.076,181,2.076,262,2.754,268,1.271,335,1.873,336,2.832,337,1.873,338,2.832,339,2.832,340,3.415,341,2.832,342,2.832,343,2.832,344,3.807,345,2.832,346,3.415,347,1.873,348,1.873,349,1.873,350,1.873,351,1.873,352,1.873,353,3.807,354,1.873,355,1.873,356,1.873,357,1.873,358,1.873,359,1.51,360,1.873,361,3.415,362,1.873,363,1.873,364,1.873,365,1.873,366,1.873,367,1.873,368,1.873,369,1.873,370,1.873,371,1.873,372,1.873,373,1.873,374,1.873,375,1.873,376,1.873,377,4.088,378,1.873,379,2.832,380,1.873,381,2.832,382,4.599,383,1.873,384,4.798,385,1.873,386,4.088,387,2.832,388,3.807,389,4.3,390,5.048,391,3.415,392,4.088,393,3.415,394,3.415,395,1.873,396,1.873,397,2.832,398,1.873,399,1.873,400,1.873,401,1.873,402,2.832,403,1.873,404,1.873,405,2.832,406,1.271,407,2.832,408,1.873,409,1.271,410,1.873,411,1.873,412,1.873,413,1.873]],["title/modules.html",[414,3.054]],["body/modules.html",[19,0.045,27,0.045,28,0.045,414,3.506]],["title/overview.html",[415,3.054]],["body/overview.html",[2,0.977,19,0.045,27,0.045,28,0.045,31,1.903,415,3.453,416,4.282,417,4.282]],["title/properties.html",[14,1.314,306,1.912]],["body/properties.html",[14,1.677,19,0.047,27,0.045,28,0.045,359,3.466,418,4.298]],["title/unit-test.html",[406,2.057,409,2.057]],["body/unit-test.html",[5,0.472,19,0.052,27,0.035,28,0.035,33,1.913,34,1.913,40,0.966,102,1.43,120,1.645,227,1.913,242,1.913,259,1.913,289,1.913,292,2.272,293,4.511,294,3.059,295,2.272,296,3.059,297,3.059,299,3.459,302,3.863,303,3.059,304,2.272,305,2.272,319,1.913,406,1.913,409,1.913,419,2.817,420,2.817,421,5.194,422,3.794,423,3.794,424,3.794,425,2.817,426,2.817,427,2.817,428,3.794,429,2.817,430,4.934,431,2.817,432,3.794,433,2.817,434,2.817,435,2.817,436,3.794,437,2.817,438,2.817,439,2.817,440,3.794,441,3.794,442,2.817,443,2.817,444,2.817]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"unit-test.html":{}}}],["0",{"_index":271,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["1",{"_index":202,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["1.0.4",{"_index":418,"title":{},"body":{"properties.html":{}}}],["1.10.0",{"_index":309,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":299,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["10/10",{"_index":444,"title":{},"body":{"unit-test.html":{}}}],["100",{"_index":293,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["13/24",{"_index":443,"title":{},"body":{"unit-test.html":{}}}],["15/15",{"_index":428,"title":{},"body":{"unit-test.html":{}}}],["18",{"_index":376,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":302,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["20/21",{"_index":424,"title":{},"body":{"unit-test.html":{}}}],["3/3",{"_index":295,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["30/33",{"_index":426,"title":{},"body":{"unit-test.html":{}}}],["3000",{"_index":384,"title":{},"body":{"index.html":{}}}],["37/42",{"_index":441,"title":{},"body":{"unit-test.html":{}}}],["4.18.2",{"_index":308,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":310,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":296,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["5",{"_index":416,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":312,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":294,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["54",{"_index":442,"title":{},"body":{"unit-test.html":{}}}],["6",{"_index":417,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":297,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["6/7",{"_index":438,"title":{},"body":{"unit-test.html":{}}}],["7/7",{"_index":303,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["8/8",{"_index":430,"title":{},"body":{"unit-test.html":{}}}],["86",{"_index":437,"title":{},"body":{"unit-test.html":{}}}],["88",{"_index":440,"title":{},"body":{"unit-test.html":{}}}],["9/10",{"_index":434,"title":{},"body":{"unit-test.html":{}}}],["9/9",{"_index":432,"title":{},"body":{"unit-test.html":{}}}],["90",{"_index":433,"title":{},"body":{"unit-test.html":{}}}],["91",{"_index":425,"title":{},"body":{"unit-test.html":{}}}],["95",{"_index":423,"title":{},"body":{"unit-test.html":{}}}],["abstract",{"_index":243,"title":{},"body":{"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{}}}],["abstraction",{"_index":122,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["actionname",{"_index":115,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["actionsdictionary",{"_index":105,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["add",{"_index":130,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["addcontroller",{"_index":124,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServiceComposer.html":{}}}],["addcontroller(controller",{"_index":98,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServiceComposer.html":{}}}],["addcontrollerhandlers",{"_index":221,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["addcontrollerhandlers(controllerid",{"_index":182,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["added",{"_index":366,"title":{},"body":{"index.html":{}}}],["additional",{"_index":357,"title":{},"body":{"index.html":{}}}],["addmiddleware",{"_index":125,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{}}}],["addmiddleware(middleware",{"_index":131,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["addswagger",{"_index":126,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{}}}],["addswagger(path",{"_index":135,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["allow",{"_index":69,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["already",{"_index":173,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["api",{"_index":9,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["api(config",{"_index":322,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apiconfig",{"_index":1,"title":{"interfaces/ApiConfig.html":{}},"body":{"interfaces/ApiConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["app",{"_index":163,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerSingleton.html":{}}}],["application",{"_index":149,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["application.ts",{"_index":214,"title":{},"body":{"interfaces/ServerApplication.html":{},"coverage.html":{}}}],["application.ts:19",{"_index":220,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:24",{"_index":219,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:31",{"_index":217,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:38",{"_index":216,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:46",{"_index":218,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["args",{"_index":132,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["array.isarray(controllerhandlers",{"_index":186,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["array.isarray(controllers",{"_index":83,"title":{},"body":{"classes/BasicService.html":{}}}],["async(req",{"_index":194,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["attach",{"_index":70,"title":{},"body":{"classes/BasicService.html":{},"classes/ServiceComposer.html":{}}}],["attachcontrollers",{"_index":49,"title":{},"body":{"classes/BasicService.html":{}}}],["attachcontrollers(controllers",{"_index":67,"title":{},"body":{"classes/BasicService.html":{}}}],["attachswaggertoserver",{"_index":88,"title":{},"body":{"classes/BasicService.html":{}}}],["available",{"_index":317,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["await",{"_index":197,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["basic",{"_index":23,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["basicservice",{"_index":30,"title":{"classes/BasicService.html":{}},"body":{"classes/BasicService.html":{},"classes/ServiceComposer.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["basicservice({port",{"_index":383,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":285,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["bootstrap",{"_index":380,"title":{},"body":{"index.html":{}}}],["branches",{"_index":419,"title":{},"body":{"unit-test.html":{}}}],["breaking",{"_index":355,"title":{},"body":{"index.html":{}}}],["bugfixes",{"_index":348,"title":{},"body":{"index.html":{}}}],["build",{"_index":35,"title":{},"body":{"classes/BasicService.html":{},"classes/ServerSingleton.html":{},"index.html":{}}}],["builder",{"_index":260,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["builds/experiments72/basic",{"_index":421,"title":{},"body":{"unit-test.html":{}}}],["callback",{"_index":66,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["changes",{"_index":353,"title":{},"body":{"index.html":{}}}],["chore(deps",{"_index":364,"title":{},"body":{"index.html":{}}}],["chosen",{"_index":283,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["class",{"_index":29,"title":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{}},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["classes",{"_index":31,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"overview.html":{}}}],["close",{"_index":127,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["code",{"_index":362,"title":{},"body":{"index.html":{}}}],["commands",{"_index":401,"title":{},"body":{"index.html":{}}}],["commit",{"_index":340,"title":{},"body":{"index.html":{}}}],["compile",{"_index":402,"title":{},"body":{"index.html":{}}}],["composer.ts",{"_index":259,"title":{},"body":{"classes/ServiceComposer.html":{},"coverage.html":{},"unit-test.html":{}}}],["composer.ts:21",{"_index":266,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["composer.ts:38",{"_index":264,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["config",{"_index":324,"title":{},"body":{"miscellaneous/functions.html":{}}}],["config.ts",{"_index":276,"title":{},"body":{"interfaces/ServiceConfig.html":{},"coverage.html":{}}}],["configuration",{"_index":11,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["configured",{"_index":267,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["console.log('server",{"_index":386,"title":{},"body":{"index.html":{}}}],["const",{"_index":93,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"index.html":{}}}],["constructor",{"_index":51,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["constructor(serviceconfig",{"_index":52,"title":{},"body":{"classes/BasicService.html":{}}}],["contains",{"_index":316,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["controller",{"_index":55,"title":{"interfaces/Controller.html":{}},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServiceComposer.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["controller('ping",{"_index":393,"title":{},"body":{"index.html":{}}}],["controller(id",{"_index":329,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controller.handlers",{"_index":176,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controller[handler]?.(req",{"_index":198,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controller_method",{"_index":17,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"miscellaneous/enumerations.html":{}}}],["controller_method.get",{"_index":391,"title":{},"body":{"index.html":{}}}],["controllerarray",{"_index":94,"title":{},"body":{"classes/BasicService.html":{}}}],["controllerarray?.foreach((controller",{"_index":95,"title":{},"body":{"classes/BasicService.html":{}}}],["controllerhandler",{"_index":108,"title":{"interfaces/ControllerHandler.html":{}},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{},"index.html":{}}}],["controllerhandler.handler",{"_index":192,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandler.method",{"_index":190,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandler.path",{"_index":191,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandlers",{"_index":183,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandlers.foreach((controllerhandler",{"_index":189,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllers",{"_index":54,"title":{},"body":{"classes/BasicService.html":{},"classes/ServiceComposer.html":{}}}],["convention",{"_index":341,"title":{},"body":{"index.html":{}}}],["conventional",{"_index":356,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":289,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["create",{"_index":39,"title":{},"body":{"classes/BasicService.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"index.html":{}}}],["createexpressserver",{"_index":239,"title":{},"body":{"classes/ServerFactory.html":{}}}],["createrouterforcontroller(controller",{"_index":179,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["creates",{"_index":58,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["createserver",{"_index":230,"title":{},"body":{"classes/ServerFactory.html":{}}}],["createserver(type",{"_index":231,"title":{},"body":{"classes/ServerFactory.html":{}}}],["createservice",{"_index":263,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["createservice(service",{"_index":265,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["critical",{"_index":347,"title":{},"body":{"index.html":{}}}],["customization",{"_index":358,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":268,"title":{},"body":{"classes/ServiceComposer.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["decorator's",{"_index":10,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["decorators",{"_index":262,"title":{},"body":{"classes/ServiceComposer.html":{},"index.html":{}}}],["default",{"_index":140,"title":{},"body":{"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["default_swagger_location",{"_index":142,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["default_swagger_path",{"_index":141,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["default_swagger_url",{"_index":161,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["defined",{"_index":56,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{}}}],["delete",{"_index":113,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["delete(path",{"_index":325,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dependencies",{"_index":307,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":365,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["dictionary",{"_index":157,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["direcotry",{"_index":143,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["directory",{"_index":288,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["docs",{"_index":160,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["docspath",{"_index":277,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["documentation",{"_index":290,"title":{},"body":{"coverage.html":{}}}],["enable/disable",{"_index":286,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["enum",{"_index":109,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ServerFactory.html":{}}}],["enumerations",{"_index":314,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error('controller",{"_index":172,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["eslint",{"_index":412,"title":{},"body":{"index.html":{}}}],["essential",{"_index":352,"title":{},"body":{"index.html":{}}}],["examples",{"_index":395,"title":{},"body":{"index.html":{}}}],["execute",{"_index":42,"title":{},"body":{"classes/BasicService.html":{},"index.html":{}}}],["experiments72/basic",{"_index":378,"title":{},"body":{"index.html":{}}}],["export",{"_index":26,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["expose",{"_index":138,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["express",{"_index":121,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"interfaces/ServiceConfig.html":{},"dependencies.html":{}}}],["express.router",{"_index":180,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["expressserver",{"_index":118,"title":{"classes/ExpressServer.html":{}},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"coverage.html":{}}}],["extend",{"_index":38,"title":{},"body":{"classes/BasicService.html":{}}}],["extends",{"_index":104,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"index.html":{}}}],["extens",{"_index":332,"title":{},"body":{"miscellaneous/functions.html":{}}}],["facotry",{"_index":234,"title":{},"body":{"classes/ServerFactory.html":{}}}],["factory",{"_index":229,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["factory.ts",{"_index":227,"title":{},"body":{"classes/ServerFactory.html":{},"coverage.html":{},"unit-test.html":{}}}],["factory.ts:35",{"_index":233,"title":{},"body":{"classes/ServerFactory.html":{}}}],["false",{"_index":90,"title":{},"body":{"classes/BasicService.html":{}}}],["features",{"_index":350,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"unit-test.html":{}}}],["follows",{"_index":343,"title":{},"body":{"index.html":{}}}],["found",{"_index":185,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["function",{"_index":63,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":319,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"unit-test.html":{}}}],["get('/ping",{"_index":394,"title":{},"body":{"index.html":{}}}],["get(path",{"_index":326,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getinstance",{"_index":247,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["getinstance(type",{"_index":249,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["getting",{"_index":333,"title":{"index.html":{}},"body":{}}],["handler",{"_index":116,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"index.html":{}}}],["handlers",{"_index":106,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/ServerApplication.html":{},"index.html":{}}}],["http",{"_index":154,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["icontroller",{"_index":388,"title":{},"body":{"index.html":{}}}],["id",{"_index":107,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["identifier",{"_index":291,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":114,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{}}}],["implement",{"_index":336,"title":{},"body":{"index.html":{}}}],["implements",{"_index":123,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"index.html":{}}}],["import",{"_index":22,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indexable",{"_index":210,"title":{},"body":{"interfaces/RouterControllerMap.html":{}}}],["indicates",{"_index":361,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{}}}],["installation",{"_index":373,"title":{},"body":{"index.html":{}}}],["instance",{"_index":246,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{},"overview.html":{}}}],["jest",{"_index":408,"title":{},"body":{"index.html":{}}}],["js",{"_index":404,"title":{},"body":{"index.html":{}}}],["key",{"_index":159,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["keyof",{"_index":117,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["lines",{"_index":420,"title":{},"body":{"unit-test.html":{}}}],["lint",{"_index":411,"title":{},"body":{"index.html":{}}}],["linter",{"_index":413,"title":{},"body":{"index.html":{}}}],["list",{"_index":62,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["listen",{"_index":50,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"index.html":{}}}],["listen(port",{"_index":145,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["listening",{"_index":280,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["literal",{"_index":211,"title":{},"body":{"interfaces/RouterControllerMap.html":{}}}],["location",{"_index":136,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["major",{"_index":354,"title":{},"body":{"index.html":{}}}],["marks",{"_index":323,"title":{},"body":{"miscellaneous/functions.html":{}}}],["matching",{"_index":28,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"unit-test.html":{}}}],["matter",{"_index":372,"title":{},"body":{"index.html":{}}}],["method",{"_index":15,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["methods",{"_index":47,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{}}}],["microservice",{"_index":36,"title":{},"body":{"classes/BasicService.html":{}}}],["microservices",{"_index":337,"title":{},"body":{"index.html":{}}}],["middleware",{"_index":134,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["minor",{"_index":349,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":313,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mixed",{"_index":399,"title":{},"body":{"index.html":{}}}],["module",{"_index":335,"title":{},"body":{"index.html":{}}}],["modules",{"_index":414,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":223,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["morgan",{"_index":151,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"dependencies.html":{}}}],["name",{"_index":60,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"miscellaneous/functions.html":{}}}],["needed",{"_index":369,"title":{},"body":{"index.html":{}}}],["new",{"_index":40,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["nodejs",{"_index":375,"title":{},"body":{"index.html":{}}}],["non",{"_index":351,"title":{},"body":{"index.html":{}}}],["npm",{"_index":377,"title":{},"body":{"index.html":{}}}],["number",{"_index":146,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["object",{"_index":12,"title":{},"body":{"interfaces/ApiConfig.html":{},"index.html":{}}}],["one",{"_index":222,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["optional",{"_index":46,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["overview",{"_index":415,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":306,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":80,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{}}}],["parameters",{"_index":59,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"miscellaneous/functions.html":{}}}],["patch",{"_index":345,"title":{},"body":{"index.html":{}}}],["path",{"_index":16,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["perform",{"_index":407,"title":{},"body":{"index.html":{}}}],["ping",{"_index":390,"title":{},"body":{"index.html":{}}}],["pingcontroller",{"_index":389,"title":{},"body":{"index.html":{}}}],["pingservice",{"_index":382,"title":{},"body":{"index.html":{}}}],["pingservice({port",{"_index":397,"title":{},"body":{"index.html":{}}}],["pingservice.listen();useful",{"_index":400,"title":{},"body":{"index.html":{}}}],["pingservice.listen();with",{"_index":398,"title":{},"body":{"index.html":{}}}],["pingservice.run",{"_index":385,"title":{},"body":{"index.html":{}}}],["pong",{"_index":392,"title":{},"body":{"index.html":{}}}],["port",{"_index":148,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["post",{"_index":111,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["post(path",{"_index":327,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prepareswagger",{"_index":224,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["presents",{"_index":174,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["private",{"_index":78,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{}}}],["project",{"_index":342,"title":{},"body":{"index.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/ServiceConfig.html":{},"properties.html":{}}}],["property",{"_index":25,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["protected",{"_index":45,"title":{},"body":{"classes/BasicService.html":{},"index.html":{}}}],["provided",{"_index":330,"title":{},"body":{"miscellaneous/functions.html":{}}}],["public",{"_index":48,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"index.html":{}}}],["put",{"_index":112,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["put(path",{"_index":328,"title":{},"body":{"miscellaneous/functions.html":{}}}],["randomically",{"_index":284,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["rappresent",{"_index":215,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["rappresents",{"_index":8,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{}}}],["readonly",{"_index":79,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServiceComposer.html":{},"index.html":{}}}],["refactor(optional_scope",{"_index":360,"title":{},"body":{"index.html":{}}}],["refactoring",{"_index":363,"title":{},"body":{"index.html":{}}}],["release",{"_index":344,"title":{},"body":{"index.html":{}}}],["requests",{"_index":74,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["requirements",{"_index":374,"title":{},"body":{"index.html":{}}}],["res",{"_index":195,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["res.send(response",{"_index":199,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["response",{"_index":196,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["results",{"_index":27,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"unit-test.html":{}}}],["return",{"_index":181,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"index.html":{}}}],["returns",{"_index":71,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"miscellaneous/functions.html":{}}}],["router",{"_index":150,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"miscellaneous/functions.html":{}}}],["router/controller",{"_index":156,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["router[method](path",{"_index":193,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["routercontrollermap",{"_index":158,"title":{"interfaces/RouterControllerMap.html":{}},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{}}}],["run",{"_index":43,"title":{},"body":{"classes/BasicService.html":{},"index.html":{}}}],["select",{"_index":235,"title":{},"body":{"classes/ServerFactory.html":{}}}],["semantic",{"_index":338,"title":{},"body":{"index.html":{}}}],["server",{"_index":65,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["server.ts",{"_index":120,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{},"unit-test.html":{}}}],["server.ts:15",{"_index":212,"title":{},"body":{"interfaces/RouterControllerMap.html":{}}}],["server.ts:152",{"_index":137,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:46",{"_index":128,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:63",{"_index":147,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:70",{"_index":144,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:79",{"_index":133,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:88",{"_index":129,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server/interfaces",{"_index":77,"title":{},"body":{"classes/BasicService.html":{}}}],["server_method",{"_index":238,"title":{},"body":{"classes/ServerFactory.html":{}}}],["server_type",{"_index":232,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["server_type.express",{"_index":236,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["serverapplication",{"_index":76,"title":{"interfaces/ServerApplication.html":{}},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["serverfactory",{"_index":225,"title":{"classes/ServerFactory.html":{}},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["servers/express",{"_index":237,"title":{},"body":{"classes/ServerFactory.html":{}}}],["serversingleton",{"_index":75,"title":{"classes/ServerSingleton.html":{}},"body":{"classes/BasicService.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["serversingleton.getinstance(serviceconfig?.servertype",{"_index":85,"title":{},"body":{"classes/BasicService.html":{}}}],["servertype",{"_index":278,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["service",{"_index":41,"title":{},"body":{"classes/BasicService.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["service(serviceconfig",{"_index":331,"title":{},"body":{"miscellaneous/functions.html":{}}}],["service({port",{"_index":387,"title":{},"body":{"index.html":{}}}],["service.ts",{"_index":34,"title":{},"body":{"classes/BasicService.html":{},"coverage.html":{},"unit-test.html":{}}}],["service.ts:15",{"_index":64,"title":{},"body":{"classes/BasicService.html":{}}}],["service.ts:19",{"_index":57,"title":{},"body":{"classes/BasicService.html":{}}}],["service.ts:50",{"_index":68,"title":{},"body":{"classes/BasicService.html":{}}}],["service.ts:72",{"_index":73,"title":{},"body":{"classes/BasicService.html":{}}}],["service/basic",{"_index":33,"title":{},"body":{"classes/BasicService.html":{},"coverage.html":{},"unit-test.html":{}}}],["service/interfaces",{"_index":24,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ServerApplication.html":{},"classes/ServiceComposer.html":{}}}],["service/interfaces/controller",{"_index":155,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["service/interfaces/controller.ts",{"_index":102,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"unit-test.html":{}}}],["service/interfaces/service",{"_index":275,"title":{},"body":{"interfaces/ServiceConfig.html":{},"coverage.html":{}}}],["service/src/basic",{"_index":422,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/api.ts",{"_index":427,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/controller.ts",{"_index":429,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/service",{"_index":431,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/service.ts",{"_index":435,"title":{},"body":{"unit-test.html":{}}}],["service/src/server/server",{"_index":436,"title":{},"body":{"unit-test.html":{}}}],["service/src/server/servers/express",{"_index":439,"title":{},"body":{"unit-test.html":{}}}],["servicecomposer",{"_index":257,"title":{"classes/ServiceComposer.html":{}},"body":{"classes/ServiceComposer.html":{},"coverage.html":{}}}],["serviceconfig",{"_index":53,"title":{"interfaces/ServiceConfig.html":{}},"body":{"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":254,"title":{},"body":{"classes/ServerSingleton.html":{},"interfaces/ServiceConfig.html":{}}}],["shouldn't",{"_index":370,"title":{},"body":{"index.html":{}}}],["singleton",{"_index":244,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["singleton.ts",{"_index":242,"title":{},"body":{"classes/ServerSingleton.html":{},"coverage.html":{},"unit-test.html":{}}}],["singleton.ts:19",{"_index":253,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["singleton.ts:32",{"_index":250,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{}}}],["specified",{"_index":282,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["src",{"_index":381,"title":{},"body":{"index.html":{}}}],["src/.../api.ts",{"_index":320,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../controller.ts",{"_index":315,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../service.ts",{"_index":321,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/basic",{"_index":32,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/decorators/api.ts",{"_index":298,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/decorators/controller.ts",{"_index":300,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/decorators/interfaces/api.ts",{"_index":6,"title":{},"body":{"interfaces/ApiConfig.html":{},"coverage.html":{}}}],["src/decorators/service",{"_index":258,"title":{},"body":{"classes/ServiceComposer.html":{},"coverage.html":{}}}],["src/decorators/service.ts",{"_index":301,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/server/interfaces/server",{"_index":213,"title":{},"body":{"interfaces/ServerApplication.html":{},"coverage.html":{}}}],["src/server/server",{"_index":226,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"coverage.html":{}}}],["src/server/servers/express",{"_index":119,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{}}}],["start",{"_index":44,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServiceComposer.html":{}}}],["started",{"_index":334,"title":{"index.html":{}},"body":{}}],["statements",{"_index":292,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":228,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{}}}],["string",{"_index":21,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["structure",{"_index":103,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["swagger",{"_index":139,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"dependencies.html":{}}}],["swagger.json",{"_index":162,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerlocation",{"_index":279,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["swaggeroptions",{"_index":208,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerui",{"_index":152,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerui.serve",{"_index":206,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerui.setup(undefined",{"_index":207,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["t",{"_index":252,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["table",{"_index":305,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":304,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["test",{"_index":406,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{}}}],["tests",{"_index":410,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":368,"title":{},"body":{"index.html":{}}}],["this.addcontroller(controller",{"_index":97,"title":{},"body":{"classes/BasicService.html":{}}}],["this.addcontrollerhandlers(controller.id",{"_index":177,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app",{"_index":164,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/ServerSingleton.html":{}}}],["this.app.listen(port",{"_index":167,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use",{"_index":205,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(express.json",{"_index":165,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(express.static(location",{"_index":204,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(middleware",{"_index":169,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(morgan('tiny",{"_index":166,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(router",{"_index":178,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.attachcontrollers(this.controllers",{"_index":87,"title":{},"body":{"classes/BasicService.html":{}}}],["this.attachswaggertoserver",{"_index":86,"title":{},"body":{"classes/BasicService.html":{}}}],["this.controllers",{"_index":82,"title":{},"body":{"classes/BasicService.html":{}}}],["this.controllers.push(controller",{"_index":99,"title":{},"body":{"classes/BasicService.html":{},"classes/ServiceComposer.html":{}}}],["this.controllers?.length",{"_index":270,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["this.createrouterforcontroller(controller",{"_index":175,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.factory",{"_index":255,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["this.factory.createserver(type",{"_index":256,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["this.routercontrollermap[controller.id",{"_index":170,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid",{"_index":184,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller",{"_index":188,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.handlers",{"_index":200,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.handlers?.indexof(controllerhandler",{"_index":201,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.handlers?.push(controllerhandler",{"_index":203,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].router",{"_index":187,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.run",{"_index":101,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server",{"_index":84,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.server.addcontroller(controller",{"_index":96,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server.addswagger(this.serviceconfig?.docspath",{"_index":91,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server.listen(this.serviceconfig?.port",{"_index":100,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server?.close",{"_index":168,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.service",{"_index":269,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["this.service.attachcontrollers(this.controllers",{"_index":272,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["this.service.listen",{"_index":273,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["this.service?.attachcontrollers(controller",{"_index":274,"title":{},"body":{"classes/ServiceComposer.html":{}}}],["this.serviceconfig",{"_index":81,"title":{},"body":{"classes/BasicService.html":{}}}],["this.serviceconfig?.swagger",{"_index":89,"title":{},"body":{"classes/BasicService.html":{}}}],["this.serviceconfig?.swaggerlocation",{"_index":92,"title":{},"body":{"classes/BasicService.html":{}}}],["this[server_method[type",{"_index":241,"title":{},"body":{"classes/ServerFactory.html":{}}}],["throw",{"_index":171,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["trigger",{"_index":371,"title":{},"body":{"index.html":{}}}],["true",{"_index":287,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["tsoa",{"_index":311,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":18,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["type=server_type.express",{"_index":240,"title":{},"body":{"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{}}}],["typescript",{"_index":403,"title":{},"body":{"index.html":{}}}],["ui",{"_index":153,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"dependencies.html":{}}}],["unique",{"_index":245,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["unit",{"_index":409,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{}}}],["updated",{"_index":367,"title":{},"body":{"index.html":{}}}],["url",{"_index":209,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["usage",{"_index":379,"title":{},"body":{"index.html":{}}}],["use",{"_index":37,"title":{},"body":{"classes/BasicService.html":{},"classes/ServerSingleton.html":{},"index.html":{}}}],["used",{"_index":261,"title":{},"body":{"classes/ServiceComposer.html":{},"miscellaneous/functions.html":{}}}],["usefactory",{"_index":248,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["usefactory(factory",{"_index":251,"title":{},"body":{"classes/ServerSingleton.html":{}}}],["value",{"_index":110,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"classes/ServerFactory.html":{},"classes/ServerSingleton.html":{},"miscellaneous/enumerations.html":{}}}],["verb",{"_index":20,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["verbs",{"_index":318,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["version",{"_index":359,"title":{},"body":{"index.html":{},"properties.html":{}}}],["versioning",{"_index":339,"title":{},"body":{"index.html":{}}}],["versions",{"_index":346,"title":{},"body":{"index.html":{}}}],["void",{"_index":72,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"classes/ServerSingleton.html":{},"classes/ServiceComposer.html":{},"index.html":{}}}],["watch",{"_index":405,"title":{},"body":{"index.html":{}}}],["web",{"_index":281,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["without",{"_index":396,"title":{},"body":{"index.html":{}}}],["yes",{"_index":61,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{},"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiConfig.html":{"url":"interfaces/ApiConfig.html","title":"interface - ApiConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorators/interfaces/api.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresents the @API decorator's configuration object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         CONTROLLER_METHOD\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CONTROLLER_METHOD\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The verb of the API.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The path of the API\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CONTROLLER_METHOD } from '../../basic-service/interfaces';\n\n/**\n * Rappresents the @API decorator's configuration object.\n * @property {CONTROLLER_METHOD} method\n * @property {string} path\n */\nexport interface ApiConfig {\n    /**\n     * The verb of the API.\n     */\n    method: CONTROLLER_METHOD;\n\n    /**\n     * The path of the API\n     */\n    path: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BasicService.html":{"url":"classes/BasicService.html","title":"class - BasicService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BasicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/basic-service.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresents the basic class to build a microservice. Just use this class or extend it to create a new service and execute the method run to start it.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Optional\n                                run\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attachControllers\n                            \n                            \n                                    Public\n                                listen\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(serviceConfig?: ServiceConfig, controllers?: Controller | Controller[])\n                    \n                \n                        \n                            \n                                Defined in src/basic-service/basic-service.ts:19\n                            \n                        \n\n                \n                    \n                            Creates a new BasicService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        serviceConfig\n                                                  \n                                                        \n                                                                        ServiceConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nThe service configuration.\n\n\n                                                        \n                                                \n                                                \n                                                        controllers\n                                                  \n                                                        \n                                                                        Controller | Controller[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nThe list of controllers.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        run\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/basic-service/basic-service.ts:15\n                        \n                    \n\n            \n                \n                    Optional On Server Listen callback\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attachControllers\n                        \n                    \n                \n            \n            \n                \n                    \n                    attachControllers(controllers?: Controller | Controller[])\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/basic-service.ts:50\n                \n            \n\n\n            \n                \n                    Allow to attach new controllers to the server.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    controllers\n                                    \n                                                Controller | Controller[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe list of controllers.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        listen\n                        \n                    \n                \n            \n            \n                \n                    \n                    listen()\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/basic-service.ts:72\n                \n            \n\n\n            \n                \n                    Allow the service to start listen for requests.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServiceConfig, Controller } from './interfaces';\nimport { ServerSingleton } from '../server';\nimport { ServerApplication } from '../server/interfaces';\n\n/**\n * Rappresents the basic class to build a microservice. Just use this class or extend it to create a new service and execute the method run to start it.\n */\nexport class BasicService{\n\n    /**\n     * Optional On Server Listen callback\n     *\n     * @protected\n     */\n    protected run?: ()=> void;\n\n    private readonly server: ServerApplication;\n    private readonly serviceConfig?: ServiceConfig;\n    private controllers?: Controller[] = [];\n\n    /**\n     * Creates a new BasicService.\n     * @param {ServiceConfig} [serviceConfig] - The service configuration.\n     * @param {Controller| Controller[]} [controllers] - The list of controllers.\n     */\n    public constructor(serviceConfig?: ServiceConfig, controllers?: Controller| Controller[]) {\n        if (serviceConfig){\n            this.serviceConfig = serviceConfig;\n        }\n\n        if (controllers){\n            this.controllers = Array.isArray(controllers) ? controllers : [controllers];\n        }\n\n        this.server = ServerSingleton.getInstance(serviceConfig?.serverType);\n        this.attachSwaggerToServer();\n        this.attachControllers(this.controllers);\n    }\n\n    private attachSwaggerToServer(): void {\n        if (this.serviceConfig?.swagger !== false){\n            this.server.addSwagger(this.serviceConfig?.docsPath, this.serviceConfig?.swaggerLocation);\n        }\n    }\n\n    /**\n     * Allow to attach new controllers to the server.\n     * @param {Controller | Controller[]} [controllers] - The list of controllers.\n     */\n    public attachControllers(controllers?: Controller | Controller[]): void {\n        if (controllers){\n            const controllerArray = Array.isArray(controllers) ? controllers : [controllers];\n\n            controllerArray?.forEach((controller: Controller): void => {\n                this.server.addController(controller);\n                this.addController(controller);\n            });\n        }\n    }\n\n    private addController(controller: Controller): void {\n        if (!this.controllers){\n            this.controllers = [];\n        }\n\n        this.controllers.push(controller);\n    }\n\n    /**\n     * Allow the service to start listen for requests.\n     */\n    public listen(): void {\n        this.server.listen(this.serviceConfig?.port, this.run);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Controller.html":{"url":"interfaces/Controller.html","title":"interface - Controller","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Controller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/interfaces/controller.ts\n        \n\n\n            \n                Description\n            \n            \n                The controller structure.\n\n            \n\n            \n                Extends\n            \n            \n                    ActionsDictionary\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            handlers\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handlers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handlers:         ControllerHandler[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ControllerHandler[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The handlers' list.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The controller name.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export enum CONTROLLER_METHOD {\n    /** @value get */\n    GET = 'get',\n    /** @value post */\n    POST = 'post',\n    /** @value put */\n    PUT = 'put',\n    /** @value delete */\n    DELETE = 'delete'\n}\n\n/**\n * @ignore\n */\nexport interface ActionsDictionary {\n    [actionName: string]: any;\n}\n\n/**\n * The controller structure.\n *\n * @property {string} name\n * @property {ControllerHandler[]} [handler]\n */\nexport interface Controller extends ActionsDictionary{\n\n    /**\n     * The controller name.\n     */\n    id: string;\n\n    /**\n     * The handlers' list.\n     */\n    handlers?: ControllerHandler[];\n}\n\n/**\n * The controller handler structure.\n *\n * @property {CONTROLLER_METHOD} method\n * @property {string} path\n * @property {string} handler\n */\nexport interface ControllerHandler {\n\n    /**\n     * The verb of the handler.\n     */\n    method: CONTROLLER_METHOD;\n\n    /**\n     * The path of the handler.\n     */\n    path: string;\n\n    /**\n     * The handler name.\n     */\n    handler: keyof ActionsDictionary;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ControllerHandler.html":{"url":"interfaces/ControllerHandler.html","title":"interface - ControllerHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ControllerHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/interfaces/controller.ts\n        \n\n\n            \n                Description\n            \n            \n                The controller handler structure.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            handler\n                                        \n                                \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handler:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    The handler name.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         CONTROLLER_METHOD\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CONTROLLER_METHOD\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The verb of the handler.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The path of the handler.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export enum CONTROLLER_METHOD {\n    /** @value get */\n    GET = 'get',\n    /** @value post */\n    POST = 'post',\n    /** @value put */\n    PUT = 'put',\n    /** @value delete */\n    DELETE = 'delete'\n}\n\n/**\n * @ignore\n */\nexport interface ActionsDictionary {\n    [actionName: string]: any;\n}\n\n/**\n * The controller structure.\n *\n * @property {string} name\n * @property {ControllerHandler[]} [handler]\n */\nexport interface Controller extends ActionsDictionary{\n\n    /**\n     * The controller name.\n     */\n    id: string;\n\n    /**\n     * The handlers' list.\n     */\n    handlers?: ControllerHandler[];\n}\n\n/**\n * The controller handler structure.\n *\n * @property {CONTROLLER_METHOD} method\n * @property {string} path\n * @property {string} handler\n */\nexport interface ControllerHandler {\n\n    /**\n     * The verb of the handler.\n     */\n    method: CONTROLLER_METHOD;\n\n    /**\n     * The path of the handler.\n     */\n    path: string;\n\n    /**\n     * The handler name.\n     */\n    handler: keyof ActionsDictionary;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressServer.html":{"url":"classes/ExpressServer.html","title":"class - ExpressServer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressServer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/servers/express-server.ts\n        \n\n\n            \n                Description\n            \n            \n                The Express server abstraction class.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ServerApplication\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addController\n                            \n                            \n                                    Public\n                                addMiddleware\n                            \n                            \n                                    Public\n                                addSwagger\n                            \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                listen\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/server/servers/express-server.ts:46\n                            \n                        \n\n                \n                    \n                            Creates a new ExpressServer.\n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addController\n                        \n                    \n                \n            \n            \n                \n                    \n                    addController(controller: Controller)\n                \n            \n\n\n            \n                \n                    Defined in src/server/servers/express-server.ts:88\n                \n            \n\n\n            \n                \n                    Add API controller\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    controller\n                                    \n                                                Controller\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addMiddleware\n                        \n                    \n                \n            \n            \n                \n                    \n                    addMiddleware(middleware: (args: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/server/servers/express-server.ts:79\n                \n            \n\n\n            \n                \n                    Add middleware to the server.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    middleware\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addSwagger\n                        \n                    \n                \n            \n            \n                \n                    \n                    addSwagger(path: string, location: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/servers/express-server.ts:152\n                \n            \n\n\n            \n                \n                    Expose the swagger API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_SWAGGER_PATH\n                                    \n\n                                    \n                                        \nthe path of the swagger api.\n\n\n                                    \n                                \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_SWAGGER_LOCATION\n                                    \n\n                                    \n                                        \nthe direcotry of the swagger.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in src/server/servers/express-server.ts:70\n                \n            \n\n\n            \n                \n                    Close the server.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        listen\n                        \n                    \n                \n            \n            \n                \n                    \n                    listen(port?: string | number, callback?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/server/servers/express-server.ts:63\n                \n            \n\n\n            \n                \n                    Allow the server to start listen for requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe listen port of the server.\n\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe on listen callback.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express, { Application, Router } from 'express';\nimport morgan from 'morgan';\nimport swaggerUi from 'swagger-ui-express';\nimport { Server } from 'http';\n\nimport { ServerApplication } from '../interfaces';\nimport { Controller, ControllerHandler } from '../../basic-service/interfaces/controller';\n\n/**\n * Router/Controller Dictionary\n *\n * @property {Router} router - the express Router\n * @property {Controller} controller\n */\ninterface RouterControllerMap {\n    [key: string]: {\n        router: Router;\n        controller: Controller;\n    }\n}\n\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_PATH = '/docs';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_LOCATION = 'swagger';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_URL = '/swagger.json';\n\n/**\n * The Express server abstraction class.\n *\n * @implements {ServerApplication}\n */\nexport class ExpressServer implements ServerApplication {\n\n    private readonly app: Application;\n\n    private server: Server;\n\n    private routerControllerMap: RouterControllerMap = {};\n\n    /**\n     * Creates a new ExpressServer.\n     */\n    public constructor() {\n        this.app = express();\n        this.app.use(express.json());\n        this.app.use(morgan('tiny'));\n    }\n\n    /**\n     * Allow the server to start listen for requests.\n     *\n     * @param {(string | number)} [port] - the listen port of the server.\n     * @param {Function} [callback] - the on listen callback.\n     */\n    public listen(port?: string | number, callback?: () => void): void {\n        this.server = this.app.listen(port, callback);\n    }\n\n    /**\n     * Close the server.\n     */\n    public close(): void {\n        this.server?.close();\n    }\n\n    /**\n     * Add middleware to the server.\n     *\n     * @param {Function} middleware\n     */\n    public addMiddleware(middleware: (...args: any) => void): void {\n        this.app.use(middleware);\n    }\n\n    /**\n     * Add API controller\n     *\n     * @param {Controller} controller\n     */\n    public addController(controller: Controller): void {\n        if (this.routerControllerMap[controller.id]) {\n            throw new Error('controller already presents');\n        }\n\n        const router = this.createRouterForController(controller);\n\n        if (controller.handlers) {\n            this.addControllerHandlers(controller.id, controller.handlers);\n        }\n\n        this.app.use(router);\n    }\n\n    private createRouterForController(controller: Controller): Router {\n        const router = express.Router();\n\n        this.routerControllerMap[controller.id] = {\n            router: router,\n            controller: controller\n        };\n\n        return router;\n    }\n\n    private addControllerHandlers(controllerid: string, controllerHandlers: ControllerHandler | ControllerHandler[]): void {\n        if (!this.routerControllerMap[controllerid]) {\n            throw new Error('controller not found');\n        }\n\n        if (!Array.isArray(controllerHandlers)){\n            controllerHandlers = [controllerHandlers];\n        }\n\n        const router = this.routerControllerMap[controllerid].router;\n        const controller = this.routerControllerMap[controllerid].controller;\n\n        controllerHandlers.forEach((controllerHandler: ControllerHandler): void => {\n            const method = controllerHandler.method;\n            const path = controllerHandler.path;\n            const handler = controllerHandler.handler;\n\n            router[method](path, async(req: any, res: any) => {\n                const response = await controller[handler]?.(req);\n\n                return res.send(response);\n            });\n\n            if (!this.routerControllerMap[controllerid].controller.handlers){\n                this.routerControllerMap[controllerid].controller.handlers = [];\n            }\n\n            if (this.routerControllerMap[controllerid].controller.handlers?.indexOf(controllerHandler) === -1){\n                this.routerControllerMap[controllerid].controller.handlers?.push(controllerHandler);\n            }\n        });\n    }\n\n    /**\n     * Expose the swagger API.\n     *\n     * @param {string} [path] - the path of the swagger api.\n     * @param {string} [location] -  the direcotry of the swagger.\n     */\n    public addSwagger(path: string = DEFAULT_SWAGGER_PATH, location: string = DEFAULT_SWAGGER_LOCATION): void {\n        this.app.use(express.static(location));\n        this.app.use(\n            path,\n            swaggerUi.serve,\n            swaggerUi.setup(undefined, {\n                swaggerOptions: {\n                    url: DEFAULT_SWAGGER_URL,\n                }\n            })\n        );\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RouterControllerMap.html":{"url":"interfaces/RouterControllerMap.html","title":"interface - RouterControllerMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RouterControllerMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/servers/express-server.ts\n        \n\n\n            \n                Description\n            \n            \n                Router/Controller Dictionary\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/server/servers/express-server.ts:15\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import express, { Application, Router } from 'express';\nimport morgan from 'morgan';\nimport swaggerUi from 'swagger-ui-express';\nimport { Server } from 'http';\n\nimport { ServerApplication } from '../interfaces';\nimport { Controller, ControllerHandler } from '../../basic-service/interfaces/controller';\n\n/**\n * Router/Controller Dictionary\n *\n * @property {Router} router - the express Router\n * @property {Controller} controller\n */\ninterface RouterControllerMap {\n    [key: string]: {\n        router: Router;\n        controller: Controller;\n    }\n}\n\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_PATH = '/docs';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_LOCATION = 'swagger';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_URL = '/swagger.json';\n\n/**\n * The Express server abstraction class.\n *\n * @implements {ServerApplication}\n */\nexport class ExpressServer implements ServerApplication {\n\n    private readonly app: Application;\n\n    private server: Server;\n\n    private routerControllerMap: RouterControllerMap = {};\n\n    /**\n     * Creates a new ExpressServer.\n     */\n    public constructor() {\n        this.app = express();\n        this.app.use(express.json());\n        this.app.use(morgan('tiny'));\n    }\n\n    /**\n     * Allow the server to start listen for requests.\n     *\n     * @param {(string | number)} [port] - the listen port of the server.\n     * @param {Function} [callback] - the on listen callback.\n     */\n    public listen(port?: string | number, callback?: () => void): void {\n        this.server = this.app.listen(port, callback);\n    }\n\n    /**\n     * Close the server.\n     */\n    public close(): void {\n        this.server?.close();\n    }\n\n    /**\n     * Add middleware to the server.\n     *\n     * @param {Function} middleware\n     */\n    public addMiddleware(middleware: (...args: any) => void): void {\n        this.app.use(middleware);\n    }\n\n    /**\n     * Add API controller\n     *\n     * @param {Controller} controller\n     */\n    public addController(controller: Controller): void {\n        if (this.routerControllerMap[controller.id]) {\n            throw new Error('controller already presents');\n        }\n\n        const router = this.createRouterForController(controller);\n\n        if (controller.handlers) {\n            this.addControllerHandlers(controller.id, controller.handlers);\n        }\n\n        this.app.use(router);\n    }\n\n    private createRouterForController(controller: Controller): Router {\n        const router = express.Router();\n\n        this.routerControllerMap[controller.id] = {\n            router: router,\n            controller: controller\n        };\n\n        return router;\n    }\n\n    private addControllerHandlers(controllerid: string, controllerHandlers: ControllerHandler | ControllerHandler[]): void {\n        if (!this.routerControllerMap[controllerid]) {\n            throw new Error('controller not found');\n        }\n\n        if (!Array.isArray(controllerHandlers)){\n            controllerHandlers = [controllerHandlers];\n        }\n\n        const router = this.routerControllerMap[controllerid].router;\n        const controller = this.routerControllerMap[controllerid].controller;\n\n        controllerHandlers.forEach((controllerHandler: ControllerHandler): void => {\n            const method = controllerHandler.method;\n            const path = controllerHandler.path;\n            const handler = controllerHandler.handler;\n\n            router[method](path, async(req: any, res: any) => {\n                const response = await controller[handler]?.(req);\n\n                return res.send(response);\n            });\n\n            if (!this.routerControllerMap[controllerid].controller.handlers){\n                this.routerControllerMap[controllerid].controller.handlers = [];\n            }\n\n            if (this.routerControllerMap[controllerid].controller.handlers?.indexOf(controllerHandler) === -1){\n                this.routerControllerMap[controllerid].controller.handlers?.push(controllerHandler);\n            }\n        });\n    }\n\n    /**\n     * Expose the swagger API.\n     *\n     * @param {string} [path] - the path of the swagger api.\n     * @param {string} [location] -  the direcotry of the swagger.\n     */\n    public addSwagger(path: string = DEFAULT_SWAGGER_PATH, location: string = DEFAULT_SWAGGER_LOCATION): void {\n        this.app.use(express.static(location));\n        this.app.use(\n            path,\n            swaggerUi.serve,\n            swaggerUi.setup(undefined, {\n                swaggerOptions: {\n                    url: DEFAULT_SWAGGER_URL,\n                }\n            })\n        );\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServerApplication.html":{"url":"interfaces/ServerApplication.html","title":"interface - ServerApplication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServerApplication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/interfaces/server-application.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresent the Server application.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addController\n                                    \n                                \n                                \n                                    \n                                        addMiddleware\n                                    \n                                \n                                \n                                    \n                                        addSwagger\n                                    \n                                \n                                \n                                    \n                                        close\n                                    \n                                \n                                \n                                    \n                                        listen\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addController\n                        \n                    \n                \n            \n            \n                \naddController(controller: Controller)\n                \n            \n\n\n            \n                \n                    Defined in src/server/interfaces/server-application.ts:38\n                \n            \n\n\n            \n                \n                    Add API controller\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    controller\n                                    \n                                                Controller\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addMiddleware\n                        \n                    \n                \n            \n            \n                \naddMiddleware(middleware: (args: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/server/interfaces/server-application.ts:31\n                \n            \n\n\n            \n                \n                    Add middleware to the server.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    middleware\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addSwagger\n                        \n                    \n                \n            \n            \n                \naddSwagger(path?: string, location?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/interfaces/server-application.ts:46\n                \n            \n\n\n            \n                \n                    Expose the swagger API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe path of the swagger api.\n\n\n                                    \n                                \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe direcotry of the swagger.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/server/interfaces/server-application.ts:24\n                \n            \n\n\n            \n                \n                    Close the server.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(port?: string | number, callback?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/server/interfaces/server-application.ts:19\n                \n            \n\n\n            \n                \n                    Allow the server to start listen for requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe listen port of the server.\n\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe on listen callback.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Controller } from '../../basic-service/interfaces';\n\n/**\n * Rappresent the Server application.\n * @property {Function} listen - Allow the server to start listen for requests.\n * @property {Function} close - Close the server.\n * @property {Function} addMiddleware - Add middleware to the server.\n * @property {Function} addController - Add API controller.\n * @property {Function} addControllerHandlers - Add one or more API controller handlers.\n * @property {Function} prepareSwagger - Expose the swagger API.\n */\nexport interface ServerApplication {\n    /**\n     * Allow the server to start listen for requests.\n     *\n     * @param {(string | number)} [port] - the listen port of the server.\n     * @param {Function} [callback] - the on listen callback.\n     */\n    listen(port?: string | number, callback?: () => void): void;\n\n    /**\n     * Close the server.\n     */\n    close(): void;\n\n    /**\n     * Add middleware to the server.\n     *\n     * @param {Function} middleware\n     */\n    addMiddleware(middleware: (...args: any) => void): void\n\n    /**\n     * Add API controller\n     *\n     * @param {Controller} controller\n     */\n    addController(controller: Controller): void;\n\n    /**\n     * Expose the swagger API.\n     *\n     * @param {string} [path] - the path of the swagger api.\n     * @param {string} [location] -  the direcotry of the swagger.\n     */\n    addSwagger(path?: string, location?: string): void;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServerFactory.html":{"url":"classes/ServerFactory.html","title":"class - ServerFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServerFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/server-factory.ts\n        \n\n\n            \n                Description\n            \n            \n                Static factory class to create a server application.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createServer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createServer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createServer(type: SERVER_TYPE)\n                \n            \n\n\n            \n                \n                    Defined in src/server/server-factory.ts:35\n                \n            \n\n\n            \n                \n                    Facotry method that allow to select application the server type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            SERVER_TYPE\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        SERVER_TYPE.EXPRESS\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ServerApplication\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServerApplication } from './interfaces';\nimport { ExpressServer } from './servers/express-server';\n\n/**\n * @ignore\n */\nexport enum SERVER_TYPE {\n    /** @value EXPRESS */\n    EXPRESS = 'EXPRESS'\n}\n\n/**\n * @ignore\n */\nenum SERVER_METHOD {\n    EXPRESS = 'createExpressServer'\n}\n\n/**\n * Static factory class to create a server application.\n */\nexport class ServerFactory {\n\n    private createExpressServer(): ServerApplication {\n        return new ExpressServer();\n    }\n\n    /**\n     * Facotry method that allow to select application the server type.\n     *\n     * @static\n     * @param {SERVER_TYPE} [type=SERVER_TYPE.EXPRESS]\n     * @return {ServerApplication}\n     */\n    public createServer(type: SERVER_TYPE = SERVER_TYPE.EXPRESS): ServerApplication {\n        return this[SERVER_METHOD[type || SERVER_TYPE.EXPRESS]]();\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServerSingleton.html":{"url":"classes/ServerSingleton.html","title":"class - ServerSingleton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServerSingleton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/server-singleton.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract static singleton class to create an unique server instance.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                    Static\n                                useFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getInstance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance(type: SERVER_TYPE)\n                \n            \n\n\n            \n                \n                    Defined in src/server/server-singleton.ts:32\n                \n            \n\n\n            \n                \n                    Singleton method that return the unique server application instance.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            SERVER_TYPE\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        SERVER_TYPE.EXPRESS\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ServerApplication\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        useFactory\n                        \n                    \n                \n            \n            \n                \n                    \n                    useFactory(factory: T)\n                \n            \n\n\n            \n                \n                    Defined in src/server/server-singleton.ts:19\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Allow to set the factory class to use to build the server application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    factory\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServerApplication } from './interfaces';\nimport { ServerFactory, SERVER_TYPE } from './server-factory';\n\n/**\n * Abstract static singleton class to create an unique server instance.\n *\n * @abstract\n */\nexport abstract class ServerSingleton{\n\n    private static app: ServerApplication;\n    private static factory: ServerFactory = new ServerFactory();\n\n    /**\n     * Allow to set the factory class to use to build the server application.\n     *\n     * @static\n     */\n    public static useFactory(factory: T): void {\n        if (!this.app){\n            this.factory = factory;\n        }\n    }\n\n    /**\n     * Singleton method that return the unique server application instance.\n     *\n     * @static\n     * @param {SERVER_TYPE} [type=SERVER_TYPE.EXPRESS]\n     * @return {ServerApplication}\n     */\n    public static getInstance(type: SERVER_TYPE = SERVER_TYPE.EXPRESS): ServerApplication{\n        if (!this.app){\n            this.app = this.factory.createServer(type);\n        }\n\n        return this.app;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServiceComposer.html":{"url":"classes/ServiceComposer.html","title":"class - ServiceComposer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServiceComposer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorators/service-composer.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract service builder class used in decorators.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                addController\n                            \n                            \n                                    Static\n                                createService\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        addController\n                        \n                    \n                \n            \n            \n                \n                    \n                    addController(controller: Controller)\n                \n            \n\n\n            \n                \n                    Defined in src/decorators/service-composer.ts:38\n                \n            \n\n\n            \n                \n                    Attach a controller to the service\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    controller\n                                    \n                                                Controller\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        createService\n                        \n                    \n                \n            \n            \n                \n                    \n                    createService(service: BasicService)\n                \n            \n\n\n            \n                \n                    Defined in src/decorators/service-composer.ts:21\n                \n            \n\n\n            \n                \n                    Create and start the service with controllers configured by decorator\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                                BasicService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BasicService } from '../basic-service';\nimport { Controller } from '../basic-service/interfaces';\n\n/**\n * Abstract service builder class used in decorators.\n *\n * @export\n * @abstract\n */\nexport abstract class ServiceComposer {\n\n    private static readonly controllers: Controller[] = [];\n    private static service: BasicService;\n\n    /**\n     * Create and start the service with controllers configured by decorator\n     *\n     * @static\n     * @param {BasicService} service\n     */\n    public static createService(service: BasicService): void {\n        if (!this.service){\n            this.service = service;\n            if (this.controllers?.length > 0){\n                this.service.attachControllers(this.controllers);\n            }\n\n            this.service.listen();\n        }\n    }\n\n    /**\n     * Attach a controller to the service\n     *\n     * @static\n     * @param {Controller} controller\n     */\n    public static addController(controller: Controller): void{\n        this.controllers.push(controller);\n        this.service?.attachControllers(controller);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServiceConfig.html":{"url":"interfaces/ServiceConfig.html","title":"interface - ServiceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServiceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/interfaces/service-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresents the basic service configuration.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            docsPath\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            port\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            serverType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            swagger\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            swaggerLocation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        docsPath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        docsPath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The path of the swagger api.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The listening port of the web server. if not specified the port is chosen randomically.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        serverType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        serverType:     SERVER_TYPE\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SERVER_TYPE\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the server application type. Default: EXPRESS\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        swagger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        swagger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Allow to enable/disable the swagger api. Default: true.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        swaggerLocation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        swaggerLocation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The directory location of the swagger.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { SERVER_TYPE } from '../../server';\n\n/**\n * Rappresents the basic service configuration.\n * @property {string | number} [port]\n * @property {string} [docsPath]\n * @property {string} [swaggerLocation]\n * @property {boolean} [swagger]\n */\nexport interface ServiceConfig {\n\n    /**\n     * The listening port of the web server. if not specified the port is chosen randomically.\n     */\n    port?: string | number;\n\n    /**\n     * The path of the swagger api.\n     */\n    docsPath?: string;\n\n    /**\n     * The directory location of the swagger.\n     */\n    swaggerLocation?: string;\n\n    /**\n     * Allow to enable/disable the swagger api. Default: true.\n     */\n    swagger?: boolean;\n\n    /**\n     * Set the server application type. Default: EXPRESS\n     */\n    serverType?: SERVER_TYPE\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/basic-service/basic-service.ts\n            \n            class\n            BasicService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/basic-service/interfaces/controller.ts\n            \n            interface\n            Controller\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/basic-service/interfaces/controller.ts\n            \n            interface\n            ControllerHandler\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/basic-service/interfaces/service-config.ts\n            \n            interface\n            ServiceConfig\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            API\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            DELETE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            GET\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            POST\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            PUT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/controller.ts\n            \n            function\n            Controller\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/interfaces/api.ts\n            \n            interface\n            ApiConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/decorators/service-composer.ts\n            \n            class\n            ServiceComposer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/decorators/service.ts\n            \n            function\n            Service\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/interfaces/server-application.ts\n            \n            interface\n            ServerApplication\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/server/server-factory.ts\n            \n            class\n            ServerFactory\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/server/server-singleton.ts\n            \n            class\n            ServerSingleton\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/server/servers/express-server.ts\n            \n            class\n            ExpressServer\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/server/servers/express-server.ts\n            \n            interface\n            RouterControllerMap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            express : ^4.18.2\n        \n            morgan : ^1.10.0\n        \n            swagger-ui-express : ^4.6.0\n        \n            tsoa : ^5.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CONTROLLER_METHOD   (src/.../controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/basic-service/interfaces/controller.ts\n    \n        \n            \n                \n                    \n                        \n                        CONTROLLER_METHOD\n                    \n                \n                    \n                        \n                            Contains the available verbs for the service.\n\n                        \n                    \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : get\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : put\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API   (src/.../api.ts)\n                        \n                        \n                            Controller   (src/.../controller.ts)\n                        \n                        \n                            DELETE   (src/.../api.ts)\n                        \n                        \n                            GET   (src/.../api.ts)\n                        \n                        \n                            POST   (src/.../api.ts)\n                        \n                        \n                            PUT   (src/.../api.ts)\n                        \n                        \n                            Service   (src/.../service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators/api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API\n                        \n                    \n                \n            \n            \n                \nAPI(config: ApiConfig)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as an API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                ApiConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe configuration of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DELETE\n                        \n                    \n                \n            \n            \n                \nDELETE(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a DELETE API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GET\n                        \n                    \n                \n            \n            \n                \nGET(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a GET API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POST\n                        \n                    \n                \n            \n            \n                \nPOST(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a POST API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUT\n                        \n                    \n                \n            \n            \n                \nPUT(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a PUT API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/decorators/controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Controller\n                        \n                    \n                \n            \n            \n                \nController(id?: string, service?: BasicService)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a class as a controller.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe name of the controller. Will be used as router. If not provided will be used the name of the class.\n\n\n                                    \n                                \n                                \n                                    service\n                                    \n                                                BasicService\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/decorators/service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Service\n                        \n                    \n                \n            \n            \n                \nService(serviceConfig?: ServiceConfig)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a class as a service. The class must extens BasicService\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    serviceConfig\n                                    \n                                                ServiceConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe service configuration.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBasic Service\n\n\n\n\n\nThis is a basic service module to implement microservices.\nSemantic Versioning & Commit Convention\nThis project follows semantic versioning.\nWe release patch versions for critical bugfixes, minor versions for new features or non-essential changes, and major\nversions for any breaking changes.\nThis project also follows the conventional commit convention with some\nadditional customization:\nPatch version changes\n\nrefactor(optional_scope) - indicates a code refactoring.\nchore(deps): indicates some dependency has been added / updated and therefore a new release is needed.\nno-release: indicates the commit shouldn't trigger a release no matter what.\n\nInstallation / Requirements\nNodejs >= 18\nnpm i @experiments72/basic-service\nUsage\nService bootstrap\nCreate BasicService object and execute run method:\nimport { BasicService } from '../../src';\n\nconst pingService = new BasicService({port: 3000});\n\npingService.run(() => {\n    console.log('server listen on port 3000');\n});or use the decorator\n@Service({port: 3000})\nclass PingService extends BasicService{\n\n    protected run = (): void => {\n        console.log('server listen on port 3000')\n    }\n\n}Create a controller\nCreate a class that implement IController interface:\nclass PingController implements IController{\n\n    public readonly id: string = 'ping';\n    public readonly handlers?: ControllerHandler[] = [{\n        method: CONTROLLER_METHOD.GET,\n        path: '/ping',\n        handler: 'ping'\n    }];\n\n    public ping(): string{\n        return 'pong';\n    }\n}or use Controller and API decorators:\nimport { Controller, GET } from '../../src';\n\n@Controller('ping')\nexport class PingController{\n\n    @GET('/ping')\n    public ping(): string{\n        return 'pong';\n    }\n\n}Examples\nWithout Decorators\nclass PingService extends BasicService{\n\n    protected run = (): void => {\n        console.log('server listen on port 3000')\n    }\n\n}\n\nclass PingController implements IController{\n\n    public readonly id: string = 'ping';\n    public readonly handlers?: ControllerHandler[] = [{\n        method: CONTROLLER_METHOD.GET,\n        path: '/ping',\n        handler: 'ping'\n    }];\n\n    public ping(): string{\n        return 'pong';\n    }\n\n}\n\nconst pingService = new PingService({port: 3000}, new PingController());\n\npingService.listen();With Decorators\n@Service({port: 3000})\nclass PingService extends BasicService{\n\n    protected run = (): void => {\n        console.log('server listen on port 3000')\n    }\n\n}\n\n@Controller('ping')\nclass PingController{\n\n    @GET('/ping')\n    public ping(): string{\n        return 'pong';\n    }\n\n}Mixed Usage\nclass PingService extends BasicService{\n\n    protected run = (): void => {\n        console.log('server listen on port 3000')\n    }\n\n}\n\nconst pingService = new PingService({port: 3000});\n\n@Controller('ping', pingService)\nclass PingController implements IController{\n\n    public readonly id: string = 'ping';\n    public readonly handlers?: ControllerHandler[] = [{\n        method: CONTROLLER_METHOD.GET,\n        path: '/ping',\n        handler: 'ping'\n    }];\n\n    @GET('/ping')\n    public ping(): string{\n        return 'pong';\n    }\n\n}\n\npingService.listen();Useful commands\n\nnpm run build   compile typescript to js\nnpm run watch   watch for changes and compile\nnpm run test    perform the jest unit tests\nnpm run lint    perform the eslint linter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.4\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                        /builds/experiments72/basic-service/src/basic-service/basic-service.ts\n            \n            \n                95 %\n                (20/21)\n            \n            \n                91 %\n                (30/33)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                95 %\n                (20/21)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/basic-service/interfaces/controller.ts\n            \n            \n                100 %\n                (5/5)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/api.ts\n            \n            \n                100 %\n                (15/15)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/controller.ts\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/service-composer.ts\n            \n            \n                100 %\n                (9/9)\n            \n            \n                90 %\n                (9/10)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/service.ts\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/server/server-factory.ts\n            \n            \n                100 %\n                (8/8)\n            \n            \n                86 %\n                (6/7)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/server/server-singleton.ts\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/server/servers/express-server.ts\n            \n            \n                88 %\n                (37/42)\n            \n            \n                54 %\n                (13/24)\n            \n            \n                100 %\n                (10/10)\n            \n            \n                88 %\n                (37/42)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
