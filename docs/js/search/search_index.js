var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiConfig.html",[0,0.29,1,1.543]],["body/interfaces/ApiConfig.html",[0,0.345,1,2.329,2,1.028,3,0.886,4,0.886,5,0.642,6,2.592,7,0.758,8,2.735,9,1.58,10,4.105,11,2.329,12,3.279,13,0.642,14,1.503,15,1.333,16,1.604,17,2.769,18,0.812,19,0.057,20,2.735,21,1.292,22,1.188,23,0.758,24,1.734,25,0.758,26,0.043,27,0.043]],["title/classes/BasicService.html",[28,0.635,29,1.328]],["body/classes/BasicService.html",[2,0.714,3,0.615,4,0.615,5,0.446,7,0.874,8,2.139,11,1.822,13,0.446,14,1.176,15,0.877,18,0.806,19,0.057,22,1.37,25,0.526,26,0.034,27,0.034,28,1.007,29,1.991,30,1.278,31,1.991,32,2.717,33,1.501,34,2.139,35,2.565,36,3.211,37,2.139,38,3.211,39,2.139,40,1.493,41,1.42,42,2.565,43,2.717,44,2.313,45,4.078,46,2.717,47,1.461,48,1.822,49,2.105,50,1.501,51,3.211,52,2.404,53,1.827,54,3.211,55,2.139,56,1.568,57,1.176,58,1.493,59,1.568,60,1.493,61,1.827,62,1.822,63,3.211,64,2.105,65,2.253,66,1.357,67,1.723,68,1.822,69,2.105,70,0.952,71,1.1,72,1.278,73,1.278,74,1.568,75,2.253,76,1.501,77,2.253,78,2.253,79,2.253,80,2.253,81,2.253,82,2.253]],["title/interfaces/Controller.html",[0,0.29,23,0.635]],["body/interfaces/Controller.html",[0,0.38,2,0.832,3,0.717,4,0.717,5,0.519,7,0.613,13,0.519,14,1.308,15,0.975,16,1.286,17,2.303,18,0.803,19,0.057,20,1.75,21,1.337,23,1.144,24,1.715,25,0.948,26,0.038,27,0.038,41,0.832,57,1.761,58,1.308,62,2.668,83,1.49,84,2.854,85,2.848,86,1.595,87,1.744,88,2.854,89,1.75,90,1.75,91,1.75,92,2.38,93,2.128,94,1.983,95,1.983,96,1.983]],["title/interfaces/ControllerHandler.html",[0,0.29,86,0.996]],["body/interfaces/ControllerHandler.html",[0,0.38,2,0.83,3,0.715,4,0.715,5,0.518,7,0.612,13,0.518,14,1.306,15,1.243,16,1.523,17,2.584,18,0.802,19,0.057,20,2.376,21,1.37,23,1.064,24,1.713,25,0.947,26,0.037,27,0.037,41,0.83,57,1.594,62,2.023,83,1.486,84,2.849,85,2.932,86,1.485,87,1.279,88,2.092,89,1.745,90,1.745,91,1.745,92,2.376,93,2.126,94,1.98,95,1.98,96,1.98]],["title/classes/ExpressServer.html",[28,0.635,97,1.328]],["body/classes/ExpressServer.html",[0,0.13,3,0.333,4,0.333,5,0.241,7,0.688,9,1.222,13,0.241,15,0.333,16,1.108,18,0.644,19,0.057,21,1.26,22,1.281,23,1.122,24,0.846,25,0.285,26,0.021,27,0.021,28,0.595,30,0.692,31,1.884,40,1.079,44,1.135,46,0.812,47,1.387,48,1.135,49,2.313,50,1.696,53,1.804,55,1.334,56,1.589,57,1.191,58,1.191,59,0.977,60,1.079,61,1.243,64,2.253,66,0.846,67,1.63,68,1.135,69,1.804,70,1.245,71,1.708,72,0.692,73,1.672,74,1.884,76,0.812,85,1.135,86,1.543,87,1.243,93,0.595,97,1.439,98,2.189,99,0.692,100,2.096,101,1.599,102,2.034,103,1.599,104,1.599,105,1.599,106,2.331,107,1.599,108,1.219,109,1.334,110,1.219,111,2.331,112,1.334,113,2.6,114,1.219,115,1.696,116,1.696,117,1.334,118,1.334,119,1.334,120,1.334,121,1.219,122,1.964,123,1.219,124,1.334,125,1.672,126,1.219,127,1.439,128,1.334,129,1.672,130,1.219,131,1.334,132,1.884,133,0.812,134,2.034,135,2.034,136,1.334,137,2.918,138,1.334,139,0.974,140,0.974,141,0.812,142,0.974,143,0.974,144,0.974,145,1.444,146,0.974,147,1.696,148,2.808,149,0.974,150,1.599,151,0.974,152,0.812,153,0.812,154,0.974,155,0.974,156,0.974,157,0.974,158,0.974,159,1.599,160,1.334,161,1.599,162,0.812,163,0.974,164,0.974,165,1.599,166,0.974,167,0.974,168,0.974,169,0.974,170,1.135,171,0.974,172,0.974,173,0.974,174,0.974,175,0.974,176,0.974,177,0.974,178,0.974,179,0.974,180,0.974,181,0.974,182,0.974,183,0.974,184,0.974,185,0.974,186,0.974,187,0.974,188,0.974,189,0.974,190,0.974,191,1.599,192,0.974,193,0.974,194,0.974,195,0.974,196,0.974,197,0.974,198,0.974,199,0.974,200,0.974]],["title/interfaces/RouterControllerMap.html",[0,0.29,145,1.543]],["body/interfaces/RouterControllerMap.html",[0,0.166,2,0.494,3,0.426,4,0.426,5,0.308,7,0.364,9,1.075,15,0.426,16,1.075,18,0.308,19,0.058,21,1.212,22,1.429,23,1.123,24,1.03,25,0.364,26,0.026,27,0.026,28,0.569,31,1.19,40,1.099,44,0.884,46,1.038,47,1.338,49,1.992,50,1.038,53,0.761,55,1.038,60,1.099,61,1.465,64,2.119,66,0.658,67,1.268,68,0.884,69,1.657,70,1.03,72,0.884,73,1.925,74,2.062,76,1.038,85,1.383,86,1.494,87,1.19,97,1.19,98,1.383,99,0.884,100,2.215,101,1.245,102,1.947,106,1.624,109,1.038,111,2,112,1.038,113,2.397,115,1.624,116,1.624,117,1.038,118,1.038,119,1.038,120,1.038,122,1.624,124,1.038,125,1.383,127,1.19,128,1.038,129,1.383,131,1.038,132,1.798,134,1.947,135,1.947,136,1.038,137,3.105,138,1.624,139,1.245,140,1.245,141,1.038,142,1.245,143,1.947,144,1.947,145,1.925,146,1.947,147,2,148,3.014,149,1.245,150,1.947,151,1.245,152,1.038,153,1.038,154,1.245,155,1.245,156,1.245,157,1.245,158,1.245,159,1.947,160,1.624,161,1.947,162,1.038,163,1.245,164,1.245,165,1.947,166,1.245,167,1.245,168,1.245,169,1.245,170,1.383,171,1.245,172,1.245,173,1.245,174,1.245,175,1.245,176,1.245,177,1.245,178,1.245,179,1.245,180,1.245,181,1.245,182,1.245,183,1.245,184,1.245,185,1.245,186,1.245,187,1.245,188,1.245,189,1.245,190,1.245,191,1.947,192,1.245,193,1.245,194,1.245,195,1.245,196,1.245,197,1.245,198,1.245,199,1.245,200,1.245,201,1.559,202,1.559,203,1.559]],["title/classes/Server.html",[28,0.635,47,0.862]],["body/classes/Server.html",[3,0.603,4,0.603,5,0.437,7,0.516,13,0.437,15,1.104,18,0.88,19,0.057,22,1.16,25,0.74,26,0.033,27,0.033,28,0.865,30,1.254,31,1.807,37,1.473,39,2.11,40,0.809,47,1.513,48,1.797,49,1.546,53,1.546,56,1.079,57,0.809,58,0.809,59,1.079,60,1.566,61,1.807,62,2.293,64,1.546,66,1.338,71,1.546,72,1.254,73,2.1,74,1.546,92,2.11,93,1.546,97,1.807,100,2.293,133,1.473,147,2.11,152,1.473,153,2.693,160,1.473,162,1.473,170,2.427,204,1.473,205,4.042,206,4.999,207,4.042,208,4.042,209,4.042,210,3.167,211,2.21,212,3.167,213,4.452,214,4.452,215,3.229,216,2.21,217,3.167,218,3.167,219,3.167,220,3.167,221,2.21,222,2.21,223,3.167,224,2.21,225,2.21,226,2.21,227,3.167,228,2.21,229,2.21,230,2.21,231,2.21]],["title/interfaces/ServerApplication.html",[0,0.29,60,0.996]],["body/interfaces/ServerApplication.html",[0,0.181,2,0.539,3,0.464,4,0.464,5,0.336,7,0.83,9,1.465,13,0.336,16,1.126,18,0.758,19,0.057,21,1.334,22,0.623,23,1.142,24,1.709,25,0.397,26,0.027,27,0.027,44,1.799,47,1.505,48,1.479,53,1.975,56,1.872,57,1.404,58,1.404,59,1.736,60,0.954,61,1.273,64,2.387,66,1.34,67,1.921,68,1.799,69,1.975,70,1.921,71,1.975,74,2.121,86,1.739,87,1.872,103,2.533,104,2.533,105,2.533,106,2.895,107,2.533,109,1.737,111,2.968,112,1.737,115,2.554,116,2.554,117,1.737,118,1.737,119,1.737,120,1.737,122,2.554,124,1.737,125,2.017,127,1.736,128,1.737,129,2.017,131,2.113,132,2.056,136,1.737,232,3.364,233,1.358,234,2.607,235,1.7,236,1.7,237,1.7,238,1.7,239,1.7,240,1.7]],["title/interfaces/ServiceConfig.html",[0,0.29,52,1.328]],["body/interfaces/ServiceConfig.html",[0,0.3,2,0.892,3,0.769,4,0.769,5,0.557,7,0.658,8,1.877,9,1.421,11,1.598,13,0.557,14,1.371,16,1.186,18,0.887,19,0.056,21,1.375,25,0.658,26,0.039,27,0.039,34,1.877,41,0.892,47,1.186,52,1.829,58,1.821,66,1.582,125,2.387,127,2.429,129,2.125,132,2.483,133,2.495,215,3.361,241,2.25,242,2.25,243,4.484,244,4.484,245,3.745,246,3.745,247,3.745,248,3.745,249,3.745,250,3.745,251,3.745,252,3.745]],["title/coverage.html",[253,2.438]],["body/coverage.html",[0,0.514,1,1.638,5,0.571,6,2.306,9,0.915,18,0.571,19,0.056,23,0.889,26,0.04,27,0.04,28,0.995,29,1.409,31,2.211,32,1.923,33,1.923,40,1.057,41,0.915,47,0.915,52,1.409,60,1.057,70,2.082,83,2.159,86,1.057,94,1.409,95,1.409,96,1.409,97,1.409,98,2.159,99,2.159,145,1.638,204,1.923,232,2.306,233,2.306,241,2.306,242,2.306,253,1.923,254,2.887,255,2.887,256,2.306,257,4.216,258,3.402,259,3.806,260,2.306,261,3.995,262,3.759,263,2.306,264,2.306,265,2.887,266,2.306,267,2.306,268,2.306]],["title/dependencies.html",[269,1.836,270,2.602]],["body/dependencies.html",[19,0.055,26,0.049,27,0.049,100,2.627,132,1.931,138,2.636,141,2.636,270,3.16,271,3.956,272,3.956,273,3.956,274,3.956,275,3.956]],["title/miscellaneous/enumerations.html",[276,1.304,277,2.602]],["body/miscellaneous/enumerations.html",[13,0.754,17,2.571,19,0.054,26,0.048,27,0.048,41,1.208,83,2.162,89,2.54,90,2.54,91,2.54,93,2.443,94,2.212,95,2.212,96,2.212,276,2.162,277,3.045,278,3.045]],["title/miscellaneous/functions.html",[276,1.304,279,2.17]],["body/miscellaneous/functions.html",[1,1.953,7,1.108,9,1.603,11,1.953,13,0.492,15,1.221,16,1.531,18,0.938,19,0.054,21,1.356,23,0.995,26,0.036,27,0.036,28,0.995,29,1.215,41,1.417,43,2.294,52,1.928,56,2.316,57,1.819,58,1.736,59,1.681,67,1.051,69,1.215,70,1.8,71,2.08,94,1.928,95,1.928,96,1.928,137,1.658,262,1.988,263,1.988,264,1.988,276,1.412,278,1.988,279,1.658,280,4.473,281,2.489,282,2.489,283,4.743,284,4.743,285,2.489,286,2.489,287,2.489,288,2.489,289,2.489,290,2.489,291,3.443,292,2.489,293,2.489,294,2.489,295,2.489,296,2.489,297,2.489]],["title/index.html",[13,0.455,298,2.298,299,2.298]],["body/index.html",[9,0.83,12,2.092,15,0.715,19,0.054,21,0.715,22,1.306,23,0.947,25,0.612,26,0.037,27,0.037,28,0.833,29,1.741,34,2.376,35,2.092,37,1.745,39,2.702,40,1.485,41,1.379,42,2.092,43,3.034,49,1.279,67,1.107,127,1.279,148,1.745,170,1.486,300,2.619,301,2.619,302,2.619,303,2.619,304,2.619,305,2.619,306,2.619,307,4.554,308,2.619,309,3.566,310,3.566,311,4.055,312,3.566,313,3.566,314,3.566,315,4.353,316,3.566,317,4.055,318,2.619,319,2.619,320,2.619,321,2.619,322,2.619,323,2.619,324,4.353,325,2.619,326,2.619,327,2.619,328,2.619,329,2.619,330,2.092,331,2.619,332,4.055,333,2.619,334,2.619,335,2.619,336,2.619,337,2.619,338,2.619,339,2.619,340,2.619,341,2.619,342,2.619,343,2.619,344,2.619,345,2.619,346,3.566,347,2.619,348,2.619,349,3.566,350,2.619,351,2.619,352,2.619,353,2.619,354,2.619,355,2.619,356,2.619,357,2.619,358,2.619,359,2.619,360,3.566,361,2.619,362,2.619,363,3.566,364,1.745,365,3.566,366,2.619,367,1.745,368,2.619,369,2.619,370,2.619,371,2.619]],["title/modules.html",[372,2.923]],["body/modules.html",[19,0.05,26,0.05,27,0.05,372,3.336]],["title/overview.html",[373,2.923]],["body/overview.html",[2,1.302,19,0.05,26,0.05,27,0.05,30,2.332,373,3.284,374,4.111,375,4.111]],["title/properties.html",[14,1.192,269,1.836]],["body/properties.html",[14,1.511,19,0.052,26,0.05,27,0.05,330,3.297,376,4.127]],["title/unit-test.html",[364,1.955,367,1.955]],["body/unit-test.html",[5,0.569,19,0.057,26,0.04,27,0.04,32,1.918,33,1.918,40,1.054,98,1.633,99,1.633,204,1.918,253,1.918,256,2.3,257,4.271,258,2.3,260,3.035,261,3.397,266,3.397,267,2.3,268,2.3,279,1.918,364,1.918,367,1.918,377,2.879,378,2.879,379,4.924,380,4.253,381,2.879,382,2.879,383,4.523,384,3.799,385,3.799,386,2.879,387,2.879,388,3.799,389,3.799,390,2.879,391,2.879,392,2.879,393,2.879,394,3.799,395,4.702,396,2.879,397,2.879,398,2.879]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"unit-test.html":{}}}],["1",{"_index":193,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["1.0.0",{"_index":376,"title":{},"body":{"properties.html":{}}}],["1.10.0",{"_index":272,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":261,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["10/10",{"_index":392,"title":{},"body":{"unit-test.html":{}}}],["100",{"_index":257,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["14/15",{"_index":385,"title":{},"body":{"unit-test.html":{}}}],["15/15",{"_index":394,"title":{},"body":{"unit-test.html":{}}}],["16/20",{"_index":391,"title":{},"body":{"unit-test.html":{}}}],["17/18",{"_index":382,"title":{},"body":{"unit-test.html":{}}}],["18",{"_index":306,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":383,"title":{},"body":{"unit-test.html":{}}}],["3",{"_index":374,"title":{},"body":{"overview.html":{}}}],["3/3",{"_index":259,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":349,"title":{},"body":{"index.html":{}}}],["4.18.2",{"_index":271,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":273,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":258,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["43/45",{"_index":389,"title":{},"body":{"unit-test.html":{}}}],["5.0.0",{"_index":275,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":266,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["6",{"_index":375,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":395,"title":{},"body":{"unit-test.html":{}}}],["7/7",{"_index":265,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":260,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["80",{"_index":390,"title":{},"body":{"unit-test.html":{}}}],["82",{"_index":386,"title":{},"body":{"unit-test.html":{}}}],["9/11",{"_index":387,"title":{},"body":{"unit-test.html":{}}}],["93",{"_index":384,"title":{},"body":{"unit-test.html":{}}}],["94",{"_index":381,"title":{},"body":{"unit-test.html":{}}}],["96",{"_index":388,"title":{},"body":{"unit-test.html":{}}}],["abstract",{"_index":205,"title":{},"body":{"classes/Server.html":{}}}],["abstraction",{"_index":101,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["add",{"_index":111,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["addcontroller",{"_index":103,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{}}}],["addcontroller(controller",{"_index":109,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["addcontrollerhandlers",{"_index":104,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{}}}],["addcontrollerhandlers(controllerid",{"_index":112,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["added",{"_index":337,"title":{},"body":{"index.html":{}}}],["additional",{"_index":328,"title":{},"body":{"index.html":{}}}],["addmiddleware",{"_index":105,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{}}}],["addmiddleware(middleware",{"_index":119,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["allow",{"_index":66,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["already",{"_index":162,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{}}}],["api",{"_index":9,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["api(config",{"_index":282,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apiconfig",{"_index":1,"title":{"interfaces/ApiConfig.html":{}},"body":{"interfaces/ApiConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["app",{"_index":152,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{}}}],["application",{"_index":61,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{}}}],["application.ts",{"_index":233,"title":{},"body":{"interfaces/ServerApplication.html":{},"coverage.html":{}}}],["application.ts:19",{"_index":239,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:24",{"_index":238,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:31",{"_index":237,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:38",{"_index":235,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:46",{"_index":236,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["application.ts:54",{"_index":240,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["args",{"_index":120,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["array.isarray(controllerhandlers",{"_index":173,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["async(req",{"_index":181,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["automatically",{"_index":297,"title":{},"body":{"miscellaneous/functions.html":{}}}],["available",{"_index":90,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"miscellaneous/enumerations.html":{}}}],["await",{"_index":188,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["basic",{"_index":34,"title":{},"body":{"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["basicservice",{"_index":29,"title":{"classes/BasicService.html":{}},"body":{"classes/BasicService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["basicservice({port",{"_index":348,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":215,"title":{},"body":{"classes/Server.html":{},"interfaces/ServiceConfig.html":{}}}],["bootstrap",{"_index":345,"title":{},"body":{"index.html":{}}}],["branches",{"_index":377,"title":{},"body":{"unit-test.html":{}}}],["breaking",{"_index":326,"title":{},"body":{"index.html":{}}}],["bugfixes",{"_index":319,"title":{},"body":{"index.html":{}}}],["build",{"_index":35,"title":{},"body":{"classes/BasicService.html":{},"index.html":{}}}],["builds/experiments72/basic",{"_index":379,"title":{},"body":{"unit-test.html":{}}}],["callback",{"_index":69,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"miscellaneous/functions.html":{}}}],["change",{"_index":219,"title":{},"body":{"classes/Server.html":{}}}],["changes",{"_index":324,"title":{},"body":{"index.html":{}}}],["chore(deps",{"_index":335,"title":{},"body":{"index.html":{}}}],["chosen",{"_index":248,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["class",{"_index":28,"title":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"classes/Server.html":{}},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["classes",{"_index":30,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"classes/Server.html":{},"overview.html":{}}}],["close",{"_index":106,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["code",{"_index":333,"title":{},"body":{"index.html":{}}}],["commands",{"_index":359,"title":{},"body":{"index.html":{}}}],["commit",{"_index":311,"title":{},"body":{"index.html":{}}}],["compile",{"_index":360,"title":{},"body":{"index.html":{}}}],["config",{"_index":285,"title":{},"body":{"miscellaneous/functions.html":{}}}],["config.ts",{"_index":242,"title":{},"body":{"interfaces/ServiceConfig.html":{},"coverage.html":{}}}],["configuration",{"_index":11,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["console.log('controller",{"_index":183,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["console.log('controller[handler",{"_index":185,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["console.log('handler",{"_index":184,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["console.log('server",{"_index":351,"title":{},"body":{"index.html":{}}}],["const",{"_index":148,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"index.html":{}}}],["constructor",{"_index":50,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["constructor(serviceconfig",{"_index":51,"title":{},"body":{"classes/BasicService.html":{}}}],["contains",{"_index":89,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"miscellaneous/enumerations.html":{}}}],["controller",{"_index":23,"title":{"interfaces/Controller.html":{}},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["controller('ping",{"_index":353,"title":{},"body":{"index.html":{}}}],["controller(name",{"_index":290,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controller.handler",{"_index":165,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controller[handler",{"_index":186,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controller[handler](req",{"_index":189,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controller_method",{"_index":17,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"miscellaneous/enumerations.html":{}}}],["controllerhandler",{"_index":86,"title":{"interfaces/ControllerHandler.html":{}},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"coverage.html":{}}}],["controllerhandler.handler",{"_index":179,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandler.method",{"_index":177,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandler.path",{"_index":178,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandlers",{"_index":113,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerhandlers.foreach((controllerhandler",{"_index":176,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["controllerid",{"_index":117,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["convention",{"_index":312,"title":{},"body":{"index.html":{}}}],["conventional",{"_index":327,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":253,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["create",{"_index":39,"title":{},"body":{"classes/BasicService.html":{},"classes/Server.html":{},"index.html":{}}}],["createexpressserver",{"_index":223,"title":{},"body":{"classes/Server.html":{}}}],["createrouterforcontroller(controller",{"_index":168,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["creates",{"_index":55,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["critical",{"_index":318,"title":{},"body":{"index.html":{}}}],["customization",{"_index":329,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":283,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decorator's",{"_index":10,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["decorators",{"_index":352,"title":{},"body":{"index.html":{}}}],["default",{"_index":133,"title":{},"body":{"classes/ExpressServer.html":{},"classes/Server.html":{},"interfaces/ServiceConfig.html":{}}}],["default_swagger_location",{"_index":135,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["default_swagger_path",{"_index":134,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["default_swagger_url",{"_index":150,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["defined",{"_index":53,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{}}}],["delete",{"_index":96,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["delete(path",{"_index":286,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dependencies",{"_index":270,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":336,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["dictionary",{"_index":144,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["direcotry",{"_index":136,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["directory",{"_index":252,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["docs",{"_index":149,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["docspath",{"_index":243,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["documentation",{"_index":254,"title":{},"body":{"coverage.html":{}}}],["enable/disable",{"_index":250,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["enum",{"_index":92,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/Server.html":{}}}],["enumerations",{"_index":277,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error('controller",{"_index":161,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["error('server",{"_index":228,"title":{},"body":{"classes/Server.html":{}}}],["eslint",{"_index":370,"title":{},"body":{"index.html":{}}}],["essential",{"_index":323,"title":{},"body":{"index.html":{}}}],["execute",{"_index":42,"title":{},"body":{"classes/BasicService.html":{},"index.html":{}}}],["experiments72/basic",{"_index":308,"title":{},"body":{"index.html":{}}}],["export",{"_index":25,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["expose",{"_index":131,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["express",{"_index":100,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"dependencies.html":{}}}],["express.router",{"_index":169,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["expressserver",{"_index":97,"title":{"classes/ExpressServer.html":{}},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"coverage.html":{}}}],["extend",{"_index":38,"title":{},"body":{"classes/BasicService.html":{}}}],["extens",{"_index":294,"title":{},"body":{"miscellaneous/functions.html":{}}}],["facotry",{"_index":217,"title":{},"body":{"classes/Server.html":{}}}],["false",{"_index":79,"title":{},"body":{"classes/BasicService.html":{}}}],["features",{"_index":321,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"unit-test.html":{}}}],["follows",{"_index":314,"title":{},"body":{"index.html":{}}}],["force",{"_index":214,"title":{},"body":{"classes/Server.html":{}}}],["found",{"_index":172,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["function",{"_index":70,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":279,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"unit-test.html":{}}}],["get('/ping",{"_index":355,"title":{},"body":{"index.html":{}}}],["get(path",{"_index":287,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getinstance",{"_index":209,"title":{},"body":{"classes/Server.html":{}}}],["getting",{"_index":298,"title":{"index.html":{}},"body":{}}],["handler",{"_index":85,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["handlers",{"_index":87,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["http",{"_index":142,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["id",{"_index":118,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["identifier",{"_index":255,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":147,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{}}}],["implement",{"_index":301,"title":{},"body":{"index.html":{}}}],["implements",{"_index":102,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["import",{"_index":22,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"index.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indexable",{"_index":201,"title":{},"body":{"interfaces/RouterControllerMap.html":{}}}],["indicates",{"_index":332,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["initializated",{"_index":229,"title":{},"body":{"classes/Server.html":{}}}],["installation",{"_index":303,"title":{},"body":{"index.html":{}}}],["instance",{"_index":62,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/Server.html":{}}}],["instantiate",{"_index":296,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"overview.html":{}}}],["interfaces/controller",{"_index":139,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["interfaces/server",{"_index":72,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{}}}],["jest",{"_index":366,"title":{},"body":{"index.html":{}}}],["js",{"_index":362,"title":{},"body":{"index.html":{}}}],["key",{"_index":146,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["lines",{"_index":378,"title":{},"body":{"unit-test.html":{}}}],["lint",{"_index":369,"title":{},"body":{"index.html":{}}}],["linter",{"_index":371,"title":{},"body":{"index.html":{}}}],["list",{"_index":88,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["listen",{"_index":67,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["listen(port",{"_index":124,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["listening",{"_index":245,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["literal",{"_index":202,"title":{},"body":{"interfaces/RouterControllerMap.html":{}}}],["location",{"_index":129,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["major",{"_index":325,"title":{},"body":{"index.html":{}}}],["marks",{"_index":284,"title":{},"body":{"miscellaneous/functions.html":{}}}],["matching",{"_index":27,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"unit-test.html":{}}}],["matter",{"_index":343,"title":{},"body":{"index.html":{}}}],["method",{"_index":15,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["methods",{"_index":48,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{}}}],["microservice",{"_index":36,"title":{},"body":{"classes/BasicService.html":{}}}],["microservices",{"_index":302,"title":{},"body":{"index.html":{}}}],["middleware",{"_index":122,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["minor",{"_index":320,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":276,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["module",{"_index":300,"title":{},"body":{"index.html":{}}}],["modules",{"_index":372,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":116,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["morgan",{"_index":138,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"dependencies.html":{}}}],["name",{"_index":57,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"miscellaneous/functions.html":{}}}],["needed",{"_index":340,"title":{},"body":{"index.html":{}}}],["new",{"_index":40,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["nodejs",{"_index":305,"title":{},"body":{"index.html":{}}}],["non",{"_index":322,"title":{},"body":{"index.html":{}}}],["npm",{"_index":307,"title":{},"body":{"index.html":{}}}],["number",{"_index":125,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["object",{"_index":12,"title":{},"body":{"interfaces/ApiConfig.html":{},"index.html":{}}}],["one",{"_index":115,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["optional",{"_index":58,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"classes/ExpressServer.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["overview",{"_index":373,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":269,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":74,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{}}}],["parameters",{"_index":56,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"miscellaneous/functions.html":{}}}],["patch",{"_index":316,"title":{},"body":{"index.html":{}}}],["path",{"_index":16,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["perform",{"_index":365,"title":{},"body":{"index.html":{}}}],["ping",{"_index":356,"title":{},"body":{"index.html":{}}}],["pingcontroller",{"_index":354,"title":{},"body":{"index.html":{}}}],["pingservice",{"_index":347,"title":{},"body":{"index.html":{}}}],["pingservice.run",{"_index":350,"title":{},"body":{"index.html":{}}}],["pong",{"_index":357,"title":{},"body":{"index.html":{}}}],["port",{"_index":127,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"index.html":{}}}],["post",{"_index":94,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["post(path",{"_index":288,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prepareswagger",{"_index":107,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/ServerApplication.html":{}}}],["prepareswagger(path",{"_index":128,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["presents",{"_index":163,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["private",{"_index":73,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{}}}],["project",{"_index":313,"title":{},"body":{"index.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/ServiceConfig.html":{},"properties.html":{}}}],["property",{"_index":24,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["protected",{"_index":45,"title":{},"body":{"classes/BasicService.html":{}}}],["provided",{"_index":292,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provider",{"_index":295,"title":{},"body":{"miscellaneous/functions.html":{}}}],["public",{"_index":49,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"index.html":{}}}],["put",{"_index":95,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["put(path",{"_index":289,"title":{},"body":{"miscellaneous/functions.html":{}}}],["randomically",{"_index":249,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["rappresent",{"_index":234,"title":{},"body":{"interfaces/ServerApplication.html":{}}}],["rappresents",{"_index":8,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{}}}],["readonly",{"_index":46,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["recreate",{"_index":230,"title":{},"body":{"classes/Server.html":{}}}],["refactor(optional_scope",{"_index":331,"title":{},"body":{"index.html":{}}}],["refactoring",{"_index":334,"title":{},"body":{"index.html":{}}}],["release",{"_index":315,"title":{},"body":{"index.html":{}}}],["requests",{"_index":68,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["requirements",{"_index":304,"title":{},"body":{"index.html":{}}}],["res",{"_index":182,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["res.send(response",{"_index":190,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["response",{"_index":187,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["results",{"_index":26,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"unit-test.html":{}}}],["return",{"_index":170,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"index.html":{}}}],["returns",{"_index":71,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"miscellaneous/functions.html":{}}}],["router",{"_index":137,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"miscellaneous/functions.html":{}}}],["router/controller",{"_index":143,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["router[method](path",{"_index":180,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["routercontrollermap",{"_index":145,"title":{"interfaces/RouterControllerMap.html":{}},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{}}}],["run",{"_index":43,"title":{},"body":{"classes/BasicService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["run(callback",{"_index":63,"title":{},"body":{"classes/BasicService.html":{}}}],["select",{"_index":218,"title":{},"body":{"classes/Server.html":{}}}],["semantic",{"_index":309,"title":{},"body":{"index.html":{}}}],["server",{"_index":47,"title":{"classes/Server.html":{}},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{}}}],["server.getinstance",{"_index":77,"title":{},"body":{"classes/BasicService.html":{}}}],["server.ts",{"_index":99,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{},"unit-test.html":{}}}],["server.ts:118",{"_index":114,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:14",{"_index":203,"title":{},"body":{"interfaces/RouterControllerMap.html":{}}}],["server.ts:162",{"_index":130,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:45",{"_index":108,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:62",{"_index":126,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:69",{"_index":123,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:78",{"_index":121,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server.ts:87",{"_index":110,"title":{},"body":{"classes/ExpressServer.html":{}}}],["server[server_method[type",{"_index":226,"title":{},"body":{"classes/Server.html":{}}}],["server_method",{"_index":222,"title":{},"body":{"classes/Server.html":{}}}],["server_type",{"_index":213,"title":{},"body":{"classes/Server.html":{}}}],["server_type.express",{"_index":220,"title":{},"body":{"classes/Server.html":{}}}],["serverapplication",{"_index":60,"title":{"interfaces/ServerApplication.html":{}},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"coverage.html":{}}}],["servers/express",{"_index":221,"title":{},"body":{"classes/Server.html":{}}}],["servertype",{"_index":224,"title":{},"body":{"classes/Server.html":{}}}],["service",{"_index":41,"title":{},"body":{"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["service(serviceconfig",{"_index":293,"title":{},"body":{"miscellaneous/functions.html":{}}}],["service.ts",{"_index":33,"title":{},"body":{"classes/BasicService.html":{},"coverage.html":{},"unit-test.html":{}}}],["service.ts:17",{"_index":54,"title":{},"body":{"classes/BasicService.html":{}}}],["service.ts:39",{"_index":65,"title":{},"body":{"classes/BasicService.html":{}}}],["service/basic",{"_index":32,"title":{},"body":{"classes/BasicService.html":{},"coverage.html":{},"unit-test.html":{}}}],["service/server.ts",{"_index":204,"title":{},"body":{"classes/Server.html":{},"coverage.html":{},"unit-test.html":{}}}],["service/server.ts:40",{"_index":216,"title":{},"body":{"classes/Server.html":{}}}],["service/server.ts:55",{"_index":211,"title":{},"body":{"classes/Server.html":{}}}],["service/servers/express",{"_index":98,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"coverage.html":{},"unit-test.html":{}}}],["service/src/basic",{"_index":380,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/api.ts",{"_index":393,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/controller.ts",{"_index":396,"title":{},"body":{"unit-test.html":{}}}],["service/src/decorators/service.ts",{"_index":397,"title":{},"body":{"unit-test.html":{}}}],["service/src/interfaces/controller.ts",{"_index":398,"title":{},"body":{"unit-test.html":{}}}],["serviceconfig",{"_index":52,"title":{"interfaces/ServiceConfig.html":{}},"body":{"classes/BasicService.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["serviceconfig?.swaggerlocation",{"_index":81,"title":{},"body":{"classes/BasicService.html":{}}}],["shouldn't",{"_index":341,"title":{},"body":{"index.html":{}}}],["singleton",{"_index":207,"title":{},"body":{"classes/Server.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{}}}],["specified",{"_index":247,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["src",{"_index":346,"title":{},"body":{"index.html":{}}}],["src/.../api.ts",{"_index":280,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../controller.ts",{"_index":278,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../service.ts",{"_index":281,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/basic",{"_index":31,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"coverage.html":{}}}],["src/decorators/api.ts",{"_index":262,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/decorators/controller.ts",{"_index":263,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/decorators/service.ts",{"_index":264,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/interfaces/api.ts",{"_index":6,"title":{},"body":{"interfaces/ApiConfig.html":{},"coverage.html":{}}}],["src/interfaces/controller.ts",{"_index":83,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/interfaces/server",{"_index":232,"title":{},"body":{"interfaces/ServerApplication.html":{},"coverage.html":{}}}],["src/interfaces/service",{"_index":241,"title":{},"body":{"interfaces/ServiceConfig.html":{},"coverage.html":{}}}],["start",{"_index":44,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{}}}],["started",{"_index":299,"title":{"index.html":{}},"body":{}}],["statements",{"_index":256,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":206,"title":{},"body":{"classes/Server.html":{}}}],["string",{"_index":21,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["structure",{"_index":84,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["swagger",{"_index":132,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"dependencies.html":{}}}],["swagger.json",{"_index":151,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerlocation",{"_index":244,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["swaggeroptions",{"_index":199,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerui",{"_index":140,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerui.serve",{"_index":197,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["swaggerui.setup(undefined",{"_index":198,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["table",{"_index":268,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":267,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["test",{"_index":364,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{}}}],["tests",{"_index":368,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":339,"title":{},"body":{"index.html":{}}}],["this.addcontrollerhandlers(controller.name",{"_index":166,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app",{"_index":153,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{}}}],["this.app.listen(port",{"_index":156,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use",{"_index":196,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(express.json",{"_index":154,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(express.static(location",{"_index":195,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(middleware",{"_index":158,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(morgan('tiny",{"_index":155,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.app.use(router",{"_index":167,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.createrouterforcontroller(controller",{"_index":164,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controller.name",{"_index":159,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid",{"_index":171,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.handler",{"_index":191,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.handler?.indexof(controllerhandler",{"_index":192,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.handler?.push(controllerhandler",{"_index":194,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].controller.instance",{"_index":175,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.routercontrollermap[controllerid].router",{"_index":174,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.server",{"_index":76,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.server.listen(this.serviceconfig?.port",{"_index":82,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server.prepareswagger(serviceconfig?.docspath",{"_index":80,"title":{},"body":{"classes/BasicService.html":{}}}],["this.server?.close",{"_index":157,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["this.servertype",{"_index":227,"title":{},"body":{"classes/Server.html":{}}}],["this.serviceconfig",{"_index":75,"title":{},"body":{"classes/BasicService.html":{}}}],["this.serviceconfig?.swagger",{"_index":78,"title":{},"body":{"classes/BasicService.html":{}}}],["this.useserver(server_type.express",{"_index":231,"title":{},"body":{"classes/Server.html":{}}}],["throw",{"_index":160,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{}}}],["trigger",{"_index":342,"title":{},"body":{"index.html":{}}}],["true",{"_index":251,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["tsoa",{"_index":274,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":18,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BasicService.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"interfaces/ServiceConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["type=server_type.express",{"_index":225,"title":{},"body":{"classes/Server.html":{}}}],["typescript",{"_index":361,"title":{},"body":{"index.html":{}}}],["ui",{"_index":141,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"dependencies.html":{}}}],["unique",{"_index":208,"title":{},"body":{"classes/Server.html":{}}}],["unit",{"_index":367,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{}}}],["updated",{"_index":338,"title":{},"body":{"index.html":{}}}],["url",{"_index":200,"title":{},"body":{"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{}}}],["usage",{"_index":344,"title":{},"body":{"index.html":{}}}],["use",{"_index":37,"title":{},"body":{"classes/BasicService.html":{},"classes/Server.html":{},"index.html":{}}}],["used",{"_index":291,"title":{},"body":{"miscellaneous/functions.html":{}}}],["useful",{"_index":358,"title":{},"body":{"index.html":{}}}],["useserver",{"_index":210,"title":{},"body":{"classes/Server.html":{}}}],["useserver(type",{"_index":212,"title":{},"body":{"classes/Server.html":{}}}],["value",{"_index":93,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"classes/ExpressServer.html":{},"classes/Server.html":{},"miscellaneous/enumerations.html":{}}}],["verb",{"_index":20,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{}}}],["verbs",{"_index":91,"title":{},"body":{"interfaces/Controller.html":{},"interfaces/ControllerHandler.html":{},"miscellaneous/enumerations.html":{}}}],["version",{"_index":330,"title":{},"body":{"index.html":{},"properties.html":{}}}],["versioning",{"_index":310,"title":{},"body":{"index.html":{}}}],["versions",{"_index":317,"title":{},"body":{"index.html":{}}}],["void",{"_index":64,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"interfaces/RouterControllerMap.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{}}}],["watch",{"_index":363,"title":{},"body":{"index.html":{}}}],["web",{"_index":246,"title":{},"body":{"interfaces/ServiceConfig.html":{}}}],["yes",{"_index":59,"title":{},"body":{"classes/BasicService.html":{},"classes/ExpressServer.html":{},"classes/Server.html":{},"interfaces/ServerApplication.html":{},"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiConfig.html":{"url":"interfaces/ApiConfig.html","title":"interface - ApiConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/api.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresents the @API decorator's configuration object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         CONTROLLER_METHOD\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CONTROLLER_METHOD\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The verb of the API.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The path of the API\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CONTROLLER_METHOD } from './controller';\n\n/**\n * Rappresents the @API decorator's configuration object.\n * @property {CONTROLLER_METHOD} method\n * @property {string} path\n */\nexport interface ApiConfig {\n    /**\n     * The verb of the API.\n     */\n    method: CONTROLLER_METHOD;\n\n    /**\n     * The path of the API\n     */\n    path: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BasicService.html":{"url":"classes/BasicService.html","title":"class - BasicService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BasicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/basic-service.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresents the basic class to build a microservice. Just use this class or extend it to create a new service and execute the method run to start it.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(serviceConfig?: ServiceConfig)\n                    \n                \n                        \n                            \n                                Defined in src/basic-service/basic-service.ts:17\n                            \n                        \n\n                \n                    \n                            Creates a new BasicService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        serviceConfig\n                                                  \n                                                        \n                                                                        ServiceConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nThe service configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ServerApplication\n\n                    \n                \n                    \n                        \n                                Defined in src/basic-service/basic-service.ts:17\n                        \n                    \n\n            \n                \n                    The server application instance.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(callback?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/basic-service.ts:39\n                \n            \n\n\n            \n                \n                    Allow the service to start listen for requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \noptional callback on listen.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServiceConfig } from '../interfaces';\nimport { ServerApplication } from '../interfaces/server-application';\nimport { Server } from './server';\n\n/**\n * Rappresents the basic class to build a microservice. Just use this class or extend it to create a new service and execute the method run to start it.\n */\nexport class BasicService{\n\n    private readonly serviceConfig: ServiceConfig;\n\n    /**\n     * The server application instance.\n     * @type {ServerApplication}\n     * @protected\n     */\n    protected readonly server: ServerApplication;\n\n    /**\n     * Creates a new BasicService.\n     * @param {ServiceConfig} [serviceConfig] - The service configuration.\n     */\n    public constructor(serviceConfig?: ServiceConfig) {\n        if (serviceConfig){\n            this.serviceConfig = serviceConfig;\n        }\n\n        this.server = Server.getInstance();\n\n        if (this.serviceConfig?.swagger !== false){\n            this.server.prepareSwagger(serviceConfig?.docsPath, serviceConfig?.swaggerLocation);\n        }\n    }\n    /**\n     * Allow the service to start listen for requests.\n     *\n     * @param {() => void} [callback] - optional callback on listen.\n     */\n    public run(callback?: () => void): void {\n        this.server.listen(this.serviceConfig?.port, callback);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Controller.html":{"url":"interfaces/Controller.html","title":"interface - Controller","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Controller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/controller.ts\n        \n\n\n            \n                Description\n            \n            \n                The controller structure.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            handler\n                                        \n                                \n                                \n                                        \n                                            instance\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handler:         ControllerHandler[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ControllerHandler[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The handlers' list.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        instance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        instance:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The controller instance\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The controller name.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Controller {\n\n    /**\n     * The controller name.\n     */\n    name: string;\n\n    /**\n     * The controller instance\n     */\n    instance: any;\n\n    /**\n     * The handlers' list.\n     */\n    handler?: ControllerHandler[];\n}\n\n/**\n * Contains the available verbs for the service.\n * @enum {string}\n */\nexport enum CONTROLLER_METHOD {\n    /** @value get */\n    GET = 'get',\n    /** @value post */\n    POST = 'post',\n    /** @value put */\n    PUT = 'put',\n    /** @value delete */\n    DELETE = 'delete'\n}\n\n/**\n * The controller handler structure.\n *\n * @property {CONTROLLER_METHOD} method\n * @property {string} path\n * @property {string} handler\n */\nexport interface ControllerHandler {\n\n    /**\n     * The verb of the handler.\n     */\n    method: CONTROLLER_METHOD;\n\n    /**\n     * The path of the handler.\n     */\n    path: string;\n\n    /**\n     * The handler name.\n     */\n    handler: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ControllerHandler.html":{"url":"interfaces/ControllerHandler.html","title":"interface - ControllerHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ControllerHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/controller.ts\n        \n\n\n            \n                Description\n            \n            \n                The controller handler structure.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            handler\n                                        \n                                \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handler:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The handler name.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         CONTROLLER_METHOD\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CONTROLLER_METHOD\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The verb of the handler.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The path of the handler.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Controller {\n\n    /**\n     * The controller name.\n     */\n    name: string;\n\n    /**\n     * The controller instance\n     */\n    instance: any;\n\n    /**\n     * The handlers' list.\n     */\n    handler?: ControllerHandler[];\n}\n\n/**\n * Contains the available verbs for the service.\n * @enum {string}\n */\nexport enum CONTROLLER_METHOD {\n    /** @value get */\n    GET = 'get',\n    /** @value post */\n    POST = 'post',\n    /** @value put */\n    PUT = 'put',\n    /** @value delete */\n    DELETE = 'delete'\n}\n\n/**\n * The controller handler structure.\n *\n * @property {CONTROLLER_METHOD} method\n * @property {string} path\n * @property {string} handler\n */\nexport interface ControllerHandler {\n\n    /**\n     * The verb of the handler.\n     */\n    method: CONTROLLER_METHOD;\n\n    /**\n     * The path of the handler.\n     */\n    path: string;\n\n    /**\n     * The handler name.\n     */\n    handler: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressServer.html":{"url":"classes/ExpressServer.html","title":"class - ExpressServer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressServer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/servers/express-server.ts\n        \n\n\n            \n                Description\n            \n            \n                The Express server abstraction class.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ServerApplication\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addController\n                            \n                            \n                                    Public\n                                addControllerHandlers\n                            \n                            \n                                    Public\n                                addMiddleware\n                            \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                listen\n                            \n                            \n                                    Public\n                                prepareSwagger\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/basic-service/servers/express-server.ts:45\n                            \n                        \n\n                \n                    \n                            Creates a new ExpressServer.\n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addController\n                        \n                    \n                \n            \n            \n                \n                    \n                    addController(controller: Controller)\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/servers/express-server.ts:87\n                \n            \n\n\n            \n                \n                    Add API controller\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    controller\n                                    \n                                                Controller\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addControllerHandlers\n                        \n                    \n                \n            \n            \n                \n                    \n                    addControllerHandlers(controllerid: string, controllerHandlers: ControllerHandler | ControllerHandler[])\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/servers/express-server.ts:118\n                \n            \n\n\n            \n                \n                    Add one or more API controller handlers.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    controllerid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe controller id.\n\n\n                                    \n                                \n                                \n                                    controllerHandlers\n                                    \n                                                ControllerHandler | ControllerHandler[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addMiddleware\n                        \n                    \n                \n            \n            \n                \n                    \n                    addMiddleware(middleware: (args: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/servers/express-server.ts:78\n                \n            \n\n\n            \n                \n                    Add middleware to the server.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    middleware\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/servers/express-server.ts:69\n                \n            \n\n\n            \n                \n                    Close the server.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        listen\n                        \n                    \n                \n            \n            \n                \n                    \n                    listen(port?: string | number, callback?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/servers/express-server.ts:62\n                \n            \n\n\n            \n                \n                    Allow the server to start listen for requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe listen port of the server.\n\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe on listen callback.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        prepareSwagger\n                        \n                    \n                \n            \n            \n                \n                    \n                    prepareSwagger(path: string, location: string)\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/servers/express-server.ts:162\n                \n            \n\n\n            \n                \n                    Expose the swagger API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_SWAGGER_PATH\n                                    \n\n                                    \n                                        \nthe path of the swagger api.\n\n\n                                    \n                                \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_SWAGGER_LOCATION\n                                    \n\n                                    \n                                        \nthe direcotry of the swagger.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express, { Application, Router } from 'express';\nimport morgan from 'morgan';\nimport { Controller, ControllerHandler } from '../../interfaces/controller';\nimport { ServerApplication } from '../../interfaces/server-application';\nimport swaggerUi from 'swagger-ui-express';\nimport { Server } from 'http';\n\n/**\n * Router/Controller Dictionary\n *\n * @property {Router} router - the express Router\n * @property {Controller} controller\n */\ninterface RouterControllerMap {\n    [key: string]: {\n        router: Router;\n        controller: Controller;\n    }\n}\n\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_PATH = '/docs';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_LOCATION = 'swagger';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_URL = '/swagger.json';\n\n/**\n * The Express server abstraction class.\n *\n * @implements {ServerApplication}\n */\nexport class ExpressServer implements ServerApplication {\n\n    private readonly app: Application;\n\n    private server: Server;\n\n    private routerControllerMap: RouterControllerMap = {};\n\n    /**\n     * Creates a new ExpressServer.\n     */\n    public constructor() {\n        this.app = express();\n        this.app.use(express.json());\n        this.app.use(morgan('tiny'));\n    }\n\n    /**\n     * Allow the server to start listen for requests.\n     *\n     * @param {(string | number)} [port] - the listen port of the server.\n     * @param {Function} [callback] - the on listen callback.\n     */\n    public listen(port?: string | number, callback?: () => void): void {\n        this.server = this.app.listen(port, callback);\n    }\n\n    /**\n     * Close the server.\n     */\n    public close(): void {\n        this.server?.close();\n    }\n\n    /**\n     * Add middleware to the server.\n     *\n     * @param {Function} middleware\n     */\n    public addMiddleware(middleware: (...args: any) => void): void {\n        this.app.use(middleware);\n    }\n\n    /**\n     * Add API controller\n     *\n     * @param {Controller} controller\n     */\n    public addController(controller: Controller): void {\n        if (this.routerControllerMap[controller.name]) {\n            throw new Error('controller already presents');\n        }\n\n        const router = this.createRouterForController(controller);\n\n        if (controller.handler) {\n            this.addControllerHandlers(controller.name, controller.handler);\n        }\n\n        this.app.use(router);\n    }\n\n    private createRouterForController(controller: Controller): Router {\n        const router = express.Router();\n\n        this.routerControllerMap[controller.name] = {\n            router: router,\n            controller: controller\n        };\n\n        return router;\n    }\n\n    /**\n     * Add one or more API controller handlers.\n     *\n     * @param {string} controllerid - the controller id.\n     * @param {(ControllerHandler | ControllerHandler[])} controllerHandler - one or more handlers.\n     */\n    public addControllerHandlers(controllerid: string, controllerHandlers: ControllerHandler | ControllerHandler[]): void {\n        if (!this.routerControllerMap[controllerid]) {\n            throw new Error('controller not found');\n        }\n\n        if (!Array.isArray(controllerHandlers)){\n            controllerHandlers = [controllerHandlers];\n        }\n\n        const router = this.routerControllerMap[controllerid].router;\n        const controller = this.routerControllerMap[controllerid].controller.instance;\n\n        controllerHandlers.forEach((controllerHandler: ControllerHandler): void => {\n            const method = controllerHandler.method;\n            const path = controllerHandler.path;\n            const handler = controllerHandler.handler;\n\n            router[method](path, async(req: any, res: any) => {\n                console.log('Controller:', controller);\n\n                console.log('handler:', handler);\n\n                console.log('controller[handler]:', controller[handler]);\n                const response = await controller[handler](req);\n\n                return res.send(response);\n            });\n\n            if (!this.routerControllerMap[controllerid].controller.handler){\n                this.routerControllerMap[controllerid].controller.handler = [];\n            }\n\n            if (this.routerControllerMap[controllerid].controller.handler?.indexOf(controllerHandler) === -1){\n                this.routerControllerMap[controllerid].controller.handler?.push(controllerHandler);\n            }\n        });\n    }\n\n    /**\n     * Expose the swagger API.\n     *\n     * @param {string} [path] - the path of the swagger api.\n     * @param {string} [location] -  the direcotry of the swagger.\n     */\n    public prepareSwagger(path: string = DEFAULT_SWAGGER_PATH, location: string = DEFAULT_SWAGGER_LOCATION): void {\n        this.app.use(express.static(location));\n        this.app.use(\n            path,\n            swaggerUi.serve,\n            swaggerUi.setup(undefined, {\n                swaggerOptions: {\n                    url: DEFAULT_SWAGGER_URL,\n                }\n            })\n        );\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RouterControllerMap.html":{"url":"interfaces/RouterControllerMap.html","title":"interface - RouterControllerMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RouterControllerMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/servers/express-server.ts\n        \n\n\n            \n                Description\n            \n            \n                Router/Controller Dictionary\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/basic-service/servers/express-server.ts:14\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import express, { Application, Router } from 'express';\nimport morgan from 'morgan';\nimport { Controller, ControllerHandler } from '../../interfaces/controller';\nimport { ServerApplication } from '../../interfaces/server-application';\nimport swaggerUi from 'swagger-ui-express';\nimport { Server } from 'http';\n\n/**\n * Router/Controller Dictionary\n *\n * @property {Router} router - the express Router\n * @property {Controller} controller\n */\ninterface RouterControllerMap {\n    [key: string]: {\n        router: Router;\n        controller: Controller;\n    }\n}\n\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_PATH = '/docs';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_LOCATION = 'swagger';\n/**\n * @ignore\n */\nconst DEFAULT_SWAGGER_URL = '/swagger.json';\n\n/**\n * The Express server abstraction class.\n *\n * @implements {ServerApplication}\n */\nexport class ExpressServer implements ServerApplication {\n\n    private readonly app: Application;\n\n    private server: Server;\n\n    private routerControllerMap: RouterControllerMap = {};\n\n    /**\n     * Creates a new ExpressServer.\n     */\n    public constructor() {\n        this.app = express();\n        this.app.use(express.json());\n        this.app.use(morgan('tiny'));\n    }\n\n    /**\n     * Allow the server to start listen for requests.\n     *\n     * @param {(string | number)} [port] - the listen port of the server.\n     * @param {Function} [callback] - the on listen callback.\n     */\n    public listen(port?: string | number, callback?: () => void): void {\n        this.server = this.app.listen(port, callback);\n    }\n\n    /**\n     * Close the server.\n     */\n    public close(): void {\n        this.server?.close();\n    }\n\n    /**\n     * Add middleware to the server.\n     *\n     * @param {Function} middleware\n     */\n    public addMiddleware(middleware: (...args: any) => void): void {\n        this.app.use(middleware);\n    }\n\n    /**\n     * Add API controller\n     *\n     * @param {Controller} controller\n     */\n    public addController(controller: Controller): void {\n        if (this.routerControllerMap[controller.name]) {\n            throw new Error('controller already presents');\n        }\n\n        const router = this.createRouterForController(controller);\n\n        if (controller.handler) {\n            this.addControllerHandlers(controller.name, controller.handler);\n        }\n\n        this.app.use(router);\n    }\n\n    private createRouterForController(controller: Controller): Router {\n        const router = express.Router();\n\n        this.routerControllerMap[controller.name] = {\n            router: router,\n            controller: controller\n        };\n\n        return router;\n    }\n\n    /**\n     * Add one or more API controller handlers.\n     *\n     * @param {string} controllerid - the controller id.\n     * @param {(ControllerHandler | ControllerHandler[])} controllerHandler - one or more handlers.\n     */\n    public addControllerHandlers(controllerid: string, controllerHandlers: ControllerHandler | ControllerHandler[]): void {\n        if (!this.routerControllerMap[controllerid]) {\n            throw new Error('controller not found');\n        }\n\n        if (!Array.isArray(controllerHandlers)){\n            controllerHandlers = [controllerHandlers];\n        }\n\n        const router = this.routerControllerMap[controllerid].router;\n        const controller = this.routerControllerMap[controllerid].controller.instance;\n\n        controllerHandlers.forEach((controllerHandler: ControllerHandler): void => {\n            const method = controllerHandler.method;\n            const path = controllerHandler.path;\n            const handler = controllerHandler.handler;\n\n            router[method](path, async(req: any, res: any) => {\n                console.log('Controller:', controller);\n\n                console.log('handler:', handler);\n\n                console.log('controller[handler]:', controller[handler]);\n                const response = await controller[handler](req);\n\n                return res.send(response);\n            });\n\n            if (!this.routerControllerMap[controllerid].controller.handler){\n                this.routerControllerMap[controllerid].controller.handler = [];\n            }\n\n            if (this.routerControllerMap[controllerid].controller.handler?.indexOf(controllerHandler) === -1){\n                this.routerControllerMap[controllerid].controller.handler?.push(controllerHandler);\n            }\n        });\n    }\n\n    /**\n     * Expose the swagger API.\n     *\n     * @param {string} [path] - the path of the swagger api.\n     * @param {string} [location] -  the direcotry of the swagger.\n     */\n    public prepareSwagger(path: string = DEFAULT_SWAGGER_PATH, location: string = DEFAULT_SWAGGER_LOCATION): void {\n        this.app.use(express.static(location));\n        this.app.use(\n            path,\n            swaggerUi.serve,\n            swaggerUi.setup(undefined, {\n                swaggerOptions: {\n                    url: DEFAULT_SWAGGER_URL,\n                }\n            })\n        );\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Server.html":{"url":"classes/Server.html","title":"class - Server","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Server\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/basic-service/server.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract static singleton class to create an unique server instance.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                    Static\n                                useServer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getInstance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/server.ts:55\n                \n            \n\n\n            \n                \n                    Singleton method that return the unique server application instance.\n\n\n                    \n                    \n                    \n                        Returns :         ServerApplication\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        useServer\n                        \n                    \n                \n            \n            \n                \n                    \n                    useServer(type: SERVER_TYPE, force?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/basic-service/server.ts:40\n                \n            \n\n\n            \n                \n                    Facotry method that allow to select or change the server type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            SERVER_TYPE\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        SERVER_TYPE.EXPRESS\n                                    \n\n                                \n                                \n                                    force\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServerApplication } from '../interfaces/server-application';\nimport { ExpressServer } from './servers/express-server';\n\n/**\n * @ignore\n */\nexport enum SERVER_TYPE {\n    /** @value EXPRESS */\n    EXPRESS = 'EXPRESS'\n}\n\n/**\n * @ignore\n */\nenum SERVER_METHOD {\n    EXPRESS = 'createExpressServer'\n}\n\n/**\n * Abstract static singleton class to create an unique server instance.\n *\n * @abstract\n */\nexport abstract class Server{\n\n    private static serverType: SERVER_TYPE;\n    private static app: ServerApplication;\n\n    private static createExpressServer(): ExpressServer {\n        return new ExpressServer();\n    }\n\n    /**\n     * Facotry method that allow to select or change the server type.\n     *\n     * @static\n     * @param {SERVER_TYPE} [type=SERVER_TYPE.EXPRESS]\n     * @param {boolean} [force]\n     */\n    public static useServer(type: SERVER_TYPE = SERVER_TYPE.EXPRESS, force?: boolean): void {\n        if (!this.app || force){\n            this.app = Server[SERVER_METHOD[type]]();\n            this.serverType = type;\n        }else if (this.serverType !== type){\n            throw Error('Server already initializated. Use \\'force\\' to recreate.');\n        }\n    }\n\n    /**\n     * Singleton method that return the unique server application instance.\n     *\n     * @static\n     * @return {ServerApplication}\n     */\n    public static getInstance(): ServerApplication{\n        if (!this.app){\n            this.useServer(SERVER_TYPE.EXPRESS);\n        }\n\n        return this.app;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServerApplication.html":{"url":"interfaces/ServerApplication.html","title":"interface - ServerApplication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServerApplication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/server-application.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresent the Server application.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addController\n                                    \n                                \n                                \n                                    \n                                        addControllerHandlers\n                                    \n                                \n                                \n                                    \n                                        addMiddleware\n                                    \n                                \n                                \n                                    \n                                        close\n                                    \n                                \n                                \n                                    \n                                        listen\n                                    \n                                \n                                \n                                    \n                                        prepareSwagger\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addController\n                        \n                    \n                \n            \n            \n                \naddController(controller: Controller)\n                \n            \n\n\n            \n                \n                    Defined in src/interfaces/server-application.ts:38\n                \n            \n\n\n            \n                \n                    Add API controller\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    controller\n                                    \n                                                Controller\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addControllerHandlers\n                        \n                    \n                \n            \n            \n                \naddControllerHandlers(controllerid: string, controllerHandler: ControllerHandler | ControllerHandler[])\n                \n            \n\n\n            \n                \n                    Defined in src/interfaces/server-application.ts:46\n                \n            \n\n\n            \n                \n                    Add one or more API controller handlers.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    controllerid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe controller id.\n\n\n                                    \n                                \n                                \n                                    controllerHandler\n                                    \n                                                ControllerHandler | ControllerHandler[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \none or more handlers.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addMiddleware\n                        \n                    \n                \n            \n            \n                \naddMiddleware(middleware: (args: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/interfaces/server-application.ts:31\n                \n            \n\n\n            \n                \n                    Add middleware to the server.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    middleware\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/interfaces/server-application.ts:24\n                \n            \n\n\n            \n                \n                    Close the server.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(port?: string | number, callback?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/interfaces/server-application.ts:19\n                \n            \n\n\n            \n                \n                    Allow the server to start listen for requests.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe listen port of the server.\n\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe on listen callback.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prepareSwagger\n                        \n                    \n                \n            \n            \n                \nprepareSwagger(path?: string, location?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/interfaces/server-application.ts:54\n                \n            \n\n\n            \n                \n                    Expose the swagger API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe path of the swagger api.\n\n\n                                    \n                                \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe direcotry of the swagger.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Controller, ControllerHandler } from './controller';\n\n/**\n * Rappresent the Server application.\n * @property {Function} listen - Allow the server to start listen for requests.\n * @property {Function} close - Close the server.\n * @property {Function} addMiddleware - Add middleware to the server.\n * @property {Function} addController - Add API controller.\n * @property {Function} addControllerHandlers - Add one or more API controller handlers.\n * @property {Function} prepareSwagger - Expose the swagger API.\n */\nexport interface ServerApplication {\n    /**\n     * Allow the server to start listen for requests.\n     *\n     * @param {(string | number)} [port] - the listen port of the server.\n     * @param {Function} [callback] - the on listen callback.\n     */\n    listen(port?: string | number, callback?: () => void): void;\n\n    /**\n     * Close the server.\n     */\n    close(): void;\n\n    /**\n     * Add middleware to the server.\n     *\n     * @param {Function} middleware\n     */\n    addMiddleware(middleware: (...args: any) => void): void\n\n    /**\n     * Add API controller\n     *\n     * @param {Controller} controller\n     */\n    addController(controller: Controller): void;\n\n    /**\n     * Add one or more API controller handlers.\n     *\n     * @param {string} controllerid - the controller id.\n     * @param {(ControllerHandler | ControllerHandler[])} controllerHandler - one or more handlers.\n     */\n    addControllerHandlers(controllerid: string, controllerHandler: ControllerHandler | ControllerHandler[]): void;\n\n    /**\n     * Expose the swagger API.\n     *\n     * @param {string} [path] - the path of the swagger api.\n     * @param {string} [location] -  the direcotry of the swagger.\n     */\n    prepareSwagger(path?: string, location?: string): void;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServiceConfig.html":{"url":"interfaces/ServiceConfig.html","title":"interface - ServiceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServiceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/service-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Rappresents the basic service configuration.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            docsPath\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            port\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            swagger\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            swaggerLocation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        docsPath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        docsPath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The path of the swagger api.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The listening port of the web server. if not specified the port is chosen randomically.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        swagger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        swagger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Allow to enable/disable the swagger api. Default: true.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        swaggerLocation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        swaggerLocation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The directory location of the swagger.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ServiceConfig {\n\n    /**\n     * The listening port of the web server. if not specified the port is chosen randomically.\n     */\n    port?: string | number;\n\n    /**\n     * The path of the swagger api.\n     */\n    docsPath?: string;\n\n    /**\n     * The directory location of the swagger.\n     */\n    swaggerLocation?: string;\n\n    /**\n     * Allow to enable/disable the swagger api. Default: true.\n     */\n    swagger?: boolean;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/basic-service/basic-service.ts\n            \n            class\n            BasicService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/basic-service/server.ts\n            \n            class\n            Server\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/basic-service/servers/express-server.ts\n            \n            class\n            ExpressServer\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/basic-service/servers/express-server.ts\n            \n            interface\n            RouterControllerMap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            API\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            DELETE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            GET\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            POST\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/api.ts\n            \n            function\n            PUT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/controller.ts\n            \n            function\n            Controller\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/service.ts\n            \n            function\n            Service\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/interfaces/api.ts\n            \n            interface\n            ApiConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/interfaces/controller.ts\n            \n            interface\n            Controller\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/interfaces/controller.ts\n            \n            interface\n            ControllerHandler\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/interfaces/server-application.ts\n            \n            interface\n            ServerApplication\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/interfaces/service-config.ts\n            \n            interface\n            ServiceConfig\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            express : ^4.18.2\n        \n            morgan : ^1.10.0\n        \n            swagger-ui-express : ^4.6.0\n        \n            tsoa : ^5.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CONTROLLER_METHOD   (src/.../controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/interfaces/controller.ts\n    \n        \n            \n                \n                    \n                        \n                        CONTROLLER_METHOD\n                    \n                \n                    \n                        \n                            Contains the available verbs for the service.\n\n                        \n                    \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : get\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : put\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API   (src/.../api.ts)\n                        \n                        \n                            Controller   (src/.../controller.ts)\n                        \n                        \n                            DELETE   (src/.../api.ts)\n                        \n                        \n                            GET   (src/.../api.ts)\n                        \n                        \n                            POST   (src/.../api.ts)\n                        \n                        \n                            PUT   (src/.../api.ts)\n                        \n                        \n                            Service   (src/.../service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators/api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API\n                        \n                    \n                \n            \n            \n                \nAPI(config: ApiConfig)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as an API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                ApiConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe configuration of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DELETE\n                        \n                    \n                \n            \n            \n                \nDELETE(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a DELETE API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GET\n                        \n                    \n                \n            \n            \n                \nGET(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a GET API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POST\n                        \n                    \n                \n            \n            \n                \nPOST(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a POST API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUT\n                        \n                    \n                \n            \n            \n                \nPUT(path: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a method as a PUT API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path of the API.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/decorators/controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Controller\n                        \n                    \n                \n            \n            \n                \nController(name?: string)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a class as a controller.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe name of the controller. Will be used as router. If not provided will be used the name of the class.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/decorators/service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Service\n                        \n                    \n                \n            \n            \n                \nService(serviceConfig: ServiceConfig, run?)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that marks a class as a service. The class must extens BasicService\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    serviceConfig\n                                    \n                                                ServiceConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe service configuration.\n\n\n                                    \n                                \n                                \n                                    run\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe listen callback. If provider the service will be instantiate automatically.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBasic Service\n\n\n\n\n\nThis is a basic service module to implement microservices.\nInstallation / Requirements\nNodejs >= 18\nnpm i @experiments72/basic-service\nSemantic Versioning & Commit Convention\nThis project follows semantic versioning.\nWe release patch versions for critical bugfixes, minor versions for new features or non-essential changes, and major\nversions for any breaking changes.\nThis project also follows the conventional commit convention with some\nadditional customization:\nPatch version changes\n\nrefactor(optional_scope) - indicates a code refactoring.\nchore(deps): indicates some dependency has been added / updated and therefore a new release is needed.\nno-release: indicates the commit shouldn't trigger a release no matter what.\n\nUsage\nService bootstrap\nCreate BasicService object and execute run method:\nimport { BasicService } from '../../src';\n\nconst pingService = new BasicService({port: 3000});\n\npingService.run(() => {\n    console.log('server listen on port 3000');\n});Create a controller\nCreate a class and use Controller and API decorators:\nimport { Controller, GET } from '../../src';\n\n@Controller('ping')\nexport class PingController{\n\n    @GET('/ping')\n    public ping(): string{\n        return 'pong';\n    }\n\n}Useful commands\n\nnpm run build   compile typescript to js\nnpm run watch   watch for changes and compile\nnpm run test    perform the jest unit tests\nnpm run lint    perform the eslint linter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                        /builds/experiments72/basic-service/src/basic-service/basic-service.ts\n            \n            \n                100 %\n                (8/8)\n            \n            \n                94 %\n                (17/18)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/basic-service/server.ts\n            \n            \n                93 %\n                (14/15)\n            \n            \n                82 %\n                (9/11)\n            \n            \n                100 %\n                (5/5)\n            \n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/basic-service/servers/express-server.ts\n            \n            \n                96 %\n                (43/45)\n            \n            \n                80 %\n                (16/20)\n            \n            \n                100 %\n                (10/10)\n            \n            \n                96 %\n                (43/45)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/api.ts\n            \n            \n                100 %\n                (15/15)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/controller.ts\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/decorators/service.ts\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        /builds/experiments72/basic-service/src/interfaces/controller.ts\n            \n            \n                100 %\n                (5/5)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
